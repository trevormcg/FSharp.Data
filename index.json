[{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data.html","title":"FSharp.Data","content":"CssSelectorExtensions \nCsvExtensions \nHtmlActivePatterns \nHtmlAttribute \nHtmlDocument \nHtmlExtensions \nHtmlNode \nHttpContentTypes \nHttpEncodings \nHttpMethod \nHttpRequestHeaders \nHttpResponseHeaders \nHttpStatusCodes \nJsonExtensions \nJsonValue \nMimeTypes \nXElementExtensions \nCsvFile \nCsvProvider \nCsvRow \nHtmlAttribute \nHtmlAttributeExtensions \nHtmlDocument \nHtmlDocumentExtensions \nHtmlNode \nHtmlNodeExtensions \nHtmlProvider \nHttp \nHttpRequestBody \nHttpResponse \nHttpResponseBody \nHttpResponseWithStream \nJsonExtensions \nJsonProvider \nJsonSaveOptions \nJsonValue \nMultipartItem \nStringExtensions \nTextConversions \nWorldBankData \nWorldBankDataProvider \nXmlProvider"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime.html","title":"FSharp.Data.Runtime","content":"Caching \nCsvInference \nHtmlInference \nHtmlRuntime \nIO \nNameUtils \nStructuralInference \nXmlSchema \nCsvFile\u003C\u0027RowType\u003E \nHtmlDefinitionList \nHtmlList \nHtmlObject \nHtmlTable \nHtmlTableCell \nJsonConversions \nJsonRuntime \nJsonValueOptionAndPath \nTextRuntime \nXmlRuntime"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes.html","title":"FSharp.Data.Runtime.BaseTypes","content":"HtmlDocument \nHtmlList\u003C\u0027ItemType\u003E \nHtmlTable\u003C\u0027RowType\u003E \nIJsonDocument \nJsonDocument \nXmlElement"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes.html","title":"FSharp.Data.Runtime.StructuralTypes","content":"Bit \nBit0 \nBit1 \nInferedMultiplicity \nInferedProperty \nInferedType \nInferedTypeTag \nPrimitiveInferedProperty \nTypeWrapper"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank.html","title":"FSharp.Data.Runtime.WorldBank","content":"Implementation \nCountry \nCountryCollection\u003C\u0027T\u003E \nICountry \nICountryCollection \nIIndicators \nIIndicatorsDescriptions \nIRegion \nIRegionCollection \nITopic \nITopicCollection \nIWorldBankData \nIndicator \nIndicatorDescription \nIndicators \nIndicatorsDescriptions \nRegion \nRegionCollection\u003C\u0027T\u003E \nTopic \nTopicCollection\u003C\u0027T\u003E \nWorldBankData"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions.html","title":"CssSelectorExtensions","content":"CssSelectorExtensions \n \nCssSelectorExtensions.CssSelectorExtensions \nCssSelectorExtensions"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions-cssselectorextensions.html","title":"CssSelectorExtensions","content":"CssSelectorExtensions \n \nCssSelectorExtensions.CssSelect \nCssSelect \nCssSelectorExtensions.CssSelect \nCssSelect \nCssSelectorExtensions.CssSelect \nCssSelect"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions-cssselectorextensions.html#CssSelect","title":"CssSelectorExtensions.CssSelect","content":"CssSelectorExtensions.CssSelect \nCssSelect \n\n Gets descendants matched by Css selector\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions-cssselectorextensions.html#CssSelect","title":"CssSelectorExtensions.CssSelect","content":"CssSelectorExtensions.CssSelect \nCssSelect \n\n Gets descendants matched by Css selector\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions-cssselectorextensions.html#CssSelect","title":"CssSelectorExtensions.CssSelect","content":"CssSelectorExtensions.CssSelect \nCssSelect \n\n Gets descendants matched by Css selector\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvextensionsmodule.html","title":"CsvExtensions","content":"CsvExtensions \n\n Provides the dynamic operator for getting column values by name from CSV rows\n \nCsvExtensions.( ? ) \n( ? )"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvextensionsmodule.html#( ? )","title":"CsvExtensions.( ? )","content":"CsvExtensions.( ? ) \n( ? ) \n\n Get the value of a column by name from a CSV row\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlactivepatterns.html","title":"HtmlActivePatterns","content":"HtmlActivePatterns \n \nHtmlActivePatterns.( |HtmlElement|HtmlText|HtmlComment|HtmlCData| ) \n( |HtmlElement|HtmlText|HtmlComment|HtmlCData| ) \nHtmlActivePatterns.( |HtmlAttribute| ) \n( |HtmlAttribute| )"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlactivepatterns.html#( |HtmlElement|HtmlText|HtmlComment|HtmlCData| )","title":"HtmlActivePatterns.( |HtmlElement|HtmlText|HtmlComment|HtmlCData| )","content":"HtmlActivePatterns.( |HtmlElement|HtmlText|HtmlComment|HtmlCData| ) \n( |HtmlElement|HtmlText|HtmlComment|HtmlCData| ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlactivepatterns.html#( |HtmlAttribute| )","title":"HtmlActivePatterns.( |HtmlAttribute| )","content":"HtmlActivePatterns.( |HtmlAttribute| ) \n( |HtmlAttribute| ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributemodule.html","title":"HtmlAttribute","content":"HtmlAttribute \n\n Module with operations on HTML attributes\n \nHtmlAttribute.name \nname \nHtmlAttribute.value \nvalue"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributemodule.html#name","title":"HtmlAttribute.name","content":"HtmlAttribute.name \nname \n\n Gets the name of the given attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributemodule.html#value","title":"HtmlAttribute.value","content":"HtmlAttribute.value \nvalue \n\n Gets the value of the given attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html","title":"HtmlDocument","content":"HtmlDocument \n\n Module with operations on HTML documents\n \nHtmlDocument.docType \ndocType \nHtmlDocument.elements \nelements \nHtmlDocument.elementsNamed \nelementsNamed \nHtmlDocument.descendants \ndescendants \nHtmlDocument.descendantsNamed \ndescendantsNamed \nHtmlDocument.descendantsWithPath \ndescendantsWithPath \nHtmlDocument.descendantsNamedWithPath \ndescendantsNamedWithPath \nHtmlDocument.body \nbody \nHtmlDocument.tryGetBody \ntryGetBody \nHtmlDocument.html \nhtml \nHtmlDocument.tryGetHtml \ntryGetHtml"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#docType","title":"HtmlDocument.docType","content":"HtmlDocument.docType \ndocType \n\n Returns the doctype of the document\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#elements","title":"HtmlDocument.elements","content":"HtmlDocument.elements \nelements \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#elementsNamed","title":"HtmlDocument.elementsNamed","content":"HtmlDocument.elementsNamed \nelementsNamed \n\n Returns all of the root elements of the document that match the set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#descendants","title":"HtmlDocument.descendants","content":"HtmlDocument.descendants \ndescendants \n\n Gets all of the descendants of this document that statisfy the given predicate\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#descendantsNamed","title":"HtmlDocument.descendantsNamed","content":"HtmlDocument.descendantsNamed \ndescendantsNamed \n\n Finds all of the descendant nodes of this document that match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#descendantsWithPath","title":"HtmlDocument.descendantsWithPath","content":"HtmlDocument.descendantsWithPath \ndescendantsWithPath \n\n Gets all of the descendants of this document that statisfy the given predicate\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#descendantsNamedWithPath","title":"HtmlDocument.descendantsNamedWithPath","content":"HtmlDocument.descendantsNamedWithPath \ndescendantsNamedWithPath \n\n Finds all of the descendant nodes of this document that match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#body","title":"HtmlDocument.body","content":"HtmlDocument.body \nbody \n\n Finds the body element of the given document,\n this throws an exception if no body element exists.\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#tryGetBody","title":"HtmlDocument.tryGetBody","content":"HtmlDocument.tryGetBody \ntryGetBody \n\n Tries to find the body element of the given document.\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#html","title":"HtmlDocument.html","content":"HtmlDocument.html \nhtml \n\n Finds the html element of the given document,\n this throws an exception if no html element exists.\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#tryGetHtml","title":"HtmlDocument.tryGetHtml","content":"HtmlDocument.tryGetHtml \ntryGetHtml \n\n Tries to find the html element of the given document.\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlextensionsmodule.html","title":"HtmlExtensions","content":"HtmlExtensions \n\n Provides the dynamic operator for getting attribute values from HTML elements\n \nHtmlExtensions.( ? ) \n( ? )"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlextensionsmodule.html#( ? )","title":"HtmlExtensions.( ? )","content":"HtmlExtensions.( ? ) \n( ? ) \n\n Gets the value of an attribute from an HTML element\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html","title":"HtmlNode","content":"HtmlNode \n\n Module with operations on HTML nodes\n \nHtmlNode.name \nname \nHtmlNode.elements \nelements \nHtmlNode.elementsNamed \nelementsNamed \nHtmlNode.descendants \ndescendants \nHtmlNode.descendantsAndSelf \ndescendantsAndSelf \nHtmlNode.descendantsNamed \ndescendantsNamed \nHtmlNode.descendantsAndSelfNamed \ndescendantsAndSelfNamed \nHtmlNode.descendantsWithPath \ndescendantsWithPath \nHtmlNode.descendantsAndSelfWithPath \ndescendantsAndSelfWithPath \nHtmlNode.descendantsNamedWithPath \ndescendantsNamedWithPath \nHtmlNode.descendantsAndSelfNamedWithPath \ndescendantsAndSelfNamedWithPath \nHtmlNode.attributes \nattributes \nHtmlNode.tryGetAttribute \ntryGetAttribute \nHtmlNode.attribute \nattribute \nHtmlNode.attributeValue \nattributeValue \nHtmlNode.hasAttribute \nhasAttribute \nHtmlNode.hasName \nhasName \nHtmlNode.hasId \nhasId \nHtmlNode.hasClass \nhasClass \nHtmlNode.innerTextExcluding \ninnerTextExcluding \nHtmlNode.innerText \ninnerText \nHtmlNode.directInnerText \ndirectInnerText \nHtmlNode.cssSelect \ncssSelect"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#name","title":"HtmlNode.name","content":"HtmlNode.name \nname \n\n Gets the given nodes name\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#elements","title":"HtmlNode.elements","content":"HtmlNode.elements \nelements \n\n Gets all of the nodes immediately under this node\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#elementsNamed","title":"HtmlNode.elementsNamed","content":"HtmlNode.elementsNamed \nelementsNamed \n\n Finds all of the elements nodes of this node that match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendants","title":"HtmlNode.descendants","content":"HtmlNode.descendants \ndescendants \n\n Gets all of the descendants of this node that statisfy the given predicate\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsAndSelf","title":"HtmlNode.descendantsAndSelf","content":"HtmlNode.descendantsAndSelf \ndescendantsAndSelf \n\n Gets all of the descendants of this node that statisfy the given predicate\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsNamed","title":"HtmlNode.descendantsNamed","content":"HtmlNode.descendantsNamed \ndescendantsNamed \n\n Finds all of the descendant nodes of this nodes that match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsAndSelfNamed","title":"HtmlNode.descendantsAndSelfNamed","content":"HtmlNode.descendantsAndSelfNamed \ndescendantsAndSelfNamed \n\n Finds all of the descendant nodes of this nodes that match the given set of names\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsWithPath","title":"HtmlNode.descendantsWithPath","content":"HtmlNode.descendantsWithPath \ndescendantsWithPath \n\n Gets all of the descendants of this node that statisfy the given predicate\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsAndSelfWithPath","title":"HtmlNode.descendantsAndSelfWithPath","content":"HtmlNode.descendantsAndSelfWithPath \ndescendantsAndSelfWithPath \n\n Gets all of the descendants of this node that statisfy the given predicate\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsNamedWithPath","title":"HtmlNode.descendantsNamedWithPath","content":"HtmlNode.descendantsNamedWithPath \ndescendantsNamedWithPath \n\n Finds all of the descendant nodes of this nodes that match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsAndSelfNamedWithPath","title":"HtmlNode.descendantsAndSelfNamedWithPath","content":"HtmlNode.descendantsAndSelfNamedWithPath \ndescendantsAndSelfNamedWithPath \n\n Finds all of the descendant nodes of this nodes that match the given set of names\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#attributes","title":"HtmlNode.attributes","content":"HtmlNode.attributes \nattributes \n\n Gets all of the attributes of this node\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#tryGetAttribute","title":"HtmlNode.tryGetAttribute","content":"HtmlNode.tryGetAttribute \ntryGetAttribute \n\n Tries to return an attribute that exists on the current node\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#attribute","title":"HtmlNode.attribute","content":"HtmlNode.attribute \nattribute \n\n Returns the attribute with the given name. If the\n attribute does not exist then this will throw an exception\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#attributeValue","title":"HtmlNode.attributeValue","content":"HtmlNode.attributeValue \nattributeValue \n\n Return the value of the named attribute, or an empty string if not found.\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#hasAttribute","title":"HtmlNode.hasAttribute","content":"HtmlNode.hasAttribute \nhasAttribute \n\n Returns true if the current node has an attribute that\n matches both the name and the value\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#hasName","title":"HtmlNode.hasName","content":"HtmlNode.hasName \nhasName \n\n Returns true if the current node has the specified name\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#hasId","title":"HtmlNode.hasId","content":"HtmlNode.hasId \nhasId \n\n Returns true if the current node has the specified id\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#hasClass","title":"HtmlNode.hasClass","content":"HtmlNode.hasClass \nhasClass \n\n Returns true if the current node has the specified class\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#innerTextExcluding","title":"HtmlNode.innerTextExcluding","content":"HtmlNode.innerTextExcluding \ninnerTextExcluding \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#innerText","title":"HtmlNode.innerText","content":"HtmlNode.innerText \ninnerText \n\n Returns the inner text of the current node\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#directInnerText","title":"HtmlNode.directInnerText","content":"HtmlNode.directInnerText \ndirectInnerText \n\n Returns the direct inner text of the current node\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#cssSelect","title":"HtmlNode.cssSelect","content":"HtmlNode.cssSelect \ncssSelect \n\n Gets descendants matched by Css selector\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html","title":"HttpContentTypes","content":"HttpContentTypes \n\n Constants for common HTTP content types\n \nHttpContentTypes.Any \nAny \nHttpContentTypes.Text \nText \nHttpContentTypes.Binary \nBinary \nHttpContentTypes.Zip \nZip \nHttpContentTypes.GZip \nGZip \nHttpContentTypes.FormValues \nFormValues \nHttpContentTypes.Json \nJson \nHttpContentTypes.JavaScript \nJavaScript \nHttpContentTypes.Xml \nXml \nHttpContentTypes.Rss \nRss \nHttpContentTypes.Atom \nAtom \nHttpContentTypes.Rdf \nRdf \nHttpContentTypes.Html \nHtml \nHttpContentTypes.XHtml \nXHtml \nHttpContentTypes.Soap \nSoap \nHttpContentTypes.Csv \nCsv \nHttpContentTypes.JsonRpc \nJsonRpc \nHttpContentTypes.Multipart \nMultipart"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Any","title":"HttpContentTypes.Any","content":"HttpContentTypes.Any \nAny \n\n */*\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Text","title":"HttpContentTypes.Text","content":"HttpContentTypes.Text \nText \n\n plain/text\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Binary","title":"HttpContentTypes.Binary","content":"HttpContentTypes.Binary \nBinary \n\n application/octet-stream\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Zip","title":"HttpContentTypes.Zip","content":"HttpContentTypes.Zip \nZip \n\n application/octet-stream\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#GZip","title":"HttpContentTypes.GZip","content":"HttpContentTypes.GZip \nGZip \n\n application/octet-stream\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#FormValues","title":"HttpContentTypes.FormValues","content":"HttpContentTypes.FormValues \nFormValues \n\n application/x-www-form-urlencoded\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Json","title":"HttpContentTypes.Json","content":"HttpContentTypes.Json \nJson \n\n application/json\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#JavaScript","title":"HttpContentTypes.JavaScript","content":"HttpContentTypes.JavaScript \nJavaScript \n\n application/javascript\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Xml","title":"HttpContentTypes.Xml","content":"HttpContentTypes.Xml \nXml \n\n application/xml\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Rss","title":"HttpContentTypes.Rss","content":"HttpContentTypes.Rss \nRss \n\n application/rss\u002Bxml\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Atom","title":"HttpContentTypes.Atom","content":"HttpContentTypes.Atom \nAtom \n\n application/atom\u002Bxml\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Rdf","title":"HttpContentTypes.Rdf","content":"HttpContentTypes.Rdf \nRdf \n\n application/rdf\u002Bxml\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Html","title":"HttpContentTypes.Html","content":"HttpContentTypes.Html \nHtml \n\n text/html\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#XHtml","title":"HttpContentTypes.XHtml","content":"HttpContentTypes.XHtml \nXHtml \n\n application/xhtml\u002Bxml\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Soap","title":"HttpContentTypes.Soap","content":"HttpContentTypes.Soap \nSoap \n\n application/soap\u002Bxml\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Csv","title":"HttpContentTypes.Csv","content":"HttpContentTypes.Csv \nCsv \n\n text/csv\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#JsonRpc","title":"HttpContentTypes.JsonRpc","content":"HttpContentTypes.JsonRpc \nJsonRpc \n\n application/json-rpc\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Multipart","title":"HttpContentTypes.Multipart","content":"HttpContentTypes.Multipart \nMultipart \n\n multipart/form-data\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpencodings.html","title":"HttpEncodings","content":"HttpEncodings \n\n Constants for common HTTP encodings\n \nHttpEncodings.PostDefaultEncoding \nPostDefaultEncoding \nHttpEncodings.ResponseDefaultEncoding \nResponseDefaultEncoding"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpencodings.html#PostDefaultEncoding","title":"HttpEncodings.PostDefaultEncoding","content":"HttpEncodings.PostDefaultEncoding \nPostDefaultEncoding \n\n ISO-8859-1\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpencodings.html#ResponseDefaultEncoding","title":"HttpEncodings.ResponseDefaultEncoding","content":"HttpEncodings.ResponseDefaultEncoding \nResponseDefaultEncoding \n\n ISO-8859-1\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html","title":"HttpMethod","content":"HttpMethod \n\n The method to use in an HTTP request\n \nHttpMethod.Options \nOptions \nHttpMethod.Get \nGet \nHttpMethod.Head \nHead \nHttpMethod.Post \nPost \nHttpMethod.Put \nPut \nHttpMethod.Delete \nDelete \nHttpMethod.Trace \nTrace \nHttpMethod.Connect \nConnect \nHttpMethod.PropFind \nPropFind \nHttpMethod.PropPatch \nPropPatch \nHttpMethod.MkCol \nMkCol \nHttpMethod.Copy \nCopy \nHttpMethod.Move \nMove \nHttpMethod.Lock \nLock \nHttpMethod.Unlock \nUnlock \nHttpMethod.Patch \nPatch"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Options","title":"HttpMethod.Options","content":"HttpMethod.Options \nOptions \n\n Request information about the communication options available on the request/response chain identified by the URI\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Get","title":"HttpMethod.Get","content":"HttpMethod.Get \nGet \n\n Retrieve whatever information (in the form of an entity) is identified by the URI\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Head","title":"HttpMethod.Head","content":"HttpMethod.Head \nHead \n\n Identical to GET except that the server MUST NOT return a message-body in the response\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Post","title":"HttpMethod.Post","content":"HttpMethod.Post \nPost \n\n Requests that the server accepts the entity enclosed in the request as a\n new subordinate of the resource identified by the Request-URI in the Request-Line\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Put","title":"HttpMethod.Put","content":"HttpMethod.Put \nPut \n\n Requests that the enclosed entity be stored under the supplied Request-URI\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Delete","title":"HttpMethod.Delete","content":"HttpMethod.Delete \nDelete \n\n Requests that the origin server deletes the resource identified by the Request-URI\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Trace","title":"HttpMethod.Trace","content":"HttpMethod.Trace \nTrace \n\n Used to invoke a remote, application-layer loop- back of the request message\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Connect","title":"HttpMethod.Connect","content":"HttpMethod.Connect \nConnect \n\n Reserved for use with a proxy that can dynamically switch to being a tunnel\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#PropFind","title":"HttpMethod.PropFind","content":"HttpMethod.PropFind \nPropFind \n\n Retrieves properties defined on the resource identified by the request URI\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#PropPatch","title":"HttpMethod.PropPatch","content":"HttpMethod.PropPatch \nPropPatch \n\n Processes instructions specified in the request body to set and/or remove properties defined on the resource identified by the request URI\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#MkCol","title":"HttpMethod.MkCol","content":"HttpMethod.MkCol \nMkCol \n\n Creates a new collection resource at the location specified by the Request URI\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Copy","title":"HttpMethod.Copy","content":"HttpMethod.Copy \nCopy \n\n Creates a duplicate of the source resource, identified by the Request-URI, in the destination resource, identified by the URI in the Destination header\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Move","title":"HttpMethod.Move","content":"HttpMethod.Move \nMove \n\n Logical equivalent of a copy, followed by consistency maintenance processing, followed by a delete of the source where all three actions are performed atomically\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Lock","title":"HttpMethod.Lock","content":"HttpMethod.Lock \nLock \n\n Used to take out a lock of any access type on the resource identified by the request URI.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Unlock","title":"HttpMethod.Unlock","content":"HttpMethod.Unlock \nUnlock \n\n Removes the lock identified by the lock token from the request URI, and all other resources included in the lock\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Patch","title":"HttpMethod.Patch","content":"HttpMethod.Patch \nPatch \n\n Requests that the origin server applies partial modifications contained in the entity enclosed in the request to the resource identified by the request URI\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html","title":"HttpRequestHeaders","content":"HttpRequestHeaders \n\n Headers that can be sent in an HTTP request\n \nHttpRequestHeaders.Accept \nAccept \nHttpRequestHeaders.AcceptCharset \nAcceptCharset \nHttpRequestHeaders.AcceptDatetime \nAcceptDatetime \nHttpRequestHeaders.AcceptEncoding \nAcceptEncoding \nHttpRequestHeaders.AcceptLanguage \nAcceptLanguage \nHttpRequestHeaders.Allow \nAllow \nHttpRequestHeaders.Authorization \nAuthorization \nHttpRequestHeaders.BasicAuth \nBasicAuth \nHttpRequestHeaders.CacheControl \nCacheControl \nHttpRequestHeaders.Connection \nConnection \nHttpRequestHeaders.ContentDisposition \nContentDisposition \nHttpRequestHeaders.ContentEncoding \nContentEncoding \nHttpRequestHeaders.ContentLanguage \nContentLanguage \nHttpRequestHeaders.ContentLocation \nContentLocation \nHttpRequestHeaders.ContentMD5 \nContentMD5 \nHttpRequestHeaders.ContentRange \nContentRange \nHttpRequestHeaders.ContentType \nContentType \nHttpRequestHeaders.ContentTypeWithEncoding \nContentTypeWithEncoding \nHttpRequestHeaders.Date \nDate \nHttpRequestHeaders.Expect \nExpect \nHttpRequestHeaders.Expires \nExpires \nHttpRequestHeaders.From \nFrom \nHttpRequestHeaders.Host \nHost \nHttpRequestHeaders.IfMatch \nIfMatch \nHttpRequestHeaders.IfModifiedSince \nIfModifiedSince \nHttpRequestHeaders.IfNoneMatch \nIfNoneMatch \nHttpRequestHeaders.IfRange \nIfRange \nHttpRequestHeaders.IfUnmodifiedSince \nIfUnmodifiedSince \nHttpRequestHeaders.KeepAlive \nKeepAlive \nHttpRequestHeaders.LastModified \nLastModified \nHttpRequestHeaders.MaxForwards \nMaxForwards \nHttpRequestHeaders.Origin \nOrigin \nHttpRequestHeaders.Pragma \nPragma \nHttpRequestHeaders.Prefer \nPrefer \nHttpRequestHeaders.ProxyAuthorization \nProxyAuthorization \nHttpRequestHeaders.Range \nRange \nHttpRequestHeaders.Referer \nReferer \nHttpRequestHeaders.TE \nTE \nHttpRequestHeaders.Trailer \nTrailer \nHttpRequestHeaders.TransferEncoding \nTransferEncoding \nHttpRequestHeaders.Translate \nTranslate \nHttpRequestHeaders.Upgrade \nUpgrade \nHttpRequestHeaders.UserAgent \nUserAgent \nHttpRequestHeaders.Via \nVia \nHttpRequestHeaders.Warning \nWarning \nHttpRequestHeaders.XHTTPMethodOverride \nXHTTPMethodOverride"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Accept","title":"HttpRequestHeaders.Accept","content":"HttpRequestHeaders.Accept \nAccept \n\n Content-Types that are acceptable for the response\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#AcceptCharset","title":"HttpRequestHeaders.AcceptCharset","content":"HttpRequestHeaders.AcceptCharset \nAcceptCharset \n\n Character sets that are acceptable\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#AcceptDatetime","title":"HttpRequestHeaders.AcceptDatetime","content":"HttpRequestHeaders.AcceptDatetime \nAcceptDatetime \n\n Acceptable version in time\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#AcceptEncoding","title":"HttpRequestHeaders.AcceptEncoding","content":"HttpRequestHeaders.AcceptEncoding \nAcceptEncoding \n\n List of acceptable encodings. See HTTP compression.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#AcceptLanguage","title":"HttpRequestHeaders.AcceptLanguage","content":"HttpRequestHeaders.AcceptLanguage \nAcceptLanguage \n\n List of acceptable human languages for response\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Allow","title":"HttpRequestHeaders.Allow","content":"HttpRequestHeaders.Allow \nAllow \n\n The Allow header, which specifies the set of HTTP methods supported.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Authorization","title":"HttpRequestHeaders.Authorization","content":"HttpRequestHeaders.Authorization \nAuthorization \n\n Authentication credentials for HTTP authentication\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#BasicAuth","title":"HttpRequestHeaders.BasicAuth","content":"HttpRequestHeaders.BasicAuth \nBasicAuth \n\n Authentication header using Basic Auth encoding\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#CacheControl","title":"HttpRequestHeaders.CacheControl","content":"HttpRequestHeaders.CacheControl \nCacheControl \n\n Used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Connection","title":"HttpRequestHeaders.Connection","content":"HttpRequestHeaders.Connection \nConnection \n\n What type of connection the user-agent would prefer\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentDisposition","title":"HttpRequestHeaders.ContentDisposition","content":"HttpRequestHeaders.ContentDisposition \nContentDisposition \n\n Describes the placement of the content. Valid dispositions are: inline, attachment, form-data\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentEncoding","title":"HttpRequestHeaders.ContentEncoding","content":"HttpRequestHeaders.ContentEncoding \nContentEncoding \n\n The type of encoding used on the data\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentLanguage","title":"HttpRequestHeaders.ContentLanguage","content":"HttpRequestHeaders.ContentLanguage \nContentLanguage \n\n The language the content is in\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentLocation","title":"HttpRequestHeaders.ContentLocation","content":"HttpRequestHeaders.ContentLocation \nContentLocation \n\n An alternate location for the returned data\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentMD5","title":"HttpRequestHeaders.ContentMD5","content":"HttpRequestHeaders.ContentMD5 \nContentMD5 \n\n A Base64-encoded binary MD5 sum of the content of the request body\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentRange","title":"HttpRequestHeaders.ContentRange","content":"HttpRequestHeaders.ContentRange \nContentRange \n\n Where in a full body message this partial message belongs\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentType","title":"HttpRequestHeaders.ContentType","content":"HttpRequestHeaders.ContentType \nContentType \n\n The MIME type of the body of the request (used with POST and PUT requests)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentTypeWithEncoding","title":"HttpRequestHeaders.ContentTypeWithEncoding","content":"HttpRequestHeaders.ContentTypeWithEncoding \nContentTypeWithEncoding \n\n The MIME type of the body of the request (used with POST and PUT requests) with an explicit encoding\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Date","title":"HttpRequestHeaders.Date","content":"HttpRequestHeaders.Date \nDate \n\n The date and time that the message was sent\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Expect","title":"HttpRequestHeaders.Expect","content":"HttpRequestHeaders.Expect \nExpect \n\n Indicates that particular server behaviors are required by the client\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Expires","title":"HttpRequestHeaders.Expires","content":"HttpRequestHeaders.Expires \nExpires \n\n Gives the date/time after which the response is considered stale\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#From","title":"HttpRequestHeaders.From","content":"HttpRequestHeaders.From \nFrom \n\n The email address of the user making the request\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Host","title":"HttpRequestHeaders.Host","content":"HttpRequestHeaders.Host \nHost \n\n The domain name of the server (for virtual hosting), and the TCP port number on which the server is listening.\n The port number may be omitted if the port is the standard port for the service requested.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfMatch","title":"HttpRequestHeaders.IfMatch","content":"HttpRequestHeaders.IfMatch \nIfMatch \n\n Only perform the action if the client supplied entity matches the same entity on the server.\n This is mainly for methods like PUT to only update a resource if it has not been modified since the user last updated it. If-Match: \u0022737060cd8c284d8af7ad3082f209582d\u0022 Permanent\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfModifiedSince","title":"HttpRequestHeaders.IfModifiedSince","content":"HttpRequestHeaders.IfModifiedSince \nIfModifiedSince \n\n Allows a 304 Not Modified to be returned if content is unchanged\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfNoneMatch","title":"HttpRequestHeaders.IfNoneMatch","content":"HttpRequestHeaders.IfNoneMatch \nIfNoneMatch \n\n Allows a 304 Not Modified to be returned if content is unchanged\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfRange","title":"HttpRequestHeaders.IfRange","content":"HttpRequestHeaders.IfRange \nIfRange \n\n If the entity is unchanged, send me the part(s) that I am missing; otherwise, send me the entire new entity\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfUnmodifiedSince","title":"HttpRequestHeaders.IfUnmodifiedSince","content":"HttpRequestHeaders.IfUnmodifiedSince \nIfUnmodifiedSince \n\n Only send the response if the entity has not been modified since a specific time\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#KeepAlive","title":"HttpRequestHeaders.KeepAlive","content":"HttpRequestHeaders.KeepAlive \nKeepAlive \n\n Specifies a parameter used into order to maintain a persistent connection\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#LastModified","title":"HttpRequestHeaders.LastModified","content":"HttpRequestHeaders.LastModified \nLastModified \n\n Specifies the date and time at which the accompanying body data was last modified\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#MaxForwards","title":"HttpRequestHeaders.MaxForwards","content":"HttpRequestHeaders.MaxForwards \nMaxForwards \n\n Limit the number of times the message can be forwarded through proxies or gateways\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Origin","title":"HttpRequestHeaders.Origin","content":"HttpRequestHeaders.Origin \nOrigin \n\n Initiates a request for cross-origin resource sharing (asks server for an \u0027Access-Control-Allow-Origin\u0027 response header)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Pragma","title":"HttpRequestHeaders.Pragma","content":"HttpRequestHeaders.Pragma \nPragma \n\n Implementation-specific headers that may have various effects anywhere along the request-response chain.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Prefer","title":"HttpRequestHeaders.Prefer","content":"HttpRequestHeaders.Prefer \nPrefer \n\n Optional instructions to the server to control request processing. See RFC https://tools.ietf.org/html/rfc7240 for more details\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ProxyAuthorization","title":"HttpRequestHeaders.ProxyAuthorization","content":"HttpRequestHeaders.ProxyAuthorization \nProxyAuthorization \n\n Authorization credentials for connecting to a proxy.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Range","title":"HttpRequestHeaders.Range","content":"HttpRequestHeaders.Range \nRange \n\n Request only part of an entity. Bytes are numbered from 0\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Referer","title":"HttpRequestHeaders.Referer","content":"HttpRequestHeaders.Referer \nReferer \n\n This is the address of the previous web page from which a link to the currently requested page was followed. (The word \u0022referrer\u0022 is misspelled in the RFC as well as in most implementations.)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#TE","title":"HttpRequestHeaders.TE","content":"HttpRequestHeaders.TE \nTE \n\n The transfer encodings the user agent is willing to accept: the same values as for the response header\n Transfer-Encoding can be used, plus the \u0022trailers\u0022 value (related to the \u0022chunked\u0022 transfer method) to\n notify the server it expects to receive additional headers (the trailers) after the last, zero-sized, chunk.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Trailer","title":"HttpRequestHeaders.Trailer","content":"HttpRequestHeaders.Trailer \nTrailer \n\n The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer-coding\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#TransferEncoding","title":"HttpRequestHeaders.TransferEncoding","content":"HttpRequestHeaders.TransferEncoding \nTransferEncoding \n\n The TransferEncoding header indicates the form of encoding used to safely transfer the entity to the user.  The valid directives are one of: chunked, compress, deflate, gzip, or identity.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Translate","title":"HttpRequestHeaders.Translate","content":"HttpRequestHeaders.Translate \nTranslate \n\n Microsoft extension to the HTTP specification used in conjunction with WebDAV functionality.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Upgrade","title":"HttpRequestHeaders.Upgrade","content":"HttpRequestHeaders.Upgrade \nUpgrade \n\n Specifies additional communications protocols that the client supports.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#UserAgent","title":"HttpRequestHeaders.UserAgent","content":"HttpRequestHeaders.UserAgent \nUserAgent \n\n The user agent string of the user agent\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Via","title":"HttpRequestHeaders.Via","content":"HttpRequestHeaders.Via \nVia \n\n Informs the server of proxies through which the request was sent\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Warning","title":"HttpRequestHeaders.Warning","content":"HttpRequestHeaders.Warning \nWarning \n\n A general warning about possible problems with the entity body\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#XHTTPMethodOverride","title":"HttpRequestHeaders.XHTTPMethodOverride","content":"HttpRequestHeaders.XHTTPMethodOverride \nXHTTPMethodOverride \n\n Override HTTP method.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html","title":"HttpResponseHeaders","content":"HttpResponseHeaders \n\n Headers that can be received in an HTTP response\n \nHttpResponseHeaders.AccessControlAllowOrigin \nAccessControlAllowOrigin \nHttpResponseHeaders.AcceptRanges \nAcceptRanges \nHttpResponseHeaders.Age \nAge \nHttpResponseHeaders.Allow \nAllow \nHttpResponseHeaders.CacheControl \nCacheControl \nHttpResponseHeaders.Connection \nConnection \nHttpResponseHeaders.ContentEncoding \nContentEncoding \nHttpResponseHeaders.ContentLanguage \nContentLanguage \nHttpResponseHeaders.ContentLength \nContentLength \nHttpResponseHeaders.ContentLocation \nContentLocation \nHttpResponseHeaders.ContentMD5 \nContentMD5 \nHttpResponseHeaders.ContentDisposition \nContentDisposition \nHttpResponseHeaders.ContentRange \nContentRange \nHttpResponseHeaders.ContentType \nContentType \nHttpResponseHeaders.Date \nDate \nHttpResponseHeaders.ETag \nETag \nHttpResponseHeaders.Expires \nExpires \nHttpResponseHeaders.LastModified \nLastModified \nHttpResponseHeaders.Link \nLink \nHttpResponseHeaders.Location \nLocation \nHttpResponseHeaders.P3P \nP3P \nHttpResponseHeaders.Pragma \nPragma \nHttpResponseHeaders.ProxyAuthenticate \nProxyAuthenticate \nHttpResponseHeaders.Refresh \nRefresh \nHttpResponseHeaders.RetryAfter \nRetryAfter \nHttpResponseHeaders.Server \nServer \nHttpResponseHeaders.SetCookie \nSetCookie \nHttpResponseHeaders.Status \nStatus \nHttpResponseHeaders.StrictTransportSecurity \nStrictTransportSecurity \nHttpResponseHeaders.Trailer \nTrailer \nHttpResponseHeaders.TransferEncoding \nTransferEncoding \nHttpResponseHeaders.Vary \nVary \nHttpResponseHeaders.Via \nVia \nHttpResponseHeaders.Warning \nWarning \nHttpResponseHeaders.WWWAuthenticate \nWWWAuthenticate"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#AccessControlAllowOrigin","title":"HttpResponseHeaders.AccessControlAllowOrigin","content":"HttpResponseHeaders.AccessControlAllowOrigin \nAccessControlAllowOrigin \n\n Specifying which web sites can participate in cross-origin resource sharing\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#AcceptRanges","title":"HttpResponseHeaders.AcceptRanges","content":"HttpResponseHeaders.AcceptRanges \nAcceptRanges \n\n What partial content range types this server supports\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Age","title":"HttpResponseHeaders.Age","content":"HttpResponseHeaders.Age \nAge \n\n The age the object has been in a proxy cache in seconds\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Allow","title":"HttpResponseHeaders.Allow","content":"HttpResponseHeaders.Allow \nAllow \n\n Valid actions for a specified resource. To be used for a 405 Method not allowed\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#CacheControl","title":"HttpResponseHeaders.CacheControl","content":"HttpResponseHeaders.CacheControl \nCacheControl \n\n Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Connection","title":"HttpResponseHeaders.Connection","content":"HttpResponseHeaders.Connection \nConnection \n\n Options that are desired for the connection\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentEncoding","title":"HttpResponseHeaders.ContentEncoding","content":"HttpResponseHeaders.ContentEncoding \nContentEncoding \n\n The type of encoding used on the data. See HTTP compression.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentLanguage","title":"HttpResponseHeaders.ContentLanguage","content":"HttpResponseHeaders.ContentLanguage \nContentLanguage \n\n The language the content is in\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentLength","title":"HttpResponseHeaders.ContentLength","content":"HttpResponseHeaders.ContentLength \nContentLength \n\n The length of the response body in octets (8-bit bytes)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentLocation","title":"HttpResponseHeaders.ContentLocation","content":"HttpResponseHeaders.ContentLocation \nContentLocation \n\n An alternate location for the returned data\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentMD5","title":"HttpResponseHeaders.ContentMD5","content":"HttpResponseHeaders.ContentMD5 \nContentMD5 \n\n A Base64-encoded binary MD5 sum of the content of the response\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentDisposition","title":"HttpResponseHeaders.ContentDisposition","content":"HttpResponseHeaders.ContentDisposition \nContentDisposition \n\n An opportunity to raise a \u0022File Download\u0022 dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentRange","title":"HttpResponseHeaders.ContentRange","content":"HttpResponseHeaders.ContentRange \nContentRange \n\n Where in a full body message this partial message belongs\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentType","title":"HttpResponseHeaders.ContentType","content":"HttpResponseHeaders.ContentType \nContentType \n\n The MIME type of this content\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Date","title":"HttpResponseHeaders.Date","content":"HttpResponseHeaders.Date \nDate \n\n The date and time that the message was sent (in \u0022HTTP-date\u0022 format as defined by RFC 2616)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ETag","title":"HttpResponseHeaders.ETag","content":"HttpResponseHeaders.ETag \nETag \n\n An identifier for a specific version of a resource, often a message digest\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Expires","title":"HttpResponseHeaders.Expires","content":"HttpResponseHeaders.Expires \nExpires \n\n Gives the date/time after which the response is considered stale\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#LastModified","title":"HttpResponseHeaders.LastModified","content":"HttpResponseHeaders.LastModified \nLastModified \n\n The last modified date for the requested object\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Link","title":"HttpResponseHeaders.Link","content":"HttpResponseHeaders.Link \nLink \n\n Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Location","title":"HttpResponseHeaders.Location","content":"HttpResponseHeaders.Location \nLocation \n\n Used in redirection, or when a new resource has been created.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#P3P","title":"HttpResponseHeaders.P3P","content":"HttpResponseHeaders.P3P \nP3P \n\n This header is supposed to set P3P policy\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Pragma","title":"HttpResponseHeaders.Pragma","content":"HttpResponseHeaders.Pragma \nPragma \n\n Implementation-specific headers that may have various effects anywhere along the request-response chain.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ProxyAuthenticate","title":"HttpResponseHeaders.ProxyAuthenticate","content":"HttpResponseHeaders.ProxyAuthenticate \nProxyAuthenticate \n\n Request authentication to access the proxy.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Refresh","title":"HttpResponseHeaders.Refresh","content":"HttpResponseHeaders.Refresh \nRefresh \n\n Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#RetryAfter","title":"HttpResponseHeaders.RetryAfter","content":"HttpResponseHeaders.RetryAfter \nRetryAfter \n\n If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date.[28]\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Server","title":"HttpResponseHeaders.Server","content":"HttpResponseHeaders.Server \nServer \n\n A name for the server\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#SetCookie","title":"HttpResponseHeaders.SetCookie","content":"HttpResponseHeaders.SetCookie \nSetCookie \n\n An HTTP cookie\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Status","title":"HttpResponseHeaders.Status","content":"HttpResponseHeaders.Status \nStatus \n\n The HTTP status of the response\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#StrictTransportSecurity","title":"HttpResponseHeaders.StrictTransportSecurity","content":"HttpResponseHeaders.StrictTransportSecurity \nStrictTransportSecurity \n\n A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Trailer","title":"HttpResponseHeaders.Trailer","content":"HttpResponseHeaders.Trailer \nTrailer \n\n The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer-coding.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#TransferEncoding","title":"HttpResponseHeaders.TransferEncoding","content":"HttpResponseHeaders.TransferEncoding \nTransferEncoding \n\n The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Vary","title":"HttpResponseHeaders.Vary","content":"HttpResponseHeaders.Vary \nVary \n\n Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Via","title":"HttpResponseHeaders.Via","content":"HttpResponseHeaders.Via \nVia \n\n Informs the client of proxies through which the response was sent.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Warning","title":"HttpResponseHeaders.Warning","content":"HttpResponseHeaders.Warning \nWarning \n\n A general warning about possible problems with the entity body.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#WWWAuthenticate","title":"HttpResponseHeaders.WWWAuthenticate","content":"HttpResponseHeaders.WWWAuthenticate \nWWWAuthenticate \n\n Indicates the authentication scheme that should be used to access the requested entity.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html","title":"HttpStatusCodes","content":"HttpStatusCodes \n\n Status codes that can be received in an HTTP response\n \nHttpStatusCodes.Continue \nContinue \nHttpStatusCodes.SwitchingProtocols \nSwitchingProtocols \nHttpStatusCodes.Processing \nProcessing \nHttpStatusCodes.EarlyHints \nEarlyHints \nHttpStatusCodes.OK \nOK \nHttpStatusCodes.Created \nCreated \nHttpStatusCodes.Accepted \nAccepted \nHttpStatusCodes.NonAuthoritativeInformation \nNonAuthoritativeInformation \nHttpStatusCodes.NoContent \nNoContent \nHttpStatusCodes.ResetContent \nResetContent \nHttpStatusCodes.PartialContent \nPartialContent \nHttpStatusCodes.MultiStatus \nMultiStatus \nHttpStatusCodes.AlreadyReported \nAlreadyReported \nHttpStatusCodes.IMUsed \nIMUsed \nHttpStatusCodes.MultipleChoices \nMultipleChoices \nHttpStatusCodes.MovedPermanently \nMovedPermanently \nHttpStatusCodes.Found \nFound \nHttpStatusCodes.SeeOther \nSeeOther \nHttpStatusCodes.NotModified \nNotModified \nHttpStatusCodes.UseProxy \nUseProxy \nHttpStatusCodes.SwitchProxy \nSwitchProxy \nHttpStatusCodes.TemporaryRedirect \nTemporaryRedirect \nHttpStatusCodes.PermanentRedirect \nPermanentRedirect \nHttpStatusCodes.BadRequest \nBadRequest \nHttpStatusCodes.Unauthorized \nUnauthorized \nHttpStatusCodes.PaymentRequired \nPaymentRequired \nHttpStatusCodes.Forbidden \nForbidden \nHttpStatusCodes.NotFound \nNotFound \nHttpStatusCodes.MethodNotAllowed \nMethodNotAllowed \nHttpStatusCodes.NotAcceptable \nNotAcceptable \nHttpStatusCodes.ProxyAuthenticationRequired \nProxyAuthenticationRequired \nHttpStatusCodes.RequestTimeout \nRequestTimeout \nHttpStatusCodes.Conflict \nConflict \nHttpStatusCodes.Gone \nGone \nHttpStatusCodes.LengthRequired \nLengthRequired \nHttpStatusCodes.PreconditionFailed \nPreconditionFailed \nHttpStatusCodes.PayloadTooLarge \nPayloadTooLarge \nHttpStatusCodes.URITooLong \nURITooLong \nHttpStatusCodes.UnsupportedMediaType \nUnsupportedMediaType \nHttpStatusCodes.RangeNotSatisfiable \nRangeNotSatisfiable \nHttpStatusCodes.ExpectationFailed \nExpectationFailed \nHttpStatusCodes.MisdirectedRequest \nMisdirectedRequest \nHttpStatusCodes.UnprocessableEntity \nUnprocessableEntity \nHttpStatusCodes.Locked \nLocked \nHttpStatusCodes.FailedDependency \nFailedDependency \nHttpStatusCodes.UpgradeRequired \nUpgradeRequired \nHttpStatusCodes.PreconditionRequired \nPreconditionRequired \nHttpStatusCodes.TooManyRequests \nTooManyRequests \nHttpStatusCodes.RequestHeaderFieldsTooLarge \nRequestHeaderFieldsTooLarge \nHttpStatusCodes.UnavailableForLegalReasons \nUnavailableForLegalReasons \nHttpStatusCodes.InternalServerError \nInternalServerError \nHttpStatusCodes.NotImplemented \nNotImplemented \nHttpStatusCodes.BadGateway \nBadGateway \nHttpStatusCodes.ServiceUnavailable \nServiceUnavailable \nHttpStatusCodes.GatewayTimeout \nGatewayTimeout \nHttpStatusCodes.HTTPVersionNotSupported \nHTTPVersionNotSupported \nHttpStatusCodes.VariantAlsoNegotiates \nVariantAlsoNegotiates \nHttpStatusCodes.InsufficientStorage \nInsufficientStorage \nHttpStatusCodes.LoopDetected \nLoopDetected \nHttpStatusCodes.NotExtended \nNotExtended \nHttpStatusCodes.NetworkAuthenticationRequired \nNetworkAuthenticationRequired"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Continue","title":"HttpStatusCodes.Continue","content":"HttpStatusCodes.Continue \nContinue \n\n The server has received the request headers and the client should proceed to send the request body.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#SwitchingProtocols","title":"HttpStatusCodes.SwitchingProtocols","content":"HttpStatusCodes.SwitchingProtocols \nSwitchingProtocols \n\n The requester has asked the server to switch protocols and the server has agreed to do so.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Processing","title":"HttpStatusCodes.Processing","content":"HttpStatusCodes.Processing \nProcessing \n\n This code indicates that the server has received and is processing the request, but no response is available yet.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#EarlyHints","title":"HttpStatusCodes.EarlyHints","content":"HttpStatusCodes.EarlyHints \nEarlyHints \n\n Used to return some response headers before final HTTP message.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#OK","title":"HttpStatusCodes.OK","content":"HttpStatusCodes.OK \nOK \n\n Standard response for successful HTTP requests.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Created","title":"HttpStatusCodes.Created","content":"HttpStatusCodes.Created \nCreated \n\n The request has been fulfilled, resulting in the creation of a new resource.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Accepted","title":"HttpStatusCodes.Accepted","content":"HttpStatusCodes.Accepted \nAccepted \n\n The request has been accepted for processing, but the processing has not been completed.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NonAuthoritativeInformation","title":"HttpStatusCodes.NonAuthoritativeInformation","content":"HttpStatusCodes.NonAuthoritativeInformation \nNonAuthoritativeInformation \n\n The server is a transforming proxy (e.g. a Web accelerator) that received a 200 OK from its origin, but is returning a modified version of the origin\u0027s response.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NoContent","title":"HttpStatusCodes.NoContent","content":"HttpStatusCodes.NoContent \nNoContent \n\n The server successfully processed the request and is not returning any content.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#ResetContent","title":"HttpStatusCodes.ResetContent","content":"HttpStatusCodes.ResetContent \nResetContent \n\n The server successfully processed the request, but is not returning any content.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PartialContent","title":"HttpStatusCodes.PartialContent","content":"HttpStatusCodes.PartialContent \nPartialContent \n\n The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MultiStatus","title":"HttpStatusCodes.MultiStatus","content":"HttpStatusCodes.MultiStatus \nMultiStatus \n\n The message body that follows is by default an XML message and can contain a number of separate response codes, depending on how many sub-requests were made.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#AlreadyReported","title":"HttpStatusCodes.AlreadyReported","content":"HttpStatusCodes.AlreadyReported \nAlreadyReported \n\n The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response, and are not being included again.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#IMUsed","title":"HttpStatusCodes.IMUsed","content":"HttpStatusCodes.IMUsed \nIMUsed \n\n The server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MultipleChoices","title":"HttpStatusCodes.MultipleChoices","content":"HttpStatusCodes.MultipleChoices \nMultipleChoices \n\n Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MovedPermanently","title":"HttpStatusCodes.MovedPermanently","content":"HttpStatusCodes.MovedPermanently \nMovedPermanently \n\n This and all future requests should be directed to the given URI.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Found","title":"HttpStatusCodes.Found","content":"HttpStatusCodes.Found \nFound \n\n Tells the client to look at (browse to) another url. 302 has been superseded by 303 and 307. \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#SeeOther","title":"HttpStatusCodes.SeeOther","content":"HttpStatusCodes.SeeOther \nSeeOther \n\n The response to the request can be found under another URI using the GET method.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotModified","title":"HttpStatusCodes.NotModified","content":"HttpStatusCodes.NotModified \nNotModified \n\n Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UseProxy","title":"HttpStatusCodes.UseProxy","content":"HttpStatusCodes.UseProxy \nUseProxy \n\n The requested resource is available only through a proxy, the address for which is provided in the response. \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#SwitchProxy","title":"HttpStatusCodes.SwitchProxy","content":"HttpStatusCodes.SwitchProxy \nSwitchProxy \n\n No longer used. Originally meant \u0022Subsequent requests should use the specified proxy.\u0022\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#TemporaryRedirect","title":"HttpStatusCodes.TemporaryRedirect","content":"HttpStatusCodes.TemporaryRedirect \nTemporaryRedirect \n\n In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PermanentRedirect","title":"HttpStatusCodes.PermanentRedirect","content":"HttpStatusCodes.PermanentRedirect \nPermanentRedirect \n\n The request and all future requests should be repeated using another URI. \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#BadRequest","title":"HttpStatusCodes.BadRequest","content":"HttpStatusCodes.BadRequest \nBadRequest \n\n The server cannot or will not process the request due to an apparent client error.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Unauthorized","title":"HttpStatusCodes.Unauthorized","content":"HttpStatusCodes.Unauthorized \nUnauthorized \n\n Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PaymentRequired","title":"HttpStatusCodes.PaymentRequired","content":"HttpStatusCodes.PaymentRequired \nPaymentRequired \n\n Reserved for future use. \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Forbidden","title":"HttpStatusCodes.Forbidden","content":"HttpStatusCodes.Forbidden \nForbidden \n\n The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotFound","title":"HttpStatusCodes.NotFound","content":"HttpStatusCodes.NotFound \nNotFound \n\n The requested resource could not be found but may be available in the future. Subsequent requests by the client are permissible.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MethodNotAllowed","title":"HttpStatusCodes.MethodNotAllowed","content":"HttpStatusCodes.MethodNotAllowed \nMethodNotAllowed \n\n A request method is not supported for the requested resource.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotAcceptable","title":"HttpStatusCodes.NotAcceptable","content":"HttpStatusCodes.NotAcceptable \nNotAcceptable \n\n The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#ProxyAuthenticationRequired","title":"HttpStatusCodes.ProxyAuthenticationRequired","content":"HttpStatusCodes.ProxyAuthenticationRequired \nProxyAuthenticationRequired \n\n The client must first authenticate itself with the proxy.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#RequestTimeout","title":"HttpStatusCodes.RequestTimeout","content":"HttpStatusCodes.RequestTimeout \nRequestTimeout \n\n The server timed out waiting for the request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Conflict","title":"HttpStatusCodes.Conflict","content":"HttpStatusCodes.Conflict \nConflict \n\n Indicates that the request could not be processed because of conflict in the request, such as an edit conflict between multiple simultaneous updates.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Gone","title":"HttpStatusCodes.Gone","content":"HttpStatusCodes.Gone \nGone \n\n Indicates that the resource requested is no longer available and will not be available again.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#LengthRequired","title":"HttpStatusCodes.LengthRequired","content":"HttpStatusCodes.LengthRequired \nLengthRequired \n\n The request did not specify the length of its content, which is required by the requested resource.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PreconditionFailed","title":"HttpStatusCodes.PreconditionFailed","content":"HttpStatusCodes.PreconditionFailed \nPreconditionFailed \n\n The server does not meet one of the preconditions that the requester put on the request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PayloadTooLarge","title":"HttpStatusCodes.PayloadTooLarge","content":"HttpStatusCodes.PayloadTooLarge \nPayloadTooLarge \n\n The request is larger than the server is willing or able to process.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#URITooLong","title":"HttpStatusCodes.URITooLong","content":"HttpStatusCodes.URITooLong \nURITooLong \n\n The URI provided was too long for the server to process.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UnsupportedMediaType","title":"HttpStatusCodes.UnsupportedMediaType","content":"HttpStatusCodes.UnsupportedMediaType \nUnsupportedMediaType \n\n The request entity has a media type which the server or resource does not support.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#RangeNotSatisfiable","title":"HttpStatusCodes.RangeNotSatisfiable","content":"HttpStatusCodes.RangeNotSatisfiable \nRangeNotSatisfiable \n\n The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#ExpectationFailed","title":"HttpStatusCodes.ExpectationFailed","content":"HttpStatusCodes.ExpectationFailed \nExpectationFailed \n\n The server cannot meet the requirements of the Expect request-header field.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MisdirectedRequest","title":"HttpStatusCodes.MisdirectedRequest","content":"HttpStatusCodes.MisdirectedRequest \nMisdirectedRequest \n\n The request was directed at a server that is not able to produce a response.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UnprocessableEntity","title":"HttpStatusCodes.UnprocessableEntity","content":"HttpStatusCodes.UnprocessableEntity \nUnprocessableEntity \n\n The request was well-formed but was unable to be followed due to semantic errors.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Locked","title":"HttpStatusCodes.Locked","content":"HttpStatusCodes.Locked \nLocked \n\n The resource that is being accessed is locked.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#FailedDependency","title":"HttpStatusCodes.FailedDependency","content":"HttpStatusCodes.FailedDependency \nFailedDependency \n\n The request failed because it depended on another request and that request failed (e.g., a PROPPATCH).\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UpgradeRequired","title":"HttpStatusCodes.UpgradeRequired","content":"HttpStatusCodes.UpgradeRequired \nUpgradeRequired \n\n The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PreconditionRequired","title":"HttpStatusCodes.PreconditionRequired","content":"HttpStatusCodes.PreconditionRequired \nPreconditionRequired \n\n The origin server requires the request to be conditional.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#TooManyRequests","title":"HttpStatusCodes.TooManyRequests","content":"HttpStatusCodes.TooManyRequests \nTooManyRequests \n\n The user has sent too many requests in a given amount of time.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#RequestHeaderFieldsTooLarge","title":"HttpStatusCodes.RequestHeaderFieldsTooLarge","content":"HttpStatusCodes.RequestHeaderFieldsTooLarge \nRequestHeaderFieldsTooLarge \n\n The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UnavailableForLegalReasons","title":"HttpStatusCodes.UnavailableForLegalReasons","content":"HttpStatusCodes.UnavailableForLegalReasons \nUnavailableForLegalReasons \n\n A server operator has received a legal demand to deny access to a resource or to a set of resources that includes the requested resource.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#InternalServerError","title":"HttpStatusCodes.InternalServerError","content":"HttpStatusCodes.InternalServerError \nInternalServerError \n\n A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotImplemented","title":"HttpStatusCodes.NotImplemented","content":"HttpStatusCodes.NotImplemented \nNotImplemented \n\n The server either does not recognize the request method, or it lacks the ability to fulfil the request. \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#BadGateway","title":"HttpStatusCodes.BadGateway","content":"HttpStatusCodes.BadGateway \nBadGateway \n\n The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#ServiceUnavailable","title":"HttpStatusCodes.ServiceUnavailable","content":"HttpStatusCodes.ServiceUnavailable \nServiceUnavailable \n\n The server is currently unavailable (because it is overloaded or down for maintenance).\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#GatewayTimeout","title":"HttpStatusCodes.GatewayTimeout","content":"HttpStatusCodes.GatewayTimeout \nGatewayTimeout \n\n The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#HTTPVersionNotSupported","title":"HttpStatusCodes.HTTPVersionNotSupported","content":"HttpStatusCodes.HTTPVersionNotSupported \nHTTPVersionNotSupported \n\n The server does not support the HTTP protocol version used in the request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#VariantAlsoNegotiates","title":"HttpStatusCodes.VariantAlsoNegotiates","content":"HttpStatusCodes.VariantAlsoNegotiates \nVariantAlsoNegotiates \n\n Transparent content negotiation for the request results in a circular reference.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#InsufficientStorage","title":"HttpStatusCodes.InsufficientStorage","content":"HttpStatusCodes.InsufficientStorage \nInsufficientStorage \n\n The server is unable to store the representation needed to complete the request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#LoopDetected","title":"HttpStatusCodes.LoopDetected","content":"HttpStatusCodes.LoopDetected \nLoopDetected \n\n The server detected an infinite loop while processing the request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotExtended","title":"HttpStatusCodes.NotExtended","content":"HttpStatusCodes.NotExtended \nNotExtended \n\n Further extensions to the request are required for the server to fulfil it.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NetworkAuthenticationRequired","title":"HttpStatusCodes.NetworkAuthenticationRequired","content":"HttpStatusCodes.NetworkAuthenticationRequired \nNetworkAuthenticationRequired \n\n The client needs to authenticate to gain network access.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensionsmodule.html","title":"JsonExtensions","content":"JsonExtensions \n\n Provides the dynamic operator for getting a property of a JSON object\n \nJsonExtensions.( ? ) \n( ? ) \nJsonExtensions.Properties \nProperties \nJsonExtensions.Properties \nProperties"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensionsmodule.html#( ? )","title":"JsonExtensions.( ? )","content":"JsonExtensions.( ? ) \n( ? ) \n\n Get a property of a JSON object  \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensionsmodule.html#Properties","title":"JsonExtensions.Properties","content":"JsonExtensions.Properties \nProperties \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensionsmodule.html#Properties","title":"JsonExtensions.Properties","content":"JsonExtensions.Properties \nProperties \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvaluemodule.html","title":"JsonValue","content":"JsonValue \n \nJsonValue.Object \nObject \nJsonValue.( |Object|_| ) \n( |Object|_| )"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvaluemodule.html#Object","title":"JsonValue.Object","content":"JsonValue.Object \nObject \n\n Constructor to create a \u0060JsonValue.Record of (string * JsonValue)[]\u0060 as a \u0060JsonValue.Object of Map\u003Cstring, JsonValue\u003E\u0060 for\n backwards compatibility reaons\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvaluemodule.html#( |Object|_| )","title":"JsonValue.( |Object|_| )","content":"JsonValue.( |Object|_| ) \n( |Object|_| ) \n\n Active Pattern to view a \u0060JsonValue.Record of (string * JsonValue)[]\u0060 as a \u0060JsonValue.Object of Map\u003Cstring, JsonValue\u003E\u0060 for\n backwards compatibility reaons\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-mimetypes.html","title":"MimeTypes","content":"MimeTypes \n \nMimeTypes.tryFind \ntryFind"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-mimetypes.html#tryFind","title":"MimeTypes.tryFind","content":"MimeTypes.tryFind \ntryFind \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xelementextensions.html","title":"XElementExtensions","content":"XElementExtensions \n\n Extension methods for XElement\n \nXElementExtensions.Request \nRequest \nXElementExtensions.RequestAsync \nRequestAsync"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xelementextensions.html#Request","title":"XElementExtensions.Request","content":"XElementExtensions.Request \nRequest \n\n Sends the XML to the specified uri. Defaults to a POST request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xelementextensions.html#RequestAsync","title":"XElementExtensions.RequestAsync","content":"XElementExtensions.RequestAsync \nRequestAsync \n\n Sends the XML to the specified uri. Defaults to a POST request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html","title":"CsvFile","content":"CsvFile \n\n Represents a CSV file. The lines are read on demand from \u003Ccode\u003Ereader\u003C/code\u003E.\n Columns are delimited by one of the chars passed by \u003Ccode\u003Eseparators\u003C/code\u003E (defaults to just \u003Ccode\u003E,\u003C/code\u003E), and\n to escape the separator chars, the \u003Ccode\u003Equote\u003C/code\u003E character will be used (defaults to \u003Ccode\u003E\u0022\u003C/code\u003E).\n If \u003Ccode\u003EhasHeaders\u003C/code\u003E is true (the default), the first line read by \u003Ccode\u003Ereader\u003C/code\u003E will not be considered part of data.\n If \u003Ccode\u003EignoreErrors\u003C/code\u003E is true (the default is false), rows with a different number of columns from the header row\n (or the first row if headers are not present) will be ignored.\n The first \u003Ccode\u003EskipRows\u003C/code\u003E lines will be skipped.\n  \nCsvFile.GetColumnIndex \nGetColumnIndex \nCsvFile.TryGetColumnIndex \nTryGetColumnIndex \nCsvFile.AsyncLoad \nAsyncLoad \nCsvFile.Load \nLoad \nCsvFile.Load \nLoad \nCsvFile.Load \nLoad \nCsvFile.Parse \nParse"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#GetColumnIndex","title":"CsvFile.GetColumnIndex","content":"CsvFile.GetColumnIndex \nGetColumnIndex \n\n Returns the index of the column with the given name\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#TryGetColumnIndex","title":"CsvFile.TryGetColumnIndex","content":"CsvFile.TryGetColumnIndex \nTryGetColumnIndex \n\n Returns the index of the column with the given name, or returns None if no column is found\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#AsyncLoad","title":"CsvFile.AsyncLoad","content":"CsvFile.AsyncLoad \nAsyncLoad \n\n Loads CSV from the specified uri asynchronously\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Load","title":"CsvFile.Load","content":"CsvFile.Load \nLoad \n\n Loads CSV from the specified uri\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Load","title":"CsvFile.Load","content":"CsvFile.Load \nLoad \n\n Loads CSV from the specified reader\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Load","title":"CsvFile.Load","content":"CsvFile.Load \nLoad \n\n Loads CSV from the specified stream\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Parse","title":"CsvFile.Parse","content":"CsvFile.Parse \nParse \n\n Parses the specified CSV content\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html","title":"CsvProvider","content":"CsvProvider \nTyped representation of a CSV file. \nCsvProvider.Sample \nSample \nCsvProvider.Separators \nSeparators \nCsvProvider.InferRows \nInferRows \nCsvProvider.Schema \nSchema \nCsvProvider.HasHeaders \nHasHeaders \nCsvProvider.IgnoreErrors \nIgnoreErrors \nCsvProvider.SkipRows \nSkipRows \nCsvProvider.AssumeMissingValues \nAssumeMissingValues \nCsvProvider.PreferOptionals \nPreferOptionals \nCsvProvider.Quote \nQuote \nCsvProvider.MissingValues \nMissingValues \nCsvProvider.CacheRows \nCacheRows \nCsvProvider.Culture \nCulture \nCsvProvider.Encoding \nEncoding \nCsvProvider.ResolutionFolder \nResolutionFolder \nCsvProvider.EmbeddedResource \nEmbeddedResource"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Sample","title":"CsvProvider.Sample","content":"CsvProvider.Sample \nSample \nLocation of a CSV sample file or a string containing a sample CSV document."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Separators","title":"CsvProvider.Separators","content":"CsvProvider.Separators \nSeparators \nColumn delimiter(s). Defaults to ,."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#InferRows","title":"CsvProvider.InferRows","content":"CsvProvider.InferRows \nInferRows \nNumber of rows to use for inference. Defaults to 1000. If this is zero, all rows are used."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Schema","title":"CsvProvider.Schema","content":"CsvProvider.Schema \nSchema \nOptional column types, in a comma separated list. Valid types are int, int64, bool, float, decimal, date, guid, string, int?, int64?, bool?, float?, decimal?, date?, guid?, int option, int64 option, bool option, float option, decimal option, date option, guid option and string option.\n           You can also specify a unit and the name of the column like this: Name (type\u003Cunit\u003E), or you can override only the name. If you don\u0027t want to specify all the columns, you can reference the columns by name like this: ColumnName=type."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#HasHeaders","title":"CsvProvider.HasHeaders","content":"CsvProvider.HasHeaders \nHasHeaders \nWhether the sample contains the names of the columns as its first line."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#IgnoreErrors","title":"CsvProvider.IgnoreErrors","content":"CsvProvider.IgnoreErrors \nIgnoreErrors \nWhether to ignore rows that have the wrong number of columns or which can\u0027t be parsed using the inferred or specified schema. Otherwise an exception is thrown when these rows are encountered."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#SkipRows","title":"CsvProvider.SkipRows","content":"CsvProvider.SkipRows \nSkipRows \nSkips the first n rows of the CSV file."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#AssumeMissingValues","title":"CsvProvider.AssumeMissingValues","content":"CsvProvider.AssumeMissingValues \nAssumeMissingValues \nWhen set to true, the type provider will assume all columns can have missing values, even if in the provided sample all values are present. Defaults to false."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#PreferOptionals","title":"CsvProvider.PreferOptionals","content":"CsvProvider.PreferOptionals \nPreferOptionals \nWhen set to true, inference will prefer to use the option type instead of nullable types, double.NaN or \u0022\u0022 for missing values. Defaults to false."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Quote","title":"CsvProvider.Quote","content":"CsvProvider.Quote \nQuote \nThe quotation mark (for surrounding values containing the delimiter). Defaults to \u0022."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#MissingValues","title":"CsvProvider.MissingValues","content":"CsvProvider.MissingValues \nMissingValues \nThe set of strings recogized as missing values specified as a comma-separated string (e.g., \u0022NA,N/A\u0022). Defaults to NaN,NA,N/A,#N/A,:,-,TBA,TBD."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#CacheRows","title":"CsvProvider.CacheRows","content":"CsvProvider.CacheRows \nCacheRows \nWhether the rows should be caches so they can be iterated multiple times. Defaults to true. Disable for large datasets."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Culture","title":"CsvProvider.Culture","content":"CsvProvider.Culture \nCulture \nThe culture used for parsing numbers and dates. Defaults to the invariant culture."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Encoding","title":"CsvProvider.Encoding","content":"CsvProvider.Encoding \nEncoding \nThe encoding used to read the sample. You can specify either the character set name or the codepage number. Defaults to UTF8 for files, and to ISO-8859-1 the for HTTP requests, unless charset is specified in the Content-Type response header."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#ResolutionFolder","title":"CsvProvider.ResolutionFolder","content":"CsvProvider.ResolutionFolder \nResolutionFolder \nA directory that is used when resolving relative file references (at design time and in hosted execution)."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#EmbeddedResource","title":"CsvProvider.EmbeddedResource","content":"CsvProvider.EmbeddedResource \nEmbeddedResource \nWhen specified, the type provider first attempts to load the sample from the specified resource \n              (e.g. \u0027MyCompany.MyAssembly, resource_name.csv\u0027). This is useful when exposing types generated by the type provider."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html","title":"CsvRow","content":"CsvRow \n\n Represents a CSV row.\n \nCsvRow.( .ctor ) \n( .ctor ) \nCsvRow.GetColumn \nGetColumn \nCsvRow.GetColumn \nGetColumn \nCsvRow.Item \nItem \nCsvRow.Item \nItem \nCsvRow.Columns \nColumns"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#( .ctor )","title":"CsvRow.( .ctor )","content":"CsvRow.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#GetColumn","title":"CsvRow.GetColumn","content":"CsvRow.GetColumn \nGetColumn \n\n Gets a column by name\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#GetColumn","title":"CsvRow.GetColumn","content":"CsvRow.GetColumn \nGetColumn \n\n Gets a column by index\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#Item","title":"CsvRow.Item","content":"CsvRow.Item \nItem \n\n Gets a column by name\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#Item","title":"CsvRow.Item","content":"CsvRow.Item \nItem \n\n Gets a column by index\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#Columns","title":"CsvRow.Columns","content":"CsvRow.Columns \nColumns \n\n The columns of the row\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattribute.html","title":"HtmlAttribute","content":"HtmlAttribute \nRepresents an HTML attribute. The name is always normalized to lowercase \nHtmlAttribute.New \nNew"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattribute.html#New","title":"HtmlAttribute.New","content":"HtmlAttribute.New \nNew \n\n Creates an html attribute\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributeextensions.html","title":"HtmlAttributeExtensions","content":"HtmlAttributeExtensions \n\n Extension methods with operations on HTML attributes\n \nHtmlAttributeExtensions.Name \nName \nHtmlAttributeExtensions.Value \nValue"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributeextensions.html#Name","title":"HtmlAttributeExtensions.Name","content":"HtmlAttributeExtensions.Name \nName \n\n Gets the name of the current attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributeextensions.html#Value","title":"HtmlAttributeExtensions.Value","content":"HtmlAttributeExtensions.Value \nValue \n\n Gets the value of the current attribute\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html","title":"HtmlDocument","content":"HtmlDocument \n\n Represents an HTML document\n \nHtmlDocument._Print \n_Print \nHtmlDocument.AsyncLoad \nAsyncLoad \nHtmlDocument.Load \nLoad \nHtmlDocument.Load \nLoad \nHtmlDocument.Load \nLoad \nHtmlDocument.New \nNew \nHtmlDocument.New \nNew \nHtmlDocument.Parse \nParse"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#_Print","title":"HtmlDocument._Print","content":"HtmlDocument._Print \n_Print \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#AsyncLoad","title":"HtmlDocument.AsyncLoad","content":"HtmlDocument.AsyncLoad \nAsyncLoad \n\n Loads HTML from the specified uri asynchronously\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#Load","title":"HtmlDocument.Load","content":"HtmlDocument.Load \nLoad \n\n Loads HTML from the specified uri\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#Load","title":"HtmlDocument.Load","content":"HtmlDocument.Load \nLoad \n\n Loads HTML from the specified reader\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#Load","title":"HtmlDocument.Load","content":"HtmlDocument.Load \nLoad \n\n Loads HTML from the specified stream\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#New","title":"HtmlDocument.New","content":"HtmlDocument.New \nNew \n\n Creates an html document\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#New","title":"HtmlDocument.New","content":"HtmlDocument.New \nNew \n\n Creates an html document\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#Parse","title":"HtmlDocument.Parse","content":"HtmlDocument.Parse \nParse \n\n Parses the specified HTML string\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html","title":"HtmlDocumentExtensions","content":"HtmlDocumentExtensions \n\n Extension methods with operations on HTML documents\n \nHtmlDocumentExtensions.Body \nBody \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.Elements \nElements \nHtmlDocumentExtensions.Elements \nElements \nHtmlDocumentExtensions.Elements \nElements \nHtmlDocumentExtensions.Html \nHtml \nHtmlDocumentExtensions.TryGetBody \nTryGetBody \nHtmlDocumentExtensions.TryGetHtml \nTryGetHtml"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Body","title":"HtmlDocumentExtensions.Body","content":"HtmlDocumentExtensions.Body \nBody \n\n Finds the body element of the given document,\n this throws an exception if no body element exists.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Finds all of the descendant nodes of this document that match the given name\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Finds all of the descendant nodes of this document that match the given name\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Finds all of the descendant nodes of this document that match the given set of names\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Finds all of the descendant nodes of this document that match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Gets all of the descendants of this document\n Recurses on match\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Gets all of the descendants of this document that statisfy the given predicate\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Gets all of the descendants of this document that statisfy the given predicate\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Finds all of the descendant nodes of this document that match the given name\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Finds all of the descendant nodes of this document that match the given name\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Finds all of the descendant nodes of this document that match the given set of names\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Finds all of the descendant nodes of this document that match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of this document\n Recurses on match\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of this document that statisfy the given predicate\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of this document that statisfy the given predicate\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Elements","title":"HtmlDocumentExtensions.Elements","content":"HtmlDocumentExtensions.Elements \nElements \n\n Returns all of the root elements in the current document that match the name\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Elements","title":"HtmlDocumentExtensions.Elements","content":"HtmlDocumentExtensions.Elements \nElements \n\n Returns all of the root elements in the current document that match the set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Elements","title":"HtmlDocumentExtensions.Elements","content":"HtmlDocumentExtensions.Elements \nElements \n\n Returns all of the root elements of the current document\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Html","title":"HtmlDocumentExtensions.Html","content":"HtmlDocumentExtensions.Html \nHtml \n\n Finds the html element of the given document,\n this throws an exception if no html element exists.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#TryGetBody","title":"HtmlDocumentExtensions.TryGetBody","content":"HtmlDocumentExtensions.TryGetBody \nTryGetBody \n\n Tries to find the body element of the given document.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#TryGetHtml","title":"HtmlDocumentExtensions.TryGetHtml","content":"HtmlDocumentExtensions.TryGetHtml \nTryGetHtml \n\n Tries to find the html element of the given document.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html","title":"HtmlNode","content":"HtmlNode \n\n Represents an HTML node. The names of elements are always normalized to lowercase\n \nHtmlNode._Print \n_Print \nHtmlNode.NewCData \nNewCData \nHtmlNode.NewComment \nNewComment \nHtmlNode.NewElement \nNewElement \nHtmlNode.NewElement \nNewElement \nHtmlNode.NewElement \nNewElement \nHtmlNode.NewElement \nNewElement \nHtmlNode.NewText \nNewText \nHtmlNode.Parse \nParse \nHtmlNode.ParseRooted \nParseRooted"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#_Print","title":"HtmlNode._Print","content":"HtmlNode._Print \n_Print \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewCData","title":"HtmlNode.NewCData","content":"HtmlNode.NewCData \nNewCData \n\n Creates a CData element\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewComment","title":"HtmlNode.NewComment","content":"HtmlNode.NewComment \nNewComment \n\n Creates a comment element\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewElement","title":"HtmlNode.NewElement","content":"HtmlNode.NewElement \nNewElement \n\n Creates an html element\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewElement","title":"HtmlNode.NewElement","content":"HtmlNode.NewElement \nNewElement \n\n Creates an html element\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewElement","title":"HtmlNode.NewElement","content":"HtmlNode.NewElement \nNewElement \n\n Creates an html element\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewElement","title":"HtmlNode.NewElement","content":"HtmlNode.NewElement \nNewElement \n\n Creates an html element\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewText","title":"HtmlNode.NewText","content":"HtmlNode.NewText \nNewText \n\n Creates a text content element\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#Parse","title":"HtmlNode.Parse","content":"HtmlNode.Parse \nParse \n\n Parses the specified HTML string to a list of HTML nodes\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#ParseRooted","title":"HtmlNode.ParseRooted","content":"HtmlNode.ParseRooted \nParseRooted \n\n Parses the specified HTML string to a list of HTML nodes\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html","title":"HtmlNodeExtensions","content":"HtmlNodeExtensions \n\n Extension methods with operations on HTML nodes\n \nHtmlNodeExtensions.Attribute \nAttribute \nHtmlNodeExtensions.AttributeValue \nAttributeValue \nHtmlNodeExtensions.Attributes \nAttributes \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DirectInnerText \nDirectInnerText \nHtmlNodeExtensions.Elements \nElements \nHtmlNodeExtensions.Elements \nElements \nHtmlNodeExtensions.Elements \nElements \nHtmlNodeExtensions.HasAttribute \nHasAttribute \nHtmlNodeExtensions.HasClass \nHasClass \nHtmlNodeExtensions.HasId \nHasId \nHtmlNodeExtensions.HasName \nHasName \nHtmlNodeExtensions.InnerText \nInnerText \nHtmlNodeExtensions.Name \nName \nHtmlNodeExtensions.TryGetAttribute \nTryGetAttribute"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Attribute","title":"HtmlNodeExtensions.Attribute","content":"HtmlNodeExtensions.Attribute \nAttribute \n\n Returns the attribute with the given name. If the\n attribute does not exist then this will throw an exception\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#AttributeValue","title":"HtmlNodeExtensions.AttributeValue","content":"HtmlNodeExtensions.AttributeValue \nAttributeValue \n\n Return the value of the named attribute, or an empty string if not found.\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Attributes","title":"HtmlNodeExtensions.Attributes","content":"HtmlNodeExtensions.Attributes \nAttributes \n\n Gets all of the attributes of this node\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node, which match the given name\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node, which match the given name\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node, which match the given set of names\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node, which match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node\n Recurses on match\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node that satisfy the predicate\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node that satisfy the predicate\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node, which match the given name\n The current node is also considered in the comparison\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node, which match the given name\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node, which match the given set of names\n The current node is also considered in the comparison\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node, which match the given set of names\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node\n The current node is also considered in the comparison\n Recurses on match\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node that satisfy the predicate\n The current node is also considered in the comparison\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node that satisfy the predicate\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node, which match the given name\n The current node is also considered in the comparison\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node, which match the given name\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node, which match the given set of names\n The current node is also considered in the comparison\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node, which match the given set of names\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node\n The current node is also considered in the comparison\n Recurses on match\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node that satisfy the predicate\n The current node is also considered in the comparison\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node that satisfy the predicate\n The current node is also considered in the comparison\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node, which match the given name\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node, which match the given name\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node, which match the given set of names\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node, which match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node\n Recurses on match\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node that satisfy the predicate\n Recurses on match\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node that satisfy the predicate\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DirectInnerText","title":"HtmlNodeExtensions.DirectInnerText","content":"HtmlNodeExtensions.DirectInnerText \nDirectInnerText \n\n Returns the direct inner text of the current node\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Elements","title":"HtmlNodeExtensions.Elements","content":"HtmlNodeExtensions.Elements \nElements \n\n Gets all of the elements of the current node, which match the given name\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Elements","title":"HtmlNodeExtensions.Elements","content":"HtmlNodeExtensions.Elements \nElements \n\n Gets all of the elements of the current node, which match the given set of names\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Elements","title":"HtmlNodeExtensions.Elements","content":"HtmlNodeExtensions.Elements \nElements \n\n Gets all of the nodes immediately under this node\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#HasAttribute","title":"HtmlNodeExtensions.HasAttribute","content":"HtmlNodeExtensions.HasAttribute \nHasAttribute \n\n Returns true if the current node has an attribute that\n matches both the name and the value\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#HasClass","title":"HtmlNodeExtensions.HasClass","content":"HtmlNodeExtensions.HasClass \nHasClass \n\n Returns true if the current node has the specified class\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#HasId","title":"HtmlNodeExtensions.HasId","content":"HtmlNodeExtensions.HasId \nHasId \n\n Returns true if the current node has the specified id\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#HasName","title":"HtmlNodeExtensions.HasName","content":"HtmlNodeExtensions.HasName \nHasName \n\n Returns true if the current node has the specified name\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#InnerText","title":"HtmlNodeExtensions.InnerText","content":"HtmlNodeExtensions.InnerText \nInnerText \n\n Returns the inner text of the current node\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Name","title":"HtmlNodeExtensions.Name","content":"HtmlNodeExtensions.Name \nName \n\n Gets the given nodes name\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#TryGetAttribute","title":"HtmlNodeExtensions.TryGetAttribute","content":"HtmlNodeExtensions.TryGetAttribute \nTryGetAttribute \n\n Tries to select an attribute with the given name from the current node.\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html","title":"HtmlProvider","content":"HtmlProvider \nTyped representation of an HTML file. \nHtmlProvider.Sample \nSample \nHtmlProvider.PreferOptionals \nPreferOptionals \nHtmlProvider.IncludeLayoutTables \nIncludeLayoutTables \nHtmlProvider.MissingValues \nMissingValues \nHtmlProvider.Culture \nCulture \nHtmlProvider.Encoding \nEncoding \nHtmlProvider.ResolutionFolder \nResolutionFolder \nHtmlProvider.EmbeddedResource \nEmbeddedResource"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#Sample","title":"HtmlProvider.Sample","content":"HtmlProvider.Sample \nSample \nLocation of an HTML sample file or a string containing a sample HTML document."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#PreferOptionals","title":"HtmlProvider.PreferOptionals","content":"HtmlProvider.PreferOptionals \nPreferOptionals \nWhen set to true, inference will prefer to use the option type instead of nullable types, double.NaN or \u0022\u0022 for missing values. Defaults to false."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#IncludeLayoutTables","title":"HtmlProvider.IncludeLayoutTables","content":"HtmlProvider.IncludeLayoutTables \nIncludeLayoutTables \nIncludes tables that are potentially layout tables (with cellpadding=0 and cellspacing=0 attributes)"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#MissingValues","title":"HtmlProvider.MissingValues","content":"HtmlProvider.MissingValues \nMissingValues \nThe set of strings recogized as missing values. Defaults to NaN,NA,N/A,#N/A,:,-,TBA,TBD."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#Culture","title":"HtmlProvider.Culture","content":"HtmlProvider.Culture \nCulture \nThe culture used for parsing numbers and dates. Defaults to the invariant culture."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#Encoding","title":"HtmlProvider.Encoding","content":"HtmlProvider.Encoding \nEncoding \nThe encoding used to read the sample. You can specify either the character set name or the codepage number. Defaults to UTF8 for files, and to ISO-8859-1 the for HTTP requests, unless charset is specified in the Content-Type response header."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#ResolutionFolder","title":"HtmlProvider.ResolutionFolder","content":"HtmlProvider.ResolutionFolder \nResolutionFolder \nA directory that is used when resolving relative file references (at design time and in hosted execution)."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#EmbeddedResource","title":"HtmlProvider.EmbeddedResource","content":"HtmlProvider.EmbeddedResource \nEmbeddedResource \nWhen specified, the type provider first attempts to load the sample from the specified resource \n              (e.g. \u0027MyCompany.MyAssembly, resource_name.html\u0027). This is useful when exposing types generated by the type provider."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html","title":"Http","content":"Http \n\n Utilities for working with network via HTTP. Includes methods for downloading\n resources with specified headers, query parameters and HTTP body\n \nHttp.AsyncRequest \nAsyncRequest \nHttp.AsyncRequestStream \nAsyncRequestStream \nHttp.AsyncRequestString \nAsyncRequestString \nHttp.Request \nRequest \nHttp.RequestStream \nRequestStream \nHttp.RequestString \nRequestString"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#AsyncRequest","title":"Http.AsyncRequest","content":"Http.AsyncRequest \nAsyncRequest \n\n Download an HTTP web resource from the specified URL asynchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#AsyncRequestStream","title":"Http.AsyncRequestStream","content":"Http.AsyncRequestStream \nAsyncRequestStream \n\n Download an HTTP web resource from the specified URL asynchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#AsyncRequestString","title":"Http.AsyncRequestString","content":"Http.AsyncRequestString \nAsyncRequestString \n\n Download an HTTP web resource from the specified URL asynchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#Request","title":"Http.Request","content":"Http.Request \nRequest \n\n Download an HTTP web resource from the specified URL synchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#RequestStream","title":"Http.RequestStream","content":"Http.RequestStream \nRequestStream \n\n Download an HTTP web resource from the specified URL synchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#RequestString","title":"Http.RequestString","content":"Http.RequestString \nRequestString \n\n Download an HTTP web resource from the specified URL synchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html","title":"HttpRequestBody","content":"HttpRequestBody \n\n The body to send in an HTTP request\n \nHttpRequestBody.TextRequest \nTextRequest \nHttpRequestBody.BinaryUpload \nBinaryUpload \nHttpRequestBody.FormValues \nFormValues \nHttpRequestBody.Multipart \nMultipart"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#TextRequest","title":"HttpRequestBody.TextRequest","content":"HttpRequestBody.TextRequest \nTextRequest \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#BinaryUpload","title":"HttpRequestBody.BinaryUpload","content":"HttpRequestBody.BinaryUpload \nBinaryUpload \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#FormValues","title":"HttpRequestBody.FormValues","content":"HttpRequestBody.FormValues \nFormValues \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#Multipart","title":"HttpRequestBody.Multipart","content":"HttpRequestBody.Multipart \nMultipart \n\n A sequence of formParamName * fileName * fileContent groups\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html","title":"HttpResponse","content":"HttpResponse \n\n The response returned by an HTTP request\n \nHttpResponse.Body \nBody \nHttpResponse.StatusCode \nStatusCode \nHttpResponse.ResponseUrl \nResponseUrl \nHttpResponse.Headers \nHeaders \nHttpResponse.Cookies \nCookies"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#Body","title":"HttpResponse.Body","content":"HttpResponse.Body \nBody \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#StatusCode","title":"HttpResponse.StatusCode","content":"HttpResponse.StatusCode \nStatusCode \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#ResponseUrl","title":"HttpResponse.ResponseUrl","content":"HttpResponse.ResponseUrl \nResponseUrl \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#Headers","title":"HttpResponse.Headers","content":"HttpResponse.Headers \nHeaders \n\n If the same header is present multiple times, the values will be concatenated with comma as the separator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#Cookies","title":"HttpResponse.Cookies","content":"HttpResponse.Cookies \nCookies \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsebody.html","title":"HttpResponseBody","content":"HttpResponseBody \n\n The response body returned by an HTTP request\n \nHttpResponseBody.Text \nText \nHttpResponseBody.Binary \nBinary"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsebody.html#Text","title":"HttpResponseBody.Text","content":"HttpResponseBody.Text \nText \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsebody.html#Binary","title":"HttpResponseBody.Binary","content":"HttpResponseBody.Binary \nBinary \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html","title":"HttpResponseWithStream","content":"HttpResponseWithStream \n\n The response returned by an HTTP request with direct access to the response stream\n \nHttpResponseWithStream.ResponseStream \nResponseStream \nHttpResponseWithStream.StatusCode \nStatusCode \nHttpResponseWithStream.ResponseUrl \nResponseUrl \nHttpResponseWithStream.Headers \nHeaders \nHttpResponseWithStream.Cookies \nCookies"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#ResponseStream","title":"HttpResponseWithStream.ResponseStream","content":"HttpResponseWithStream.ResponseStream \nResponseStream \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#StatusCode","title":"HttpResponseWithStream.StatusCode","content":"HttpResponseWithStream.StatusCode \nStatusCode \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#ResponseUrl","title":"HttpResponseWithStream.ResponseUrl","content":"HttpResponseWithStream.ResponseUrl \nResponseUrl \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#Headers","title":"HttpResponseWithStream.Headers","content":"HttpResponseWithStream.Headers \nHeaders \n\n If the same header is present multiple times, the values will be concatenated with comma as the separator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#Cookies","title":"HttpResponseWithStream.Cookies","content":"HttpResponseWithStream.Cookies \nCookies \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html","title":"JsonExtensions","content":"JsonExtensions \n\n Extension methods with operations on JSON values\n \nJsonExtensions.AsArray \nAsArray \nJsonExtensions.AsBoolean \nAsBoolean \nJsonExtensions.AsDateTime \nAsDateTime \nJsonExtensions.AsDateTimeOffset \nAsDateTimeOffset \nJsonExtensions.AsDecimal \nAsDecimal \nJsonExtensions.AsFloat \nAsFloat \nJsonExtensions.AsGuid \nAsGuid \nJsonExtensions.AsInteger \nAsInteger \nJsonExtensions.AsInteger64 \nAsInteger64 \nJsonExtensions.AsString \nAsString \nJsonExtensions.AsTimeSpan \nAsTimeSpan \nJsonExtensions.GetEnumerator \nGetEnumerator \nJsonExtensions.GetProperty \nGetProperty \nJsonExtensions.InnerText \nInnerText \nJsonExtensions.Item \nItem \nJsonExtensions.Item \nItem \nJsonExtensions.Properties \nProperties \nJsonExtensions.TryGetProperty \nTryGetProperty"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsArray","title":"JsonExtensions.AsArray","content":"JsonExtensions.AsArray \nAsArray \n\n Get all the elements of a JSON value.\n Returns an empty array if the value is not a JSON array.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsBoolean","title":"JsonExtensions.AsBoolean","content":"JsonExtensions.AsBoolean \nAsBoolean \n\n Get the boolean value of an element (assuming that the value is a boolean)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsDateTime","title":"JsonExtensions.AsDateTime","content":"JsonExtensions.AsDateTime \nAsDateTime \n\n Get the datetime value of an element (assuming that the value is a string\n containing well-formed ISO date or MSFT JSON date)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsDateTimeOffset","title":"JsonExtensions.AsDateTimeOffset","content":"JsonExtensions.AsDateTimeOffset \nAsDateTimeOffset \n\n Get the datetime offset value of an element (assuming that the value is a string\n containing well-formed ISO date time with offset or MSFT JSON datetime with offset)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsDecimal","title":"JsonExtensions.AsDecimal","content":"JsonExtensions.AsDecimal \nAsDecimal \n\n Get a number as a decimal (assuming that the value fits in decimal)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsFloat","title":"JsonExtensions.AsFloat","content":"JsonExtensions.AsFloat \nAsFloat \n\n Get a number as a float (assuming that the value is convertible to a float)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsGuid","title":"JsonExtensions.AsGuid","content":"JsonExtensions.AsGuid \nAsGuid \n\n Get the guid value of an element (assuming that the value is a guid)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsInteger","title":"JsonExtensions.AsInteger","content":"JsonExtensions.AsInteger \nAsInteger \n\n Get a number as an integer (assuming that the value fits in integer)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsInteger64","title":"JsonExtensions.AsInteger64","content":"JsonExtensions.AsInteger64 \nAsInteger64 \n\n Get a number as a 64-bit integer (assuming that the value fits in 64-bit integer)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsString","title":"JsonExtensions.AsString","content":"JsonExtensions.AsString \nAsString \n\n Get the string value of an element (assuming that the value is a scalar)\n Returns the empty string for JsonValue.Null\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsTimeSpan","title":"JsonExtensions.AsTimeSpan","content":"JsonExtensions.AsTimeSpan \nAsTimeSpan \n\n Get the timespan value of an element (assuming that the value is a string\n containing well-formed time span)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#GetEnumerator","title":"JsonExtensions.GetEnumerator","content":"JsonExtensions.GetEnumerator \nGetEnumerator \n\n Get all the elements of a JSON value (assuming that the value is an array)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#GetProperty","title":"JsonExtensions.GetProperty","content":"JsonExtensions.GetProperty \nGetProperty \n\n Get property of a JSON object. Fails if the value is not an object\n or if the property is not present\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#InnerText","title":"JsonExtensions.InnerText","content":"JsonExtensions.InnerText \nInnerText \n\n Get inner text of an element\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#Item","title":"JsonExtensions.Item","content":"JsonExtensions.Item \nItem \n\n Try to get the value at the specified index, if the value is a JSON array.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#Item","title":"JsonExtensions.Item","content":"JsonExtensions.Item \nItem \n\n Assuming the value is an object, get value with the specified name\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#Properties","title":"JsonExtensions.Properties","content":"JsonExtensions.Properties \nProperties \n\n Get a sequence of key-value pairs representing the properties of an object\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#TryGetProperty","title":"JsonExtensions.TryGetProperty","content":"JsonExtensions.TryGetProperty \nTryGetProperty \n\n Try to get a property of a JSON value.\n Returns None if the value is not an object or if the property is not present.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html","title":"JsonProvider","content":"JsonProvider \nTyped representation of a JSON document. \nJsonProvider.Sample \nSample \nJsonProvider.SampleIsList \nSampleIsList \nJsonProvider.RootName \nRootName \nJsonProvider.Culture \nCulture \nJsonProvider.Encoding \nEncoding \nJsonProvider.ResolutionFolder \nResolutionFolder \nJsonProvider.EmbeddedResource \nEmbeddedResource \nJsonProvider.InferTypesFromValues \nInferTypesFromValues"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#Sample","title":"JsonProvider.Sample","content":"JsonProvider.Sample \nSample \nLocation of a JSON sample file or a string containing a sample JSON document."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#SampleIsList","title":"JsonProvider.SampleIsList","content":"JsonProvider.SampleIsList \nSampleIsList \nIf true, sample should be a list of individual samples for the inference."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#RootName","title":"JsonProvider.RootName","content":"JsonProvider.RootName \nRootName \nThe name to be used to the root type. Defaults to \u0060Root\u0060."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#Culture","title":"JsonProvider.Culture","content":"JsonProvider.Culture \nCulture \nThe culture used for parsing numbers and dates. Defaults to the invariant culture."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#Encoding","title":"JsonProvider.Encoding","content":"JsonProvider.Encoding \nEncoding \nThe encoding used to read the sample. You can specify either the character set name or the codepage number. Defaults to UTF8 for files, and to ISO-8859-1 the for HTTP requests, unless \u0060charset\u0060 is specified in the \u0060Content-Type\u0060 response header."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#ResolutionFolder","title":"JsonProvider.ResolutionFolder","content":"JsonProvider.ResolutionFolder \nResolutionFolder \nA directory that is used when resolving relative file references (at design time and in hosted execution)."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#EmbeddedResource","title":"JsonProvider.EmbeddedResource","content":"JsonProvider.EmbeddedResource \nEmbeddedResource \nWhen specified, the type provider first attempts to load the sample from the specified resource \n              (e.g. \u0027MyCompany.MyAssembly, resource_name.json\u0027). This is useful when exposing types generated by the type provider."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#InferTypesFromValues","title":"JsonProvider.InferTypesFromValues","content":"JsonProvider.InferTypesFromValues \nInferTypesFromValues \nIf true, turns on additional type inference from values. \n              (e.g. type inference infers string values such as \u0022123\u0022 as ints and values constrained to 0 and 1 as booleans.)"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonsaveoptions.html","title":"JsonSaveOptions","content":"JsonSaveOptions \n\n Specifies the formatting behaviour of JSON values\n \nJsonSaveOptions.None \nNone \nJsonSaveOptions.DisableFormatting \nDisableFormatting"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonsaveoptions.html#None","title":"JsonSaveOptions.None","content":"JsonSaveOptions.None \nNone \n\n Format (indent) the JsonValue\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonsaveoptions.html#DisableFormatting","title":"JsonSaveOptions.DisableFormatting","content":"JsonSaveOptions.DisableFormatting \nDisableFormatting \n\n Print the JsonValue in one line in a compact way\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html","title":"JsonValue","content":"JsonValue \n\n Represents a JSON value. Large numbers that do not fit in the\n Decimal type are represented using the Float case, while\n smaller numbers are represented as decimals to avoid precision loss.\n \nJsonValue.Post \nPost \nJsonValue.Request \nRequest \nJsonValue.RequestAsync \nRequestAsync \nJsonValue.ToString \nToString \nJsonValue.WriteTo \nWriteTo \nJsonValue._Print \n_Print \nJsonValue.AsyncLoad \nAsyncLoad \nJsonValue.Load \nLoad \nJsonValue.Load \nLoad \nJsonValue.Load \nLoad \nJsonValue.Parse \nParse \nJsonValue.ParseMultiple \nParseMultiple \nJsonValue.TryParse \nTryParse \nJsonValue.String \nString \nJsonValue.Number \nNumber \nJsonValue.Float \nFloat \nJsonValue.Record \nRecord \nJsonValue.Array \nArray \nJsonValue.Boolean \nBoolean \nJsonValue.Null \nNull"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Post","title":"JsonValue.Post","content":"JsonValue.Post \nPost \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Request","title":"JsonValue.Request","content":"JsonValue.Request \nRequest \n\n Sends the JSON to the specified URL synchronously. Defaults to a POST request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#RequestAsync","title":"JsonValue.RequestAsync","content":"JsonValue.RequestAsync \nRequestAsync \n\n Sends the JSON to the specified URL asynchronously. Defaults to a POST request.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#ToString","title":"JsonValue.ToString","content":"JsonValue.ToString \nToString \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#WriteTo","title":"JsonValue.WriteTo","content":"JsonValue.WriteTo \nWriteTo \n\n Serializes the JsonValue to the specified System.IO.TextWriter.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#_Print","title":"JsonValue._Print","content":"JsonValue._Print \n_Print \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#AsyncLoad","title":"JsonValue.AsyncLoad","content":"JsonValue.AsyncLoad \nAsyncLoad \n\n Loads JSON from the specified uri asynchronously\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Load","title":"JsonValue.Load","content":"JsonValue.Load \nLoad \n\n Loads JSON from the specified uri\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Load","title":"JsonValue.Load","content":"JsonValue.Load \nLoad \n\n Loads JSON from the specified reader\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Load","title":"JsonValue.Load","content":"JsonValue.Load \nLoad \n\n Loads JSON from the specified stream\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Parse","title":"JsonValue.Parse","content":"JsonValue.Parse \nParse \n\n Parses the specified JSON string\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#ParseMultiple","title":"JsonValue.ParseMultiple","content":"JsonValue.ParseMultiple \nParseMultiple \n\n Parses the specified string into multiple JSON values\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#TryParse","title":"JsonValue.TryParse","content":"JsonValue.TryParse \nTryParse \n\n Attempts to parse the specified JSON string\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#String","title":"JsonValue.String","content":"JsonValue.String \nString \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Number","title":"JsonValue.Number","content":"JsonValue.Number \nNumber \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Float","title":"JsonValue.Float","content":"JsonValue.Float \nFloat \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Record","title":"JsonValue.Record","content":"JsonValue.Record \nRecord \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Array","title":"JsonValue.Array","content":"JsonValue.Array \nArray \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Boolean","title":"JsonValue.Boolean","content":"JsonValue.Boolean \nBoolean \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Null","title":"JsonValue.Null","content":"JsonValue.Null \nNull \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartitem.html","title":"MultipartItem","content":"MultipartItem \n \nMultipartItem.MultipartItem \nMultipartItem"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartitem.html#MultipartItem","title":"MultipartItem.MultipartItem","content":"MultipartItem.MultipartItem \nMultipartItem \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html","title":"StringExtensions","content":"StringExtensions \n\n Extension methods with conversions from strings to other types\n \nStringExtensions.AsBoolean \nAsBoolean \nStringExtensions.AsDateTime \nAsDateTime \nStringExtensions.AsDateTimeOffset \nAsDateTimeOffset \nStringExtensions.AsDecimal \nAsDecimal \nStringExtensions.AsFloat \nAsFloat \nStringExtensions.AsGuid \nAsGuid \nStringExtensions.AsInteger \nAsInteger \nStringExtensions.AsInteger64 \nAsInteger64 \nStringExtensions.AsTimeSpan \nAsTimeSpan"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsBoolean","title":"StringExtensions.AsBoolean","content":"StringExtensions.AsBoolean \nAsBoolean \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsDateTime","title":"StringExtensions.AsDateTime","content":"StringExtensions.AsDateTime \nAsDateTime \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsDateTimeOffset","title":"StringExtensions.AsDateTimeOffset","content":"StringExtensions.AsDateTimeOffset \nAsDateTimeOffset \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsDecimal","title":"StringExtensions.AsDecimal","content":"StringExtensions.AsDecimal \nAsDecimal \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsFloat","title":"StringExtensions.AsFloat","content":"StringExtensions.AsFloat \nAsFloat \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsGuid","title":"StringExtensions.AsGuid","content":"StringExtensions.AsGuid \nAsGuid \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsInteger","title":"StringExtensions.AsInteger","content":"StringExtensions.AsInteger \nAsInteger \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsInteger64","title":"StringExtensions.AsInteger64","content":"StringExtensions.AsInteger64 \nAsInteger64 \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsTimeSpan","title":"StringExtensions.AsTimeSpan","content":"StringExtensions.AsTimeSpan \nAsTimeSpan \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html","title":"TextConversions","content":"TextConversions \n\n Conversions from string to string/int/int64/decimal/float/boolean/datetime/timespan/guid options\n \nTextConversions.AsBoolean \nAsBoolean \nTextConversions.AsDateTime \nAsDateTime \nTextConversions.AsDateTimeOffset \nAsDateTimeOffset \nTextConversions.AsDecimal \nAsDecimal \nTextConversions.AsFloat \nAsFloat \nTextConversions.AsGuid \nAsGuid \nTextConversions.AsInteger \nAsInteger \nTextConversions.AsInteger64 \nAsInteger64 \nTextConversions.AsString \nAsString \nTextConversions.AsTimeSpan \nAsTimeSpan \nTextConversions.DefaultMissingValues \nDefaultMissingValues \nTextConversions.DefaultNonCurrencyAdorners \nDefaultNonCurrencyAdorners \nTextConversions.DefaultCurrencyAdorners \nDefaultCurrencyAdorners"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsBoolean","title":"TextConversions.AsBoolean","content":"TextConversions.AsBoolean \nAsBoolean \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsDateTime","title":"TextConversions.AsDateTime","content":"TextConversions.AsDateTime \nAsDateTime \n\n Parse date time using either the JSON milliseconds format or using ISO 8601\n that is, either \u0060/Date(\u003Cmsec-since-1/1/1970\u003E)/\u0060 or something\n along the lines of \u00602013-01-28T00:37Z\u0060\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsDateTimeOffset","title":"TextConversions.AsDateTimeOffset","content":"TextConversions.AsDateTimeOffset \nAsDateTimeOffset \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsDecimal","title":"TextConversions.AsDecimal","content":"TextConversions.AsDecimal \nAsDecimal \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsFloat","title":"TextConversions.AsFloat","content":"TextConversions.AsFloat \nAsFloat \n\n if useNoneForMissingValues is true, NAs are returned as None, otherwise Some Double.NaN is used\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsGuid","title":"TextConversions.AsGuid","content":"TextConversions.AsGuid \nAsGuid \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsInteger","title":"TextConversions.AsInteger","content":"TextConversions.AsInteger \nAsInteger \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsInteger64","title":"TextConversions.AsInteger64","content":"TextConversions.AsInteger64 \nAsInteger64 \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsString","title":"TextConversions.AsString","content":"TextConversions.AsString \nAsString \n\n Turns empty or null string value into None, otherwise returns Some\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsTimeSpan","title":"TextConversions.AsTimeSpan","content":"TextConversions.AsTimeSpan \nAsTimeSpan \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#DefaultMissingValues","title":"TextConversions.DefaultMissingValues","content":"TextConversions.DefaultMissingValues \nDefaultMissingValues \n\n \u0060NaN\u0060 \u0060NA\u0060 \u0060N/A\u0060 \u0060#N/A\u0060 \u0060:\u0060 \u0060-\u0060 \u0060TBA\u0060 \u0060TBD\u0060\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#DefaultNonCurrencyAdorners","title":"TextConversions.DefaultNonCurrencyAdorners","content":"TextConversions.DefaultNonCurrencyAdorners \nDefaultNonCurrencyAdorners \n\n \u0060%\u0060 \u0060\u2030\u0060 \u0060\u2031\u0060\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#DefaultCurrencyAdorners","title":"TextConversions.DefaultCurrencyAdorners","content":"TextConversions.DefaultCurrencyAdorners \nDefaultCurrencyAdorners \n\n \u0060\u00A4\u0060 \u0060$\u0060 \u0060\u00A2\u0060 \u0060\u00A3\u0060 \u0060\u00A5\u0060 \u0060\u20B1\u0060 \u0060\uFDFC\u0060 \u0060\u20A4\u0060 \u0060\u20AD\u0060 \u0060\u20A6\u0060 \u0060\u20A8\u0060 \u0060\u20A9\u0060 \u0060\u20AE\u0060 \u0060\u20AC\u0060 \u0060\u0E3F\u0060 \u0060\u20A1\u0060 \u0060\u17DB\u0060 \u0060\u060B\u0060 \u0060\u20B4\u0060 \u0060\u20AA\u0060 \u0060\u20AB\u0060 \u0060\u20B9\u0060 \u0060\u0192\u0060\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-worldbankdata.html","title":"WorldBankData","content":"WorldBankData \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-worldbankdataprovider.html","title":"WorldBankDataProvider","content":"WorldBankDataProvider \nTyped representation of WorldBank data with additional configuration parameters. See http://www.worldbank.org for terms and conditions. \nWorldBankDataProvider.Sources \nSources \nWorldBankDataProvider.Asynchronous \nAsynchronous"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-worldbankdataprovider.html#Sources","title":"WorldBankDataProvider.Sources","content":"WorldBankDataProvider.Sources \nSources \nThe World Bank data sources to include, separated by semicolons. Defaults to World Development Indicators;Global Financial Development.\n                        If an empty string is specified, includes all data sources."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-worldbankdataprovider.html#Asynchronous","title":"WorldBankDataProvider.Asynchronous","content":"WorldBankDataProvider.Asynchronous \nAsynchronous \nGenerate asynchronous calls. Defaults to false."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html","title":"XmlProvider","content":"XmlProvider \nTyped representation of a XML file. \nXmlProvider.Sample \nSample \nXmlProvider.SampleIsList \nSampleIsList \nXmlProvider.Global \nGlobal \nXmlProvider.Culture \nCulture \nXmlProvider.Encoding \nEncoding \nXmlProvider.ResolutionFolder \nResolutionFolder \nXmlProvider.EmbeddedResource \nEmbeddedResource \nXmlProvider.InferTypesFromValues \nInferTypesFromValues \nXmlProvider.Schema \nSchema"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Sample","title":"XmlProvider.Sample","content":"XmlProvider.Sample \nSample \nLocation of a XML sample file or a string containing a sample XML document."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#SampleIsList","title":"XmlProvider.SampleIsList","content":"XmlProvider.SampleIsList \nSampleIsList \nIf true, the children of the root in the sample document represent individual samples for the inference."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Global","title":"XmlProvider.Global","content":"XmlProvider.Global \nGlobal \nIf true, the inference unifies all XML elements with the same name."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Culture","title":"XmlProvider.Culture","content":"XmlProvider.Culture \nCulture \nThe culture used for parsing numbers and dates. Defaults to the invariant culture."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Encoding","title":"XmlProvider.Encoding","content":"XmlProvider.Encoding \nEncoding \nThe encoding used to read the sample. You can specify either the character set name or the codepage number. Defaults to UTF8 for files, and to ISO-8859-1 the for HTTP requests, unless charset is specified in the Content-Type response header."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#ResolutionFolder","title":"XmlProvider.ResolutionFolder","content":"XmlProvider.ResolutionFolder \nResolutionFolder \nA directory that is used when resolving relative file references (at design time and in hosted execution)."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#EmbeddedResource","title":"XmlProvider.EmbeddedResource","content":"XmlProvider.EmbeddedResource \nEmbeddedResource \nWhen specified, the type provider first attempts to load the sample from the specified resource \n              (e.g. \u0027MyCompany.MyAssembly, resource_name.xml\u0027). This is useful when exposing types generated by the type provider."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#InferTypesFromValues","title":"XmlProvider.InferTypesFromValues","content":"XmlProvider.InferTypesFromValues \nInferTypesFromValues \nIf true, turns on additional type inference from values. \n              (e.g. type inference infers string values such as \u0022123\u0022 as ints and values constrained to 0 and 1 as booleans. The XmlProvider also infers string values as JSON.)"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Schema","title":"XmlProvider.Schema","content":"XmlProvider.Schema \nSchema \nLocation of a schema file or a string containing xsd."},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-caching.html","title":"Caching","content":"Caching \n\n Implements caching using in-memory and local file system \n \nCaching.ICache\u003C\u0027TKey, \u0027TValue\u003E \nICache\u003C\u0027TKey, \u0027TValue\u003E \nCaching.createInMemoryCache \ncreateInMemoryCache \nCaching.createInternetFileCache \ncreateInternetFileCache"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-caching.html#createInMemoryCache","title":"Caching.createInMemoryCache","content":"Caching.createInMemoryCache \ncreateInMemoryCache \n\n Creates a cache that uses in-memory collection\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-caching.html#createInternetFileCache","title":"Caching.createInternetFileCache","content":"Caching.createInternetFileCache \ncreateInternetFileCache \n\n Creates a cache that stores data in a local file system\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-caching-icache-2.html","title":"ICache\u003C\u0027TKey, \u0027TValue\u003E","content":"ICache\u003C\u0027TKey, \u0027TValue\u003E \n \nICache\u003C\u0027TKey, \u0027TValue\u003E.Remove \nRemove \nICache\u003C\u0027TKey, \u0027TValue\u003E.Set \nSet \nICache\u003C\u0027TKey, \u0027TValue\u003E.TryRetrieve \nTryRetrieve"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-caching-icache-2.html#Remove","title":"ICache\u003C\u0027TKey, \u0027TValue\u003E.Remove","content":"ICache\u003C\u0027TKey, \u0027TValue\u003E.Remove \nRemove \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-caching-icache-2.html#Set","title":"ICache\u003C\u0027TKey, \u0027TValue\u003E.Set","content":"ICache\u003C\u0027TKey, \u0027TValue\u003E.Set \nSet \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-caching-icache-2.html#TryRetrieve","title":"ICache\u003C\u0027TKey, \u0027TValue\u003E.TryRetrieve","content":"ICache\u003C\u0027TKey, \u0027TValue\u003E.TryRetrieve \nTryRetrieve \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvinference.html","title":"CsvInference","content":"CsvInference \n\n Structural inference for CSV\n \nCsvInference.InferColumnTypes \nInferColumnTypes"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvinference.html#InferColumnTypes","title":"CsvInference.InferColumnTypes","content":"CsvInference.InferColumnTypes \nInferColumnTypes \n\n Infers the types of the columns of a CSV file\n "},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference.html","title":"HtmlInference","content":"HtmlInference \n\n Structural inference for HTML tables\n \nHtmlInference.Parameters \nParameters \nHtmlInference.inferColumns \ninferColumns \nHtmlInference.inferHeaders \ninferHeaders \nHtmlInference.inferListType \ninferListType"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference.html#inferColumns","title":"HtmlInference.inferColumns","content":"HtmlInference.inferColumns \ninferColumns \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference.html#inferHeaders","title":"HtmlInference.inferHeaders","content":"HtmlInference.inferHeaders \ninferHeaders \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference.html#inferListType","title":"HtmlInference.inferListType","content":"HtmlInference.inferListType \ninferListType \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference-parameters.html","title":"Parameters","content":"Parameters \n \nParameters.MissingValues \nMissingValues \nParameters.CultureInfo \nCultureInfo \nParameters.UnitsOfMeasureProvider \nUnitsOfMeasureProvider \nParameters.PreferOptionals \nPreferOptionals"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference-parameters.html#MissingValues","title":"Parameters.MissingValues","content":"Parameters.MissingValues \nMissingValues \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference-parameters.html#CultureInfo","title":"Parameters.CultureInfo","content":"Parameters.CultureInfo \nCultureInfo \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference-parameters.html#UnitsOfMeasureProvider","title":"Parameters.UnitsOfMeasureProvider","content":"Parameters.UnitsOfMeasureProvider \nUnitsOfMeasureProvider \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference-parameters.html#PreferOptionals","title":"Parameters.PreferOptionals","content":"Parameters.PreferOptionals \nPreferOptionals \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlruntime.html","title":"HtmlRuntime","content":"HtmlRuntime \n\n Helper functions called from the generated code for working with HTML tables\n \nHtmlRuntime.getTables \ngetTables \nHtmlRuntime.getLists \ngetLists \nHtmlRuntime.getDefinitionLists \ngetDefinitionLists \nHtmlRuntime.getHtmlObjects \ngetHtmlObjects"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlruntime.html#getTables","title":"HtmlRuntime.getTables","content":"HtmlRuntime.getTables \ngetTables \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlruntime.html#getLists","title":"HtmlRuntime.getLists","content":"HtmlRuntime.getLists \ngetLists \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlruntime.html#getDefinitionLists","title":"HtmlRuntime.getDefinitionLists","content":"HtmlRuntime.getDefinitionLists \ngetDefinitionLists \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlruntime.html#getHtmlObjects","title":"HtmlRuntime.getHtmlObjects","content":"HtmlRuntime.getHtmlObjects \ngetHtmlObjects \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-io.html","title":"IO","content":"IO \n\n Helper functions called from the generated code for working with files\n \nIO.watchForChanges \nwatchForChanges \nIO.asyncReadTextAtRuntime \nasyncReadTextAtRuntime \nIO.asyncReadTextAtRuntimeWithDesignTimeRules \nasyncReadTextAtRuntimeWithDesignTimeRules"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-io.html#watchForChanges","title":"IO.watchForChanges","content":"IO.watchForChanges \nwatchForChanges \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-io.html#asyncReadTextAtRuntime","title":"IO.asyncReadTextAtRuntime","content":"IO.asyncReadTextAtRuntime \nasyncReadTextAtRuntime \n\n Returns a TextReader for the uri using the runtime resolution rules\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-io.html#asyncReadTextAtRuntimeWithDesignTimeRules","title":"IO.asyncReadTextAtRuntimeWithDesignTimeRules","content":"IO.asyncReadTextAtRuntimeWithDesignTimeRules \nasyncReadTextAtRuntimeWithDesignTimeRules \n\n Returns a TextReader for the uri using the designtime resolution rules\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html","title":"NameUtils","content":"NameUtils \n\n Tools for generating nice member names that follow F# \u0026 .NET naming conventions\n \nNameUtils.nicePascalName \nnicePascalName \nNameUtils.niceCamelName \nniceCamelName \nNameUtils.uniqueGenerator \nuniqueGenerator \nNameUtils.capitalizeFirstLetter \ncapitalizeFirstLetter \nNameUtils.trimHtml \ntrimHtml \nNameUtils.pluralize \npluralize \nNameUtils.singularize \nsingularize"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#nicePascalName","title":"NameUtils.nicePascalName","content":"NameUtils.nicePascalName \nnicePascalName \n\n Turns a given non-empty string into a nice \u0027PascalCase\u0027 identifier\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#niceCamelName","title":"NameUtils.niceCamelName","content":"NameUtils.niceCamelName \nniceCamelName \n\n Turns a given non-empty string into a nice \u0027camelCase\u0027 identifier\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#uniqueGenerator","title":"NameUtils.uniqueGenerator","content":"NameUtils.uniqueGenerator \nuniqueGenerator \n\n Given a function to format names (such as \u0027niceCamelName\u0027 or \u0027nicePascalName\u0027)\n returns a name generator that never returns duplicate name (by appending an\n index to already used names)\n \n This function is curried and should be used with partial function application:\n\n     let makeUnique = uniqueGenerator nicePascalName\n     let n1 = makeUnique \u0022sample-name\u0022\n     let n2 = makeUnique \u0022sample-name\u0022\n\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#capitalizeFirstLetter","title":"NameUtils.capitalizeFirstLetter","content":"NameUtils.capitalizeFirstLetter \ncapitalizeFirstLetter \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#trimHtml","title":"NameUtils.trimHtml","content":"NameUtils.trimHtml \ntrimHtml \n\n Trim HTML tags from a given string and replace all of them with spaces\n Multiple tags are replaced with just a single space. (This is a recursive \n implementation that is somewhat faster than regular expression.)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#pluralize","title":"NameUtils.pluralize","content":"NameUtils.pluralize \npluralize \n\n Return the plural of an English word\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#singularize","title":"NameUtils.singularize","content":"NameUtils.singularize \nsingularize \n\n Return the singular of an English word\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html","title":"StructuralInference","content":"StructuralInference \n\n Implements type inference for unstructured documents like XML or JSON\n \nStructuralInference.IUnitsOfMeasureProvider \nIUnitsOfMeasureProvider \nStructuralInference.supportsUnitsOfMeasure \nsupportsUnitsOfMeasure \nStructuralInference.typeTag \ntypeTag \nStructuralInference.subtypeInfered \nsubtypeInfered \nStructuralInference.unionCollectionOrder \nunionCollectionOrder \nStructuralInference.unionRecordTypes \nunionRecordTypes \nStructuralInference.inferCollectionType \ninferCollectionType \nStructuralInference.inferPrimitiveType \ninferPrimitiveType \nStructuralInference.getInferedTypeFromString \ngetInferedTypeFromString \nStructuralInference.defaultUnitsOfMeasureProvider \ndefaultUnitsOfMeasureProvider \nStructuralInference.parseUnitOfMeasure \nparseUnitOfMeasure"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#supportsUnitsOfMeasure","title":"StructuralInference.supportsUnitsOfMeasure","content":"StructuralInference.supportsUnitsOfMeasure \nsupportsUnitsOfMeasure \n\n Checks whether a type supports unit of measure\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#typeTag","title":"StructuralInference.typeTag","content":"StructuralInference.typeTag \ntypeTag \n\n Returns a tag of a type - a tag represents a \u0027kind\u0027 of type \n (essentially it describes the different bottom types we have)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#subtypeInfered","title":"StructuralInference.subtypeInfered","content":"StructuralInference.subtypeInfered \nsubtypeInfered \n\n Find common subtype of two infered types:\n \n  * If the types are both primitive, then we find common subtype of the primitive types\n  * If the types are both records, then we union their fields (and mark some as optional)\n  * If the types are both collections, then we take subtype of their elements\n    (note we do not generate heterogeneous types in this case!)\n  * If one type is the Top type, then we return the other without checking\n  * If one of the types is the Null type and the other is not a value type\n    (numbers or booleans, but not string) then we return the other type.\n    Otherwise, we return bottom.\n\n The contract that should hold about the function is that given two types with the\n same \u0060InferedTypeTag\u0060, the result also has the same \u0060InferedTypeTag\u0060. \n\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#unionCollectionOrder","title":"StructuralInference.unionCollectionOrder","content":"StructuralInference.unionCollectionOrder \nunionCollectionOrder \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#unionRecordTypes","title":"StructuralInference.unionRecordTypes","content":"StructuralInference.unionRecordTypes \nunionRecordTypes \n\n Get the union of record types (merge their properties)\n This matches the corresponding members and marks them as \u0060Optional\u0060\n if one may be missing. It also returns subtype of their types.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#inferCollectionType","title":"StructuralInference.inferCollectionType","content":"StructuralInference.inferCollectionType \ninferCollectionType \n\n Infer the type of the collection based on multiple sample types\n (group the types by tag, count their multiplicity)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#inferPrimitiveType","title":"StructuralInference.inferPrimitiveType","content":"StructuralInference.inferPrimitiveType \ninferPrimitiveType \n\n Infers the type of a simple string value\n Returns one of null|typeof\u003CBit0\u003E|typeof\u003CBit1\u003E|typeof\u003Cbool\u003E|typeof\u003Cint\u003E|typeof\u003Cint64\u003E|typeof\u003Cdecimal\u003E|typeof\u003Cfloat\u003E|typeof\u003CGuid\u003E|typeof\u003CDateTime\u003E|typeof\u003CTimeSpan\u003E|typeof\u003Cstring\u003E\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#getInferedTypeFromString","title":"StructuralInference.getInferedTypeFromString","content":"StructuralInference.getInferedTypeFromString \ngetInferedTypeFromString \n\n Infers the type of a simple string value\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#defaultUnitsOfMeasureProvider","title":"StructuralInference.defaultUnitsOfMeasureProvider","content":"StructuralInference.defaultUnitsOfMeasureProvider \ndefaultUnitsOfMeasureProvider \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#parseUnitOfMeasure","title":"StructuralInference.parseUnitOfMeasure","content":"StructuralInference.parseUnitOfMeasure \nparseUnitOfMeasure \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-iunitsofmeasureprovider.html","title":"IUnitsOfMeasureProvider","content":"IUnitsOfMeasureProvider \n \nIUnitsOfMeasureProvider.Inverse \nInverse \nIUnitsOfMeasureProvider.Product \nProduct \nIUnitsOfMeasureProvider.SI \nSI"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-iunitsofmeasureprovider.html#Inverse","title":"IUnitsOfMeasureProvider.Inverse","content":"IUnitsOfMeasureProvider.Inverse \nInverse \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-iunitsofmeasureprovider.html#Product","title":"IUnitsOfMeasureProvider.Product","content":"IUnitsOfMeasureProvider.Product \nProduct \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-iunitsofmeasureprovider.html#SI","title":"IUnitsOfMeasureProvider.SI","content":"IUnitsOfMeasureProvider.SI \nSI \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema.html","title":"XmlSchema","content":"XmlSchema \n \nXmlSchema.ResolutionFolderResolver \nResolutionFolderResolver \nXmlSchema.parseSchemaFromTextReader \nparseSchemaFromTextReader \nXmlSchema.parseSchema \nparseSchema"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema.html#parseSchemaFromTextReader","title":"XmlSchema.parseSchemaFromTextReader","content":"XmlSchema.parseSchemaFromTextReader \nparseSchemaFromTextReader \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema.html#parseSchema","title":"XmlSchema.parseSchema","content":"XmlSchema.parseSchema \nparseSchema \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema-resolutionfolderresolver.html","title":"ResolutionFolderResolver","content":"ResolutionFolderResolver \n\n A custom XmlResolver is needed for included files because we get the contents of the main file\n directly as a string from the FSharp.Data infrastructure. Hence the default XmlResolver is not\n able to find the location of included schema files.\n \nResolutionFolderResolver.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema-resolutionfolderresolver.html#( .ctor )","title":"ResolutionFolderResolver.( .ctor )","content":"ResolutionFolderResolver.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html","title":"CsvFile\u003C\u0027RowType\u003E","content":"CsvFile\u003C\u0027RowType\u003E \n \nCsvFile\u003C\u0027RowType\u003E.( .ctor ) \n( .ctor ) \nCsvFile\u003C\u0027RowType\u003E.Append \nAppend \nCsvFile\u003C\u0027RowType\u003E.Cache \nCache \nCsvFile\u003C\u0027RowType\u003E.Filter \nFilter \nCsvFile\u003C\u0027RowType\u003E.Map \nMap \nCsvFile\u003C\u0027RowType\u003E.Save \nSave \nCsvFile\u003C\u0027RowType\u003E.Save \nSave \nCsvFile\u003C\u0027RowType\u003E.Save \nSave \nCsvFile\u003C\u0027RowType\u003E.SaveToString \nSaveToString \nCsvFile\u003C\u0027RowType\u003E.Skip \nSkip \nCsvFile\u003C\u0027RowType\u003E.SkipWhile \nSkipWhile \nCsvFile\u003C\u0027RowType\u003E.Take \nTake \nCsvFile\u003C\u0027RowType\u003E.TakeWhile \nTakeWhile \nCsvFile\u003C\u0027RowType\u003E.Truncate \nTruncate \nCsvFile\u003C\u0027RowType\u003E.Headers \nHeaders \nCsvFile\u003C\u0027RowType\u003E.Quote \nQuote \nCsvFile\u003C\u0027RowType\u003E.Separators \nSeparators \nCsvFile\u003C\u0027RowType\u003E.NumberOfColumns \nNumberOfColumns \nCsvFile\u003C\u0027RowType\u003E.Rows \nRows \nCsvFile\u003C\u0027RowType\u003E.Create \nCreate \nCsvFile\u003C\u0027RowType\u003E.CreateEmpty \nCreateEmpty \nCsvFile\u003C\u0027RowType\u003E.ParseRows \nParseRows"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#( .ctor )","title":"CsvFile\u003C\u0027RowType\u003E.( .ctor )","content":"CsvFile\u003C\u0027RowType\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Append","title":"CsvFile\u003C\u0027RowType\u003E.Append","content":"CsvFile\u003C\u0027RowType\u003E.Append \nAppend \n\n Returns a csv with the same rows as the original plus the provided rows appended\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Cache","title":"CsvFile\u003C\u0027RowType\u003E.Cache","content":"CsvFile\u003C\u0027RowType\u003E.Cache \nCache \n\n Returns a new csv with the same rows as the original but which guarantees\n that each row will be only be read and parsed from the input at most once.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Filter","title":"CsvFile\u003C\u0027RowType\u003E.Filter","content":"CsvFile\u003C\u0027RowType\u003E.Filter \nFilter \n\n Returns a new csv containing only the rows for which the given predicate returns \u0022true\u0022.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Map","title":"CsvFile\u003C\u0027RowType\u003E.Map","content":"CsvFile\u003C\u0027RowType\u003E.Map \nMap \n\n Returns a new csv where every row has been transformed by the provided mapping function.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Save","title":"CsvFile\u003C\u0027RowType\u003E.Save","content":"CsvFile\u003C\u0027RowType\u003E.Save \nSave \n\n Saves CSV to the specified file\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Save","title":"CsvFile\u003C\u0027RowType\u003E.Save","content":"CsvFile\u003C\u0027RowType\u003E.Save \nSave \n\n Saves CSV to the specified stream\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Save","title":"CsvFile\u003C\u0027RowType\u003E.Save","content":"CsvFile\u003C\u0027RowType\u003E.Save \nSave \n\n Saves CSV to the specified writer\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#SaveToString","title":"CsvFile\u003C\u0027RowType\u003E.SaveToString","content":"CsvFile\u003C\u0027RowType\u003E.SaveToString \nSaveToString \n\n Saves CSV to a string\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Skip","title":"CsvFile\u003C\u0027RowType\u003E.Skip","content":"CsvFile\u003C\u0027RowType\u003E.Skip \nSkip \n\n Returns a csv that skips N rows and then yields the remaining rows.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#SkipWhile","title":"CsvFile\u003C\u0027RowType\u003E.SkipWhile","content":"CsvFile\u003C\u0027RowType\u003E.SkipWhile \nSkipWhile \n\n Returns a csv that, when iterated, skips rows while the given predicate returns\n \u003Cc\u003Etrue\u003C/c\u003E, and then yields the remaining rows.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Take","title":"CsvFile\u003C\u0027RowType\u003E.Take","content":"CsvFile\u003C\u0027RowType\u003E.Take \nTake \n\n Returns a new csv with only the first N rows of the underlying csv.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#TakeWhile","title":"CsvFile\u003C\u0027RowType\u003E.TakeWhile","content":"CsvFile\u003C\u0027RowType\u003E.TakeWhile \nTakeWhile \n\n Returns a csv that, when iterated, yields rowswhile the given predicate\n returns \u003Cc\u003Etrue\u003C/c\u003E, and then returns no further rows.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Truncate","title":"CsvFile\u003C\u0027RowType\u003E.Truncate","content":"CsvFile\u003C\u0027RowType\u003E.Truncate \nTruncate \n\n Returns a csv that when enumerated returns at most N rows.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Headers","title":"CsvFile\u003C\u0027RowType\u003E.Headers","content":"CsvFile\u003C\u0027RowType\u003E.Headers \nHeaders \n\n The names of the columns\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Quote","title":"CsvFile\u003C\u0027RowType\u003E.Quote","content":"CsvFile\u003C\u0027RowType\u003E.Quote \nQuote \n\n The quotation mark use for surrounding values containing separator chars\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Separators","title":"CsvFile\u003C\u0027RowType\u003E.Separators","content":"CsvFile\u003C\u0027RowType\u003E.Separators \nSeparators \n\n The character(s) used as column separator(s)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#NumberOfColumns","title":"CsvFile\u003C\u0027RowType\u003E.NumberOfColumns","content":"CsvFile\u003C\u0027RowType\u003E.NumberOfColumns \nNumberOfColumns \n\n The number of columns\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Rows","title":"CsvFile\u003C\u0027RowType\u003E.Rows","content":"CsvFile\u003C\u0027RowType\u003E.Rows \nRows \n\n The rows with data\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Create","title":"CsvFile\u003C\u0027RowType\u003E.Create","content":"CsvFile\u003C\u0027RowType\u003E.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#CreateEmpty","title":"CsvFile\u003C\u0027RowType\u003E.CreateEmpty","content":"CsvFile\u003C\u0027RowType\u003E.CreateEmpty \nCreateEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#ParseRows","title":"CsvFile\u003C\u0027RowType\u003E.ParseRows","content":"CsvFile\u003C\u0027RowType\u003E.ParseRows \nParseRows \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmldefinitionlist.html","title":"HtmlDefinitionList","content":"HtmlDefinitionList \n\n Representation of an HTML definition list\n \nHtmlDefinitionList.Name \nName \nHtmlDefinitionList.Definitions \nDefinitions \nHtmlDefinitionList.Html \nHtml"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmldefinitionlist.html#Name","title":"HtmlDefinitionList.Name","content":"HtmlDefinitionList.Name \nName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmldefinitionlist.html#Definitions","title":"HtmlDefinitionList.Definitions","content":"HtmlDefinitionList.Definitions \nDefinitions \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmldefinitionlist.html#Html","title":"HtmlDefinitionList.Html","content":"HtmlDefinitionList.Html \nHtml \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmllist.html","title":"HtmlList","content":"HtmlList \n\n Representation of an HTML list\n \nHtmlList.Name \nName \nHtmlList.Values \nValues \nHtmlList.Html \nHtml"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmllist.html#Name","title":"HtmlList.Name","content":"HtmlList.Name \nName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmllist.html#Values","title":"HtmlList.Values","content":"HtmlList.Values \nValues \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmllist.html#Html","title":"HtmlList.Html","content":"HtmlList.Html \nHtml \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobject.html","title":"HtmlObject","content":"HtmlObject \n\n Representation of an HTML table, list, or definition list\n \nHtmlObject.Name \nName \nHtmlObject.Table \nTable \nHtmlObject.List \nList \nHtmlObject.DefinitionList \nDefinitionList"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobject.html#Name","title":"HtmlObject.Name","content":"HtmlObject.Name \nName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobject.html#Table","title":"HtmlObject.Table","content":"HtmlObject.Table \nTable \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobject.html#List","title":"HtmlObject.List","content":"HtmlObject.List \nList \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobject.html#DefinitionList","title":"HtmlObject.DefinitionList","content":"HtmlObject.DefinitionList \nDefinitionList \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html","title":"HtmlTable","content":"HtmlTable \n\n Representation of an HTML table cell\n \nHtmlTable.Name \nName \nHtmlTable.HeaderNamesAndUnits \nHeaderNamesAndUnits \nHtmlTable.InferedProperties \nInferedProperties \nHtmlTable.HasHeaders \nHasHeaders \nHtmlTable.Rows \nRows \nHtmlTable.Html \nHtml"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#Name","title":"HtmlTable.Name","content":"HtmlTable.Name \nName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#HeaderNamesAndUnits","title":"HtmlTable.HeaderNamesAndUnits","content":"HtmlTable.HeaderNamesAndUnits \nHeaderNamesAndUnits \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#InferedProperties","title":"HtmlTable.InferedProperties","content":"HtmlTable.InferedProperties \nInferedProperties \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#HasHeaders","title":"HtmlTable.HasHeaders","content":"HtmlTable.HasHeaders \nHasHeaders \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#Rows","title":"HtmlTable.Rows","content":"HtmlTable.Rows \nRows \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#Html","title":"HtmlTable.Html","content":"HtmlTable.Html \nHtml \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html","title":"HtmlTableCell","content":"HtmlTableCell \nRepresentation of an HTML table cell \nHtmlTableCell.Data \nData \nHtmlTableCell.IsHeader \nIsHeader \nHtmlTableCell.Cell \nCell \nHtmlTableCell.Empty \nEmpty"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html#Data","title":"HtmlTableCell.Data","content":"HtmlTableCell.Data \nData \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html#IsHeader","title":"HtmlTableCell.IsHeader","content":"HtmlTableCell.IsHeader \nIsHeader \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html#Cell","title":"HtmlTableCell.Cell","content":"HtmlTableCell.Cell \nCell \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html#Empty","title":"HtmlTableCell.Empty","content":"HtmlTableCell.Empty \nEmpty \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html","title":"JsonConversions","content":"JsonConversions \n\n Conversions from JsonValue to string/int/int64/decimal/float/boolean/datetime/datetimeoffset/timespan/guid options\n \nJsonConversions.AsDateTime \nAsDateTime \nJsonConversions.AsDateTimeOffset \nAsDateTimeOffset \nJsonConversions.AsDecimal \nAsDecimal \nJsonConversions.AsFloat \nAsFloat \nJsonConversions.AsInteger \nAsInteger \nJsonConversions.AsInteger64 \nAsInteger64 \nJsonConversions.AsString \nAsString \nJsonConversions.AsTimeSpan \nAsTimeSpan \nJsonConversions.AsGuid \nAsGuid \nJsonConversions.AsBoolean \nAsBoolean"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsDateTime","title":"JsonConversions.AsDateTime","content":"JsonConversions.AsDateTime \nAsDateTime \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsDateTimeOffset","title":"JsonConversions.AsDateTimeOffset","content":"JsonConversions.AsDateTimeOffset \nAsDateTimeOffset \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsDecimal","title":"JsonConversions.AsDecimal","content":"JsonConversions.AsDecimal \nAsDecimal \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsFloat","title":"JsonConversions.AsFloat","content":"JsonConversions.AsFloat \nAsFloat \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsInteger","title":"JsonConversions.AsInteger","content":"JsonConversions.AsInteger \nAsInteger \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsInteger64","title":"JsonConversions.AsInteger64","content":"JsonConversions.AsInteger64 \nAsInteger64 \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsString","title":"JsonConversions.AsString","content":"JsonConversions.AsString \nAsString \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsTimeSpan","title":"JsonConversions.AsTimeSpan","content":"JsonConversions.AsTimeSpan \nAsTimeSpan \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsGuid","title":"JsonConversions.AsGuid","content":"JsonConversions.AsGuid \nAsGuid \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsBoolean","title":"JsonConversions.AsBoolean","content":"JsonConversions.AsBoolean \nAsBoolean \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html","title":"JsonRuntime","content":"JsonRuntime \n\n Static helper methods called from the generated code for working with JSON\n \nJsonRuntime.ConvertArray \nConvertArray \nJsonRuntime.ConvertBoolean \nConvertBoolean \nJsonRuntime.ConvertDateTime \nConvertDateTime \nJsonRuntime.ConvertDateTimeOffset \nConvertDateTimeOffset \nJsonRuntime.ConvertDecimal \nConvertDecimal \nJsonRuntime.ConvertFloat \nConvertFloat \nJsonRuntime.ConvertGuid \nConvertGuid \nJsonRuntime.ConvertInteger \nConvertInteger \nJsonRuntime.ConvertInteger64 \nConvertInteger64 \nJsonRuntime.ConvertOptionalProperty \nConvertOptionalProperty \nJsonRuntime.ConvertString \nConvertString \nJsonRuntime.ConvertTimeSpan \nConvertTimeSpan \nJsonRuntime.CreateArray \nCreateArray \nJsonRuntime.CreateRecord \nCreateRecord \nJsonRuntime.CreateValue \nCreateValue \nJsonRuntime.GetArrayChildByTypeTag \nGetArrayChildByTypeTag \nJsonRuntime.GetArrayChildrenByTypeTag \nGetArrayChildrenByTypeTag \nJsonRuntime.GetNonOptionalValue \nGetNonOptionalValue \nJsonRuntime.GetPropertyPacked \nGetPropertyPacked \nJsonRuntime.GetPropertyPackedOrNull \nGetPropertyPackedOrNull \nJsonRuntime.TryGetArrayChildByTypeTag \nTryGetArrayChildByTypeTag \nJsonRuntime.TryGetPropertyPacked \nTryGetPropertyPacked \nJsonRuntime.TryGetPropertyUnpacked \nTryGetPropertyUnpacked \nJsonRuntime.TryGetPropertyUnpackedWithPath \nTryGetPropertyUnpackedWithPath \nJsonRuntime.TryGetValueByTypeTag \nTryGetValueByTypeTag"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertArray","title":"JsonRuntime.ConvertArray","content":"JsonRuntime.ConvertArray \nConvertArray \n\n Converts JSON array to array of target types\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertBoolean","title":"JsonRuntime.ConvertBoolean","content":"JsonRuntime.ConvertBoolean \nConvertBoolean \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertDateTime","title":"JsonRuntime.ConvertDateTime","content":"JsonRuntime.ConvertDateTime \nConvertDateTime \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertDateTimeOffset","title":"JsonRuntime.ConvertDateTimeOffset","content":"JsonRuntime.ConvertDateTimeOffset \nConvertDateTimeOffset \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertDecimal","title":"JsonRuntime.ConvertDecimal","content":"JsonRuntime.ConvertDecimal \nConvertDecimal \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertFloat","title":"JsonRuntime.ConvertFloat","content":"JsonRuntime.ConvertFloat \nConvertFloat \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertGuid","title":"JsonRuntime.ConvertGuid","content":"JsonRuntime.ConvertGuid \nConvertGuid \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertInteger","title":"JsonRuntime.ConvertInteger","content":"JsonRuntime.ConvertInteger \nConvertInteger \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertInteger64","title":"JsonRuntime.ConvertInteger64","content":"JsonRuntime.ConvertInteger64 \nConvertInteger64 \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertOptionalProperty","title":"JsonRuntime.ConvertOptionalProperty","content":"JsonRuntime.ConvertOptionalProperty \nConvertOptionalProperty \n\n Get optional json property and convert to a specified type\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertString","title":"JsonRuntime.ConvertString","content":"JsonRuntime.ConvertString \nConvertString \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertTimeSpan","title":"JsonRuntime.ConvertTimeSpan","content":"JsonRuntime.ConvertTimeSpan \nConvertTimeSpan \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#CreateArray","title":"JsonRuntime.CreateArray","content":"JsonRuntime.CreateArray \nCreateArray \n\n Creates a scalar JsonValue.Array and wraps it in a json document\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#CreateRecord","title":"JsonRuntime.CreateRecord","content":"JsonRuntime.CreateRecord \nCreateRecord \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#CreateValue","title":"JsonRuntime.CreateValue","content":"JsonRuntime.CreateValue \nCreateValue \n\n Creates a scalar JsonValue and wraps it in a json document\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetArrayChildByTypeTag","title":"JsonRuntime.GetArrayChildByTypeTag","content":"JsonRuntime.GetArrayChildByTypeTag \nGetArrayChildByTypeTag \n\n Returns a single array children that matches the specified tag\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetArrayChildrenByTypeTag","title":"JsonRuntime.GetArrayChildrenByTypeTag","content":"JsonRuntime.GetArrayChildrenByTypeTag \nGetArrayChildrenByTypeTag \n\n Returns all array values that match the specified tag\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetNonOptionalValue","title":"JsonRuntime.GetNonOptionalValue","content":"JsonRuntime.GetNonOptionalValue \nGetNonOptionalValue \n\n Operation that extracts the value from an option and reports a meaningful error message when the value is not there\n If the originalValue is a scalar, for missing strings we return \u0022\u0022, and for missing doubles we return NaN\n For other types an error is thrown\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetPropertyPacked","title":"JsonRuntime.GetPropertyPacked","content":"JsonRuntime.GetPropertyPacked \nGetPropertyPacked \n\n Get json property and wrap in json document\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetPropertyPackedOrNull","title":"JsonRuntime.GetPropertyPackedOrNull","content":"JsonRuntime.GetPropertyPackedOrNull \nGetPropertyPackedOrNull \n\n Get json property and wrap in json document, and return null if not found\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetArrayChildByTypeTag","title":"JsonRuntime.TryGetArrayChildByTypeTag","content":"JsonRuntime.TryGetArrayChildByTypeTag \nTryGetArrayChildByTypeTag \n\n Returns single or no value from an array matching the specified tag\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetPropertyPacked","title":"JsonRuntime.TryGetPropertyPacked","content":"JsonRuntime.TryGetPropertyPacked \nTryGetPropertyPacked \n\n Get optional json property wrapped in json document\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetPropertyUnpacked","title":"JsonRuntime.TryGetPropertyUnpacked","content":"JsonRuntime.TryGetPropertyUnpacked \nTryGetPropertyUnpacked \n\n Get optional json property\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetPropertyUnpackedWithPath","title":"JsonRuntime.TryGetPropertyUnpackedWithPath","content":"JsonRuntime.TryGetPropertyUnpackedWithPath \nTryGetPropertyUnpackedWithPath \n\n Get optional json property and wrap it together with path\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetValueByTypeTag","title":"JsonRuntime.TryGetValueByTypeTag","content":"JsonRuntime.TryGetValueByTypeTag \nTryGetValueByTypeTag \n\n Returns a single or no value by tag type\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonvalueoptionandpath.html","title":"JsonValueOptionAndPath","content":"JsonValueOptionAndPath \n \nJsonValueOptionAndPath.JsonOpt \nJsonOpt \nJsonValueOptionAndPath.Path \nPath"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonvalueoptionandpath.html#JsonOpt","title":"JsonValueOptionAndPath.JsonOpt","content":"JsonValueOptionAndPath.JsonOpt \nJsonOpt \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonvalueoptionandpath.html#Path","title":"JsonValueOptionAndPath.Path","content":"JsonValueOptionAndPath.Path \nPath \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html","title":"TextRuntime","content":"TextRuntime \n\n Static helper methods called from the generated code for working with text\n \nTextRuntime.AsyncMap \nAsyncMap \nTextRuntime.ConvertBoolean \nConvertBoolean \nTextRuntime.ConvertBooleanBack \nConvertBooleanBack \nTextRuntime.ConvertDateTime \nConvertDateTime \nTextRuntime.ConvertDateTimeBack \nConvertDateTimeBack \nTextRuntime.ConvertDateTimeOffset \nConvertDateTimeOffset \nTextRuntime.ConvertDateTimeOffsetBack \nConvertDateTimeOffsetBack \nTextRuntime.ConvertDecimal \nConvertDecimal \nTextRuntime.ConvertDecimalBack \nConvertDecimalBack \nTextRuntime.ConvertFloat \nConvertFloat \nTextRuntime.ConvertFloatBack \nConvertFloatBack \nTextRuntime.ConvertGuid \nConvertGuid \nTextRuntime.ConvertGuidBack \nConvertGuidBack \nTextRuntime.ConvertInteger \nConvertInteger \nTextRuntime.ConvertInteger64 \nConvertInteger64 \nTextRuntime.ConvertInteger64Back \nConvertInteger64Back \nTextRuntime.ConvertIntegerBack \nConvertIntegerBack \nTextRuntime.ConvertString \nConvertString \nTextRuntime.ConvertStringBack \nConvertStringBack \nTextRuntime.ConvertTimeSpan \nConvertTimeSpan \nTextRuntime.ConvertTimeSpanBack \nConvertTimeSpanBack \nTextRuntime.GetCulture \nGetCulture \nTextRuntime.GetMissingValues \nGetMissingValues \nTextRuntime.GetNonOptionalValue \nGetNonOptionalValue \nTextRuntime.NullableToOption \nNullableToOption \nTextRuntime.OptionToNullable \nOptionToNullable \nTextRuntime.cultureInfoCache \ncultureInfoCache"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#AsyncMap","title":"TextRuntime.AsyncMap","content":"TextRuntime.AsyncMap \nAsyncMap \n\n Turn a sync operation into an async operation\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertBoolean","title":"TextRuntime.ConvertBoolean","content":"TextRuntime.ConvertBoolean \nConvertBoolean \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertBooleanBack","title":"TextRuntime.ConvertBooleanBack","content":"TextRuntime.ConvertBooleanBack \nConvertBooleanBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDateTime","title":"TextRuntime.ConvertDateTime","content":"TextRuntime.ConvertDateTime \nConvertDateTime \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDateTimeBack","title":"TextRuntime.ConvertDateTimeBack","content":"TextRuntime.ConvertDateTimeBack \nConvertDateTimeBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDateTimeOffset","title":"TextRuntime.ConvertDateTimeOffset","content":"TextRuntime.ConvertDateTimeOffset \nConvertDateTimeOffset \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDateTimeOffsetBack","title":"TextRuntime.ConvertDateTimeOffsetBack","content":"TextRuntime.ConvertDateTimeOffsetBack \nConvertDateTimeOffsetBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDecimal","title":"TextRuntime.ConvertDecimal","content":"TextRuntime.ConvertDecimal \nConvertDecimal \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDecimalBack","title":"TextRuntime.ConvertDecimalBack","content":"TextRuntime.ConvertDecimalBack \nConvertDecimalBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertFloat","title":"TextRuntime.ConvertFloat","content":"TextRuntime.ConvertFloat \nConvertFloat \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertFloatBack","title":"TextRuntime.ConvertFloatBack","content":"TextRuntime.ConvertFloatBack \nConvertFloatBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertGuid","title":"TextRuntime.ConvertGuid","content":"TextRuntime.ConvertGuid \nConvertGuid \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertGuidBack","title":"TextRuntime.ConvertGuidBack","content":"TextRuntime.ConvertGuidBack \nConvertGuidBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertInteger","title":"TextRuntime.ConvertInteger","content":"TextRuntime.ConvertInteger \nConvertInteger \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertInteger64","title":"TextRuntime.ConvertInteger64","content":"TextRuntime.ConvertInteger64 \nConvertInteger64 \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertInteger64Back","title":"TextRuntime.ConvertInteger64Back","content":"TextRuntime.ConvertInteger64Back \nConvertInteger64Back \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertIntegerBack","title":"TextRuntime.ConvertIntegerBack","content":"TextRuntime.ConvertIntegerBack \nConvertIntegerBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertString","title":"TextRuntime.ConvertString","content":"TextRuntime.ConvertString \nConvertString \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertStringBack","title":"TextRuntime.ConvertStringBack","content":"TextRuntime.ConvertStringBack \nConvertStringBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertTimeSpan","title":"TextRuntime.ConvertTimeSpan","content":"TextRuntime.ConvertTimeSpan \nConvertTimeSpan \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertTimeSpanBack","title":"TextRuntime.ConvertTimeSpanBack","content":"TextRuntime.ConvertTimeSpanBack \nConvertTimeSpanBack \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#GetCulture","title":"TextRuntime.GetCulture","content":"TextRuntime.GetCulture \nGetCulture \n\n Returns CultureInfo matching the specified culture string\n (or InvariantCulture if the argument is null or empty)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#GetMissingValues","title":"TextRuntime.GetMissingValues","content":"TextRuntime.GetMissingValues \nGetMissingValues \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#GetNonOptionalValue","title":"TextRuntime.GetNonOptionalValue","content":"TextRuntime.GetNonOptionalValue \nGetNonOptionalValue \n\n Operation that extracts the value from an option and reports a meaningful error message when the value is not there\n For missing strings we return \u0022\u0022, and for missing doubles we return NaN\n For other types an error is thrown\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#NullableToOption","title":"TextRuntime.NullableToOption","content":"TextRuntime.NullableToOption \nNullableToOption \n\n Turn a .NET type Nullable\u003C\u0027T\u003E to an F# option type Option\u003C\u0027T\u003E\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#OptionToNullable","title":"TextRuntime.OptionToNullable","content":"TextRuntime.OptionToNullable \nOptionToNullable \n\n Turn an F# option type Option\u003C\u0027T\u003E containing a primitive \n value type into a .NET type Nullable\u003C\u0027T\u003E\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#cultureInfoCache","title":"TextRuntime.cultureInfoCache","content":"TextRuntime.cultureInfoCache \ncultureInfoCache \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html","title":"XmlRuntime","content":"XmlRuntime \n\n Static helper methods called from the generated code for working with XML\n \nXmlRuntime.ConvertArray \nConvertArray \nXmlRuntime.ConvertAsName \nConvertAsName \nXmlRuntime.ConvertOptional \nConvertOptional \nXmlRuntime.ConvertOptional2 \nConvertOptional2 \nXmlRuntime.CreateRecord \nCreateRecord \nXmlRuntime.CreateValue \nCreateValue \nXmlRuntime.GetChild \nGetChild \nXmlRuntime.GetJsonValue \nGetJsonValue \nXmlRuntime.TryGetAttribute \nTryGetAttribute \nXmlRuntime.TryGetJsonValue \nTryGetJsonValue \nXmlRuntime.TryGetValue \nTryGetValue"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#ConvertArray","title":"XmlRuntime.ConvertArray","content":"XmlRuntime.ConvertArray \nConvertArray \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#ConvertAsName","title":"XmlRuntime.ConvertAsName","content":"XmlRuntime.ConvertAsName \nConvertAsName \n\n Returns Some if the specified XmlElement has the specified name\n (otherwise None is returned). This is used when the current element\n can be one of multiple elements.\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#ConvertOptional","title":"XmlRuntime.ConvertOptional","content":"XmlRuntime.ConvertOptional \nConvertOptional \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#ConvertOptional2","title":"XmlRuntime.ConvertOptional2","content":"XmlRuntime.ConvertOptional2 \nConvertOptional2 \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#CreateRecord","title":"XmlRuntime.CreateRecord","content":"XmlRuntime.CreateRecord \nCreateRecord \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#CreateValue","title":"XmlRuntime.CreateValue","content":"XmlRuntime.CreateValue \nCreateValue \n\n Creates a XElement with a scalar value and wraps it in a XmlElement\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#GetChild","title":"XmlRuntime.GetChild","content":"XmlRuntime.GetChild \nGetChild \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#GetJsonValue","title":"XmlRuntime.GetJsonValue","content":"XmlRuntime.GetJsonValue \nGetJsonValue \n\n Returns the contents of the element as a JsonValue\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#TryGetAttribute","title":"XmlRuntime.TryGetAttribute","content":"XmlRuntime.TryGetAttribute \nTryGetAttribute \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#TryGetJsonValue","title":"XmlRuntime.TryGetJsonValue","content":"XmlRuntime.TryGetJsonValue \nTryGetJsonValue \n\n Tries to return the contents of the element as a JsonValue\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#TryGetValue","title":"XmlRuntime.TryGetValue","content":"XmlRuntime.TryGetValue \nTryGetValue \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html","title":"HtmlDocument","content":"HtmlDocument \n\n Underlying representation of the root types generated by HtmlProvider\n \nHtmlDocument.GetDefinitionList \nGetDefinitionList \nHtmlDocument.GetList \nGetList \nHtmlDocument.GetTable \nGetTable \nHtmlDocument.Html \nHtml \nHtmlDocument.Create \nCreate"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#GetDefinitionList","title":"HtmlDocument.GetDefinitionList","content":"HtmlDocument.GetDefinitionList \nGetDefinitionList \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#GetList","title":"HtmlDocument.GetList","content":"HtmlDocument.GetList \nGetList \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#GetTable","title":"HtmlDocument.GetTable","content":"HtmlDocument.GetTable \nGetTable \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#Html","title":"HtmlDocument.Html","content":"HtmlDocument.Html \nHtml \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#Create","title":"HtmlDocument.Create","content":"HtmlDocument.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html","title":"HtmlList\u003C\u0027ItemType\u003E","content":"HtmlList\u003C\u0027ItemType\u003E \n\n Underlying representation of list types generated by HtmlProvider\n \nHtmlList\u003C\u0027ItemType\u003E.Name \nName \nHtmlList\u003C\u0027ItemType\u003E.Html \nHtml \nHtmlList\u003C\u0027ItemType\u003E.Values \nValues \nHtmlList\u003C\u0027ItemType\u003E.Create \nCreate \nHtmlList\u003C\u0027ItemType\u003E.CreateNested \nCreateNested"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#Name","title":"HtmlList\u003C\u0027ItemType\u003E.Name","content":"HtmlList\u003C\u0027ItemType\u003E.Name \nName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#Html","title":"HtmlList\u003C\u0027ItemType\u003E.Html","content":"HtmlList\u003C\u0027ItemType\u003E.Html \nHtml \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#Values","title":"HtmlList\u003C\u0027ItemType\u003E.Values","content":"HtmlList\u003C\u0027ItemType\u003E.Values \nValues \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#Create","title":"HtmlList\u003C\u0027ItemType\u003E.Create","content":"HtmlList\u003C\u0027ItemType\u003E.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#CreateNested","title":"HtmlList\u003C\u0027ItemType\u003E.CreateNested","content":"HtmlList\u003C\u0027ItemType\u003E.CreateNested \nCreateNested \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html","title":"HtmlTable\u003C\u0027RowType\u003E","content":"HtmlTable\u003C\u0027RowType\u003E \n\n Underlying representation of table types generated by HtmlProvider\n \nHtmlTable\u003C\u0027RowType\u003E.Headers \nHeaders \nHtmlTable\u003C\u0027RowType\u003E.Name \nName \nHtmlTable\u003C\u0027RowType\u003E.Html \nHtml \nHtmlTable\u003C\u0027RowType\u003E.Rows \nRows \nHtmlTable\u003C\u0027RowType\u003E.Create \nCreate"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Headers","title":"HtmlTable\u003C\u0027RowType\u003E.Headers","content":"HtmlTable\u003C\u0027RowType\u003E.Headers \nHeaders \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Name","title":"HtmlTable\u003C\u0027RowType\u003E.Name","content":"HtmlTable\u003C\u0027RowType\u003E.Name \nName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Html","title":"HtmlTable\u003C\u0027RowType\u003E.Html","content":"HtmlTable\u003C\u0027RowType\u003E.Html \nHtml \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Rows","title":"HtmlTable\u003C\u0027RowType\u003E.Rows","content":"HtmlTable\u003C\u0027RowType\u003E.Rows \nRows \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Create","title":"HtmlTable\u003C\u0027RowType\u003E.Create","content":"HtmlTable\u003C\u0027RowType\u003E.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-ijsondocument.html","title":"IJsonDocument","content":"IJsonDocument \n \nIJsonDocument.CreateNew \nCreateNew \nIJsonDocument.Path \nPath \nIJsonDocument.JsonValue \nJsonValue"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-ijsondocument.html#CreateNew","title":"IJsonDocument.CreateNew","content":"IJsonDocument.CreateNew \nCreateNew \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-ijsondocument.html#Path","title":"IJsonDocument.Path","content":"IJsonDocument.Path \nPath \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-ijsondocument.html#JsonValue","title":"IJsonDocument.JsonValue","content":"IJsonDocument.JsonValue \nJsonValue \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html","title":"JsonDocument","content":"JsonDocument \nUnderlying representation of types generated by JsonProvider \nJsonDocument.JsonValue \nJsonValue \nJsonDocument.Create \nCreate \nJsonDocument.Create \nCreate \nJsonDocument.CreateList \nCreateList \nJsonDocument.Json \nJson \nJsonDocument.Path \nPath"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#JsonValue","title":"JsonDocument.JsonValue","content":"JsonDocument.JsonValue \nJsonValue \n\n The underlying JsonValue\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#Create","title":"JsonDocument.Create","content":"JsonDocument.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#Create","title":"JsonDocument.Create","content":"JsonDocument.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#CreateList","title":"JsonDocument.CreateList","content":"JsonDocument.CreateList \nCreateList \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#Json","title":"JsonDocument.Json","content":"JsonDocument.Json \nJson \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#Path","title":"JsonDocument.Path","content":"JsonDocument.Path \nPath \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html","title":"XmlElement","content":"XmlElement \n\n Underlying representation of types generated by XmlProvider\n \nXmlElement._Print \n_Print \nXmlElement.Create \nCreate \nXmlElement.Create \nCreate \nXmlElement.CreateList \nCreateList \nXmlElement.XElement \nXElement"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#_Print","title":"XmlElement._Print","content":"XmlElement._Print \n_Print \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#Create","title":"XmlElement.Create","content":"XmlElement.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#Create","title":"XmlElement.Create","content":"XmlElement.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#CreateList","title":"XmlElement.CreateList","content":"XmlElement.CreateList \nCreateList \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#XElement","title":"XmlElement.XElement","content":"XmlElement.XElement \nXElement \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit.html","title":"Bit","content":"Bit \n\n Dummy type to represent that only one of \u00220\u0022 and \u00221\u0022 were found\n Will be generated as a \u0027bool\u0027, unless it\u0027s converted to another numerical type\n \nBit.Bit \nBit"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit.html#Bit","title":"Bit.Bit","content":"Bit.Bit \nBit \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit0.html","title":"Bit0","content":"Bit0 \n\n Dummy type to represent that only \u00220\u0022 was found.\n Will be generated as \u0027int\u0027, unless it\u0027s converted to Bit.\n \nBit0.Bit0 \nBit0"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit0.html#Bit0","title":"Bit0.Bit0","content":"Bit0.Bit0 \nBit0 \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit1.html","title":"Bit1","content":"Bit1 \n\n Dummy type to represent that only \u00221\u0022 was found\n Will be generated as \u0027int\u0027, unless it\u0027s converted to Bit\n \nBit1.Bit1 \nBit1"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit1.html#Bit1","title":"Bit1.Bit1","content":"Bit1.Bit1 \nBit1 \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedmultiplicity.html","title":"InferedMultiplicity","content":"InferedMultiplicity \n\n For heterogeneous types (types that have multiple possible forms\n such as differently named XML nodes or records and arrays mixed together)\n this type represents the number of occurrences of individual forms\n \nInferedMultiplicity.Single \nSingle \nInferedMultiplicity.OptionalSingle \nOptionalSingle \nInferedMultiplicity.Multiple \nMultiple"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedmultiplicity.html#Single","title":"InferedMultiplicity.Single","content":"InferedMultiplicity.Single \nSingle \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedmultiplicity.html#OptionalSingle","title":"InferedMultiplicity.OptionalSingle","content":"InferedMultiplicity.OptionalSingle \nOptionalSingle \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedmultiplicity.html#Multiple","title":"InferedMultiplicity.Multiple","content":"InferedMultiplicity.Multiple \nMultiple \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedproperty.html","title":"InferedProperty","content":"InferedProperty \nA property of a record has a name and type and may be optional \nInferedProperty.Name \nName \nInferedProperty.Type \nType"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedproperty.html#Name","title":"InferedProperty.Name","content":"InferedProperty.Name \nName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedproperty.html#Type","title":"InferedProperty.Type","content":"InferedProperty.Type \nType \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html","title":"InferedType","content":"InferedType \n\n Represents inferred structural type. A type may be either primitive type\n (one of those listed by \u0060primitiveTypes\u0060) or it can be collection, \n (named) record and heterogeneous type. We also have \u0060Null\u0060 type (which is\n a subtype of all non-primitive types) and universal \u0060Top\u0060 type.\n\n  * For collection, we infer the types of different things that appear in \n    the collection and how many times they do.\n\n  * A heterogeneous type (sum type) is simply a choice containing one\n    of multiple different possibilities\n\n Why is collection not simply a list of Heterogeneous types? If we used that\n we would lose information about multiplicity and so we would not be able\n to generate nicer types!\n \nInferedType.DropOptionality \nDropOptionality \nInferedType.EnsuresHandlesMissingValues \nEnsuresHandlesMissingValues \nInferedType.IsOptional \nIsOptional \nInferedType.CanHaveEmptyValues \nCanHaveEmptyValues \nInferedType.Primitive \nPrimitive \nInferedType.Record \nRecord \nInferedType.Json \nJson \nInferedType.Collection \nCollection \nInferedType.Heterogeneous \nHeterogeneous \nInferedType.Null \nNull \nInferedType.Top \nTop"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#DropOptionality","title":"InferedType.DropOptionality","content":"InferedType.DropOptionality \nDropOptionality \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#EnsuresHandlesMissingValues","title":"InferedType.EnsuresHandlesMissingValues","content":"InferedType.EnsuresHandlesMissingValues \nEnsuresHandlesMissingValues \n\n When allowEmptyValues is true, we allow \u0022\u0022 and double.NaN, otherwise\n we make the type optional and use None instead.\n It\u0027s currently only true in CsvProvider when PreferOptionals is set to false\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#IsOptional","title":"InferedType.IsOptional","content":"InferedType.IsOptional \nIsOptional \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#CanHaveEmptyValues","title":"InferedType.CanHaveEmptyValues","content":"InferedType.CanHaveEmptyValues \nCanHaveEmptyValues \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Primitive","title":"InferedType.Primitive","content":"InferedType.Primitive \nPrimitive \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Record","title":"InferedType.Record","content":"InferedType.Record \nRecord \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Json","title":"InferedType.Json","content":"InferedType.Json \nJson \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Collection","title":"InferedType.Collection","content":"InferedType.Collection \nCollection \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Heterogeneous","title":"InferedType.Heterogeneous","content":"InferedType.Heterogeneous \nHeterogeneous \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Null","title":"InferedType.Null","content":"InferedType.Null \nNull \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Top","title":"InferedType.Top","content":"InferedType.Top \nTop \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html","title":"InferedTypeTag","content":"InferedTypeTag \n\n For heterogeneous types, this represents the tag that defines the form\n (that is either primitive type, collection, named record etc.)\n \nInferedTypeTag.NiceName \nNiceName \nInferedTypeTag.Code \nCode \nInferedTypeTag.ParseCode \nParseCode \nInferedTypeTag.Null \nNull \nInferedTypeTag.Number \nNumber \nInferedTypeTag.Boolean \nBoolean \nInferedTypeTag.String \nString \nInferedTypeTag.Json \nJson \nInferedTypeTag.DateTime \nDateTime \nInferedTypeTag.TimeSpan \nTimeSpan \nInferedTypeTag.DateTimeOffset \nDateTimeOffset \nInferedTypeTag.Guid \nGuid \nInferedTypeTag.Collection \nCollection \nInferedTypeTag.Heterogeneous \nHeterogeneous \nInferedTypeTag.Record \nRecord"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#NiceName","title":"InferedTypeTag.NiceName","content":"InferedTypeTag.NiceName \nNiceName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Code","title":"InferedTypeTag.Code","content":"InferedTypeTag.Code \nCode \n\n Converts tag to string code that can be passed to generated code\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#ParseCode","title":"InferedTypeTag.ParseCode","content":"InferedTypeTag.ParseCode \nParseCode \n\n Parses code returned by \u0027Code\u0027 member (to be used in provided code)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Null","title":"InferedTypeTag.Null","content":"InferedTypeTag.Null \nNull \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Number","title":"InferedTypeTag.Number","content":"InferedTypeTag.Number \nNumber \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Boolean","title":"InferedTypeTag.Boolean","content":"InferedTypeTag.Boolean \nBoolean \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#String","title":"InferedTypeTag.String","content":"InferedTypeTag.String \nString \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Json","title":"InferedTypeTag.Json","content":"InferedTypeTag.Json \nJson \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#DateTime","title":"InferedTypeTag.DateTime","content":"InferedTypeTag.DateTime \nDateTime \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#TimeSpan","title":"InferedTypeTag.TimeSpan","content":"InferedTypeTag.TimeSpan \nTimeSpan \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#DateTimeOffset","title":"InferedTypeTag.DateTimeOffset","content":"InferedTypeTag.DateTimeOffset \nDateTimeOffset \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Guid","title":"InferedTypeTag.Guid","content":"InferedTypeTag.Guid \nGuid \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Collection","title":"InferedTypeTag.Collection","content":"InferedTypeTag.Collection \nCollection \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Heterogeneous","title":"InferedTypeTag.Heterogeneous","content":"InferedTypeTag.Heterogeneous \nHeterogeneous \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Record","title":"InferedTypeTag.Record","content":"InferedTypeTag.Record \nRecord \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-primitiveinferedproperty.html","title":"PrimitiveInferedProperty","content":"PrimitiveInferedProperty \n\n Represents type information about a primitive property (used mainly in the CSV provider)\n This type captures the type, unit of measure and handling of missing values (if we\n infer that the value may be missing, we can generate option\u003CT\u003E or nullable\u003CT\u003E)\n \nPrimitiveInferedProperty.Create \nCreate \nPrimitiveInferedProperty.Create \nCreate \nPrimitiveInferedProperty.Name \nName \nPrimitiveInferedProperty.InferedType \nInferedType \nPrimitiveInferedProperty.RuntimeType \nRuntimeType \nPrimitiveInferedProperty.UnitOfMeasure \nUnitOfMeasure \nPrimitiveInferedProperty.TypeWrapper \nTypeWrapper"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-primitiveinferedproperty.html#Create","title":"PrimitiveInferedProperty.Create","content":"PrimitiveInferedProperty.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-primitiveinferedproperty.html#Create","title":"PrimitiveInferedProperty.Create","content":"PrimitiveInferedProperty.Create \nCreate \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-primitiveinferedproperty.html#Name","title":"PrimitiveInferedProperty.Name","content":"PrimitiveInferedProperty.Name \nName \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-primitiveinferedproperty.html#InferedType","title":"PrimitiveInferedProperty.InferedType","content":"PrimitiveInferedProperty.InferedType \nInferedType \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-primitiveinferedproperty.html#RuntimeType","title":"PrimitiveInferedProperty.RuntimeType","content":"PrimitiveInferedProperty.RuntimeType \nRuntimeType \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-primitiveinferedproperty.html#UnitOfMeasure","title":"PrimitiveInferedProperty.UnitOfMeasure","content":"PrimitiveInferedProperty.UnitOfMeasure \nUnitOfMeasure \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-primitiveinferedproperty.html#TypeWrapper","title":"PrimitiveInferedProperty.TypeWrapper","content":"PrimitiveInferedProperty.TypeWrapper \nTypeWrapper \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html","title":"TypeWrapper","content":"TypeWrapper \n\n Represents a transformation of a type\n \nTypeWrapper.None \nNone \nTypeWrapper.Option \nOption \nTypeWrapper.Nullable \nNullable"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html#None","title":"TypeWrapper.None","content":"TypeWrapper.None \nNone \n\n No transformation will be made to the type\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html#Option","title":"TypeWrapper.Option","content":"TypeWrapper.Option \nOption \n\n The type T will be converter to type T option\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html#Nullable","title":"TypeWrapper.Nullable","content":"TypeWrapper.Nullable \nNullable \n\n The type T will be converter to type Nullable\u003CT\u003E\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-implementation.html","title":"Implementation","content":"Implementation \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html","title":"Country","content":"Country \n\n Metadata for a Country\n \nCountry.Region \nRegion \nCountry.CapitalCity \nCapitalCity \nCountry.Name \nName \nCountry.Code \nCode"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html#Region","title":"Country.Region","content":"Country.Region \nRegion \n\n Get the region of the country \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html#CapitalCity","title":"Country.CapitalCity","content":"Country.CapitalCity \nCapitalCity \n\n Get the capital city of the country \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html#Name","title":"Country.Name","content":"Country.Name \nName \n\n Get the name of the country \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html#Code","title":"Country.Code","content":"Country.Code \nCode \n\n Get the WorldBank code of the country\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-countrycollection-1.html","title":"CountryCollection\u003C\u0027T\u003E","content":"CountryCollection\u003C\u0027T\u003E \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-icountry.html","title":"ICountry","content":"ICountry \n \nICountry.GetIndicators \nGetIndicators"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-icountry.html#GetIndicators","title":"ICountry.GetIndicators","content":"ICountry.GetIndicators \nGetIndicators \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-icountrycollection.html","title":"ICountryCollection","content":"ICountryCollection \n \nICountryCollection.GetCountry \nGetCountry"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-icountrycollection.html#GetCountry","title":"ICountryCollection.GetCountry","content":"ICountryCollection.GetCountry \nGetCountry \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicators.html","title":"IIndicators","content":"IIndicators \n \nIIndicators.AsyncGetIndicator \nAsyncGetIndicator \nIIndicators.GetIndicator \nGetIndicator"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicators.html#AsyncGetIndicator","title":"IIndicators.AsyncGetIndicator","content":"IIndicators.AsyncGetIndicator \nAsyncGetIndicator \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicators.html#GetIndicator","title":"IIndicators.GetIndicator","content":"IIndicators.GetIndicator \nGetIndicator \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicatorsdescriptions.html","title":"IIndicatorsDescriptions","content":"IIndicatorsDescriptions \n \nIIndicatorsDescriptions.GetIndicator \nGetIndicator"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicatorsdescriptions.html#GetIndicator","title":"IIndicatorsDescriptions.GetIndicator","content":"IIndicatorsDescriptions.GetIndicator \nGetIndicator \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregion.html","title":"IRegion","content":"IRegion \n \nIRegion.GetCountries \nGetCountries \nIRegion.GetIndicators \nGetIndicators"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregion.html#GetCountries","title":"IRegion.GetCountries","content":"IRegion.GetCountries \nGetCountries \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregion.html#GetIndicators","title":"IRegion.GetIndicators","content":"IRegion.GetIndicators \nGetIndicators \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregioncollection.html","title":"IRegionCollection","content":"IRegionCollection \n \nIRegionCollection.GetRegion \nGetRegion"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregioncollection.html#GetRegion","title":"IRegionCollection.GetRegion","content":"IRegionCollection.GetRegion \nGetRegion \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-itopic.html","title":"ITopic","content":"ITopic \n \nITopic.GetIndicators \nGetIndicators"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-itopic.html#GetIndicators","title":"ITopic.GetIndicators","content":"ITopic.GetIndicators \nGetIndicators \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-itopiccollection.html","title":"ITopicCollection","content":"ITopicCollection \n \nITopicCollection.GetTopic \nGetTopic"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-itopiccollection.html#GetTopic","title":"ITopicCollection.GetTopic","content":"ITopicCollection.GetTopic \nGetTopic \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iworldbankdata.html","title":"IWorldBankData","content":"IWorldBankData \n \nIWorldBankData.GetCountries \nGetCountries \nIWorldBankData.GetRegions \nGetRegions \nIWorldBankData.GetTopics \nGetTopics"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iworldbankdata.html#GetCountries","title":"IWorldBankData.GetCountries","content":"IWorldBankData.GetCountries \nGetCountries \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iworldbankdata.html#GetRegions","title":"IWorldBankData.GetRegions","content":"IWorldBankData.GetRegions \nGetRegions \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iworldbankdata.html#GetTopics","title":"IWorldBankData.GetTopics","content":"IWorldBankData.GetTopics \nGetTopics \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html","title":"Indicator","content":"Indicator \nIndicator data \nIndicator.TryGetValueAt \nTryGetValueAt \nIndicator.Years \nYears \nIndicator.Description \nDescription \nIndicator.IndicatorCode \nIndicatorCode \nIndicator.Name \nName \nIndicator.Source \nSource \nIndicator.Values \nValues \nIndicator.Item \nItem \nIndicator.Code \nCode"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#TryGetValueAt","title":"Indicator.TryGetValueAt","content":"Indicator.TryGetValueAt \nTryGetValueAt \n\n Get the indicator value for the given year, if present\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Years","title":"Indicator.Years","content":"Indicator.Years \nYears \n\n Get the years for which the indicator has values\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Description","title":"Indicator.Description","content":"Indicator.Description \nDescription \n\n Get the description of the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#IndicatorCode","title":"Indicator.IndicatorCode","content":"Indicator.IndicatorCode \nIndicatorCode \n\n Get the code for the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Name","title":"Indicator.Name","content":"Indicator.Name \nName \n\n Get the name of the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Source","title":"Indicator.Source","content":"Indicator.Source \nSource \n\n Get the source of the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Values","title":"Indicator.Values","content":"Indicator.Values \nValues \n\n Get the values for the indicator (without years)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Item","title":"Indicator.Item","content":"Indicator.Item \nItem \n\n Get the indicator value for the given year. If there\u0027s no data for that year, NaN is returned\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Code","title":"Indicator.Code","content":"Indicator.Code \nCode \n\n Get the code for the country or region of the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html","title":"IndicatorDescription","content":"IndicatorDescription \n\n Metadata for an Indicator\n \nIndicatorDescription.Description \nDescription \nIndicatorDescription.IndicatorCode \nIndicatorCode \nIndicatorDescription.Name \nName \nIndicatorDescription.Source \nSource \nIndicatorDescription.Code \nCode"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#Description","title":"IndicatorDescription.Description","content":"IndicatorDescription.Description \nDescription \n\n Get the description of the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#IndicatorCode","title":"IndicatorDescription.IndicatorCode","content":"IndicatorDescription.IndicatorCode \nIndicatorCode \n\n Get the code for the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#Name","title":"IndicatorDescription.Name","content":"IndicatorDescription.Name \nName \n\n Get the name of the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#Source","title":"IndicatorDescription.Source","content":"IndicatorDescription.Source \nSource \n\n Get the source of the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#Code","title":"IndicatorDescription.Code","content":"IndicatorDescription.Code \nCode \n\n Get the code for the topic of the indicator\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicators.html","title":"Indicators","content":"Indicators \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatorsdescriptions.html","title":"IndicatorsDescriptions","content":"IndicatorsDescriptions \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-region.html","title":"Region","content":"Region \n\n Metadata for a Region\n \nRegion.RegionCode \nRegionCode \nRegion.Name \nName"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-region.html#RegionCode","title":"Region.RegionCode","content":"Region.RegionCode \nRegionCode \n\n Get the WorldBank code for the region\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-region.html#Name","title":"Region.Name","content":"Region.Name \nName \n\n Get the name of the region\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-regioncollection-1.html","title":"RegionCollection\u003C\u0027T\u003E","content":"RegionCollection\u003C\u0027T\u003E \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topic.html","title":"Topic","content":"Topic \n\n Metadata for a Topic\n \nTopic.Description \nDescription \nTopic.Name \nName \nTopic.Code \nCode"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topic.html#Description","title":"Topic.Description","content":"Topic.Description \nDescription \n\n Get the description of the topic \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topic.html#Name","title":"Topic.Name","content":"Topic.Name \nName \n\n Get the name of the topic \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topic.html#Code","title":"Topic.Code","content":"Topic.Code \nCode \n\n Get the WorldBank code of the topic\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topiccollection-1.html","title":"TopicCollection\u003C\u0027T\u003E","content":"TopicCollection\u003C\u0027T\u003E \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-worldbankdata.html","title":"WorldBankData","content":"WorldBankData \n \nWorldBankData.( .ctor ) \n( .ctor )"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-worldbankdata.html#( .ctor )","title":"WorldBankData.( .ctor )","content":"WorldBankData.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsprojects.github.io/FSharp.Data/index.html","title":"FSharp.Data: Data Access Made Simple\r\n","content":"FSharp.Data: Data Access Made Simple\r\n================================\r\n\r\nThe FSharp.Data package implements core functionality to \r\naccess common data formats in your F# applications and scripts. It contains F# type \r\nproviders for working with structured file formats (CSV, HTML, JSON and XML) and helpers for parsing \r\nCSV, HTML and JSON files and for sending HTTP requests.\r\n\r\nThis library focuses on providing simple access to the structured documents \r\nand other data sources. \r\n\r\nFSharp.Data stems from [Types from data Making structured data first-class citizens in F#](http://tomasp.net/academic/papers/fsharp-data/) by Petricek, Syme and Guerra. This paper\r\nreceived a Distinguished Paper award at PLDI 2016 and was selected as one of three CACM Research\r\nHighlight in 2018. \uD83C\uDFC6\uD83C\uDFC6\uD83C\uDFC6\r\n\r\nThe package is available on \u003Ca href=\u0022https://nuget.org/packages/FSharp.Data\u0022\u003ENuGet\u003C/a\u003E. [![NuGet Status](//img.shields.io/nuget/v/FSharp.Data.svg?style=flat)](https://www.nuget.org/packages/FSharp.Data/)\r\n\r\n\r\n\r\n## Type Providers\r\n\r\n\u003Cdiv class=\u0022container-fluid\u0022 style=\u0022margin:15px 0px 15px 0px;\u0022\u003E\r\n    \u003Cdiv class=\u0022row-fluid\u0022\u003E\r\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\r\n        \u003Cdiv class=\u0022span10\u0022 id=\u0022anim-holder\u0022\u003E\r\n            \u003Ca id=\u0022lnk\u0022 href=\u0022images/json.gif\u0022\u003E\u003Cimg id=\u0022anim\u0022 src=\u0022images/json.gif\u0022 /\u003E\u003C/a\u003E\r\n        \u003C/div\u003E\r\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\r\n    \u003C/div\u003E\r\n\u003C/div\u003E\r\n\r\nThe FSharp.Data type providers for CSV, HTML, JSON and XML infer types from the structure of a sample \r\ndocument (or a document containing multiple samples). The structure is then used\r\nto provide easy to use type-safe access to documents that follow the same structure.\r\n\r\n * [CSV Type Provider](library/CsvProvider.html) - discusses the \u0060CsvProvider\u003C..\u003E\u0060 type\r\n * [HTML Type Provider](library/HtmlProvider.html) - discusses the \u0060HtmlProvider\u003C...\u003E\u0060 type\r\n * [JSON Type Provider](library/JsonProvider.html) - discusses the \u0060JsonProvider\u003C..\u003E\u0060 type\r\n * [XML Type Provider](library/XmlProvider.html) - discusses the \u0060XmlProvider\u003C..\u003E\u0060 type\r\n\r\nThe package also contains a type provider for accessing data from \r\n[the WorldBank](library/WorldBank.html).\r\n\r\n## Data Access Tools\r\n \r\nThe package contains functionality to simplify data access. In particular, it includes tools for HTTP web requests and \r\nCSV, HTML, and JSON parsers with simple dynamic API. For more information, see the \r\nfollowing topics:\r\n\r\n * [HTTP Utilities](library/Http.html) - discusses the \u0060Http\u0060 type that can be used\r\n   to send HTTP web requests.\r\n * [CSV Parser](library/CsvFile.html) - introduces the CSV parser \r\n   (without using the type provider)\r\n * [HTML Parser](library/HtmlParser.html) - introduces the HTML parser \r\n   (without using the type provider)\r\n * [JSON Parser](library/JsonValue.html) - introduces the JSON parser \r\n   (without using the type provider)\r\n\r\n## Tutorials\r\n\r\nThe following tutorials contain additional examples that \r\nuse multiple features together:\r\n\r\n * [Converting between JSON and XML](tutorials/JsonToXml.html) - implements two serialization \r\n   functions that convert between the standard .NET \u0060XElement\u0060 and the \u0060JsonValue\u0060 from FSharp.Data.\r\n   The tutorial demonstrates pattern matching on \u0060JsonValue\u0060.\r\n * [Anonymizing JSON](tutorials/JsonAnonymizer.html) - implements a function to anonymize a \u0060JsonValue\u0060 from FSharp.Data.\r\n   The tutorial demonstrates pattern matching on \u0060JsonValue\u0060.\r\n\r\nBelow is a brief practical demonstration of using FSharp.Data:\r\n\r\n\u003Cdiv style=\u0022padding-left:20px\u0022\u003E\u003Ciframe src=\u0022https://channel9.msdn.com/posts/Understanding-the-World-with-F/player\u0022 width=\u0022640\u0022 height=\u0022360\u0022 allowFullScreen frameBorder=\u00220\u0022\u003E\u003C/iframe\u003E\u003C/div\u003E\r\n\r\n## Reference Documentation\r\n\r\nThere\u0027s also [reference documentation](reference) available. Please note that everything under \r\nthe \u0060FSharp.Data.Runtime\u0060 namespace is not considered as part of the public API and can change without notice.\r\n\r\n## Contributing and license\r\n\r\nThe library is available under Apache 2.0. For more information see the \r\n[License file][license] in the GitHub repository. In summary, this means that you can \r\nuse the library for commercial purposes, fork it, and modify it as you wish. FSharp.Data is made possible by the volunteer work [of more than a dozen \r\ncontributors](https://github.com/fsharp/FSharp.Data/graphs/contributors) and we\u0027re open to \r\ncontributions from anyone. If you want to help out but don\u0027t know where to start, you \r\ncan take one of the [Up-For-Grabs](https://github.com/fsharp/FSharp.Data/issues?labels=up-for-grabs\u0026state=open) \r\nissues, or help to improve the documentation.\r\n\r\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \r\nthe project and submit pull requests. If you\u0027re adding new public API\u0027s, please also \r\ncontribute [samples][samples] to the docs.\r\n\r\n  [source]: https://github.com/fsharp/FSharp.Data/zipball/master\r\n  [compiled]: https://github.com/fsharp/FSharp.Data/zipball/release\r\n  [samples]: https://github.com/fsprojects/FSharp.Data/tree/master/docs/\r\n  [gh]: https://github.com/fsharp/FSharp.Data\r\n  [issues]: https://github.com/fsharp/FSharp.Data/issues\r\n  [license]: https://github.com/fsharp/FSharp.Data/blob/master/LICENSE.md\r\n  [contributing]: https://github.com/fsharp/FSharp.Data/blob/master/CONTRIBUTING.md\r\n  [fsharp-oss]: http://groups.google.com/group/fsharp-opensource\r\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/CsvFile.html","title":"CSV Parser\r\n","content":"(**\n---\ncategory: Utilities\ncategoryindex: 2\nindex: 1\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(**\n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# CSV Parser\n\nThe F# [CSV Type Provider](CsvProvider.html) is built on top of an efficient CSV parser written\nin F#. There\u0027s also a simple API that can be used to access values dynamically.\n\nWhen working with well-defined CSV documents, it is easier to use the \n[type provider](CsvProvider.html), but in a more dynamic scenario or when writing\nquick and simple scripts, the parser might be a simpler option.\n\n## Loading CSV documents\n\nTo load a sample CSV document, we first need to reference the \u0060FSharp.Data\u0060 package. \n*)\n\nopen FSharp.Data\n\n(**\nThe \u0060FSharp.Data\u0060 namespace contains the \u0060cref:T:FSharp.Data.CsvFile\u0060 type that provides two static methods\nfor loading data. The \u0060cref:M:FSharp.Data.CsvFile.Parse\u0060 method can be used if we have the data in a \u0060string\u0060 value.\nThe \u0060cref:M:FSharp.Data.CsvFile.Load\u0060 method allows reading the data from a file or from a web resource (and there\u0027s\nalso an asynchronous \u0060cref:M:FSharp.Data.CsvFile.AsyncLoad\u0060 version). The following sample calls \u0060cref:M:FSharp.Data.CsvFile.Load\u0060 with a URL that\npoints to a live CSV file on the Yahoo finance web site:\n*)\n \n// Download the stock prices\nlet msft = CsvFile.Load(__SOURCE_DIRECTORY__ \u002B \u0022/../data/MSFT.csv\u0022).Cache()\n\n// Print the prices in the HLOC format\nfor row in msft.Rows do\n  printfn \u0022HLOC: (%s, %s, %s)\u0022 \n    (row.GetColumn \u0022High\u0022) (row.GetColumn \u0022Low\u0022) (row.GetColumn \u0022Date\u0022)\n\n(**\n\nNote that unlike \u0060CsvProvider\u0060, \u0060cref:T:FSharp.Data.CsvFile\u0060 works in streaming mode for performance reasons, which means\nthat \u0060\u0060cref:P:FSharp.Data.Runtime.CsvFile\u00601.Rows\u0060\u0060 can only be iterated once. If you need to iterate multiple times, use the \u0060\u0060cref:M:FSharp.Data.Runtime.CsvFile\u00601.Cache\u0060\u0060 method, \nbut please note that this will increase memory usage and should not be used in large datasets.\n\n## Using CSV extensions\n\nNow we look at a number of extensions that become available after \nopening the \u0060cref:T:FSharp.Data.CsvExtensionsModule\u0060 namespace. Once opened, we can write:\n\n * \u0060row?column\u0060 uses the dynamic operator to obtain the column value named \u0060column\u0060;\n    alternatively, you can also use an indexer \u0060row.[column]\u0060.\n * \u0060value.AsBoolean()\u0060 returns the value as boolean if it is either \u0060true\u0060 or \u0060false\u0060 (see \u0060cref:M:FSharp.Data.StringExtensions.AsBoolean\u0060)\n * \u0060value.AsInteger()\u0060 returns the value as integer if it is numeric and can be\n   converted to an integer; \u0060value.AsInteger64()\u0060, \u0060value.AsDecimal()\u0060 and\n   \u0060value.AsFloat()\u0060 behave similarly.\n * \u0060value.AsDateTime()\u0060 returns the value as a \u0060DateTime\u0060 value using either the\n    [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format, or using the \n    \u0060\\/Date(...)\\/\u0060 JSON format containing number of milliseconds since 1/1/1970.\n * \u0060value.AsDateTimeOffset()\u0060 parses the string as a \u0060DateTimeOffset\u0060 value using either the\n    [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format, or using the \n    \u0060\\/Date(...[\u002B/-]offset)\\/\u0060 JSON format containing number of milliseconds since 1/1/1970, \n    [\u002B/-] the 4 digit offset. Example- \u0060\\/Date(1231456\u002B1000)\\/\u0060.\n * \u0060value.AsTimeSpan()\u0060 parses the string as a \u0060TimeSpan\u0060 value.\n * \u0060value.AsGuid()\u0060 returns the value as a \u0060Guid\u0060 value.\n\nMethods that may need to parse a numeric value or date (such as \u0060AsFloat\u0060 and\n\u0060AsDateTime\u0060) receive an optional culture parameter.\n\nThe following example shows how to process the sample previous CSV sample using these extensions:\n*)\n\nopen FSharp.Data.CsvExtensions\n\nfor row in msft.Rows do\n  printfn \u0022HLOC: (%f, %M, %O)\u0022 \n    (row.[\u0022High\u0022].AsFloat()) (row?Low.AsDecimal()) (row?Date.AsDateTime())\n\n(**\n\n## Transforming CSV files\n\nIn addition to reading, \u0060\u0060cref:T:FSharp.Data.Runtime.CsvFile\u00601\u0060\u0060 also has support for transforming CSV files. The operations\navailable are \u0060\u0060cref:M:FSharp.Data.Runtime.CsvFile\u00601.Filter\u0060\u0060, \u0060Take\u0060, \u0060TakeWhile\u0060, \u0060Skip\u0060, \u0060SkipWhile\u0060, and \u0060Truncate\u0060. After transforming\nyou can save the results by using one of the overloads of the \u0060Save\u0060 method. You can choose different\nseparator and quote characters when saving.\n*)\n\n// Saving the first 10 stock prices where the closing price is higher than the opening price in TSV format:\nmsft.Filter(fun row -\u003E row?Close.AsFloat() \u003E row?Open.AsFloat())\n    .Truncate(10)\n    .SaveToString(\u0027\\t\u0027)\n\n(**\n\n## Related articles\n\n * [CSV Type Provider](CsvProvider.html) - discusses F# type provider\n   that provides type-safe access to CSV data\n * API Reference: \u0060cref:T:FSharp.Data.CsvFile\u0060\n * API Reference: \u0060cref:T:FSharp.Data.CsvRow\u0060\n * API Reference: \u0060cref:T:FSharp.Data.CsvExtensionsModule\u0060\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/CsvProvider.html","title":"CSV Type Provider\r\n","content":"(**\n---\ncategory: Type Providers\ncategoryindex: 1\nindex: 1\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(**\n\n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# CSV Type Provider\n\nThis article demonstrates how to use the CSV type provider to read CSV files\nin a statically typed way.\n\nThe CSV type provider takes a sample CSV as input and generates a type based on the data\npresent on the columns of that sample. The column names are obtained from the first\n(header) row, and the types are inferred from the values present on the subsequent rows.\n\n## Introducing the provider\n\n\u003Cdiv class=\u0022container-fluid\u0022 style=\u0022margin:15px 0px 15px 0px;\u0022\u003E\n    \u003Cdiv class=\u0022row-fluid\u0022\u003E\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n        \u003Cdiv class=\u0022span10\u0022 id=\u0022anim-holder\u0022\u003E\n            \u003Ca id=\u0022lnk\u0022 href=\u0022../images/csv.gif\u0022\u003E\u003Cimg id=\u0022anim\u0022 src=\u0022../images/csv.gif\u0022 /\u003E\u003C/a\u003E\n        \u003C/div\u003E\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n    \u003C/div\u003E\n\u003C/div\u003E\n\nThe type provider is located in the \u0060FSharp.Data.dll\u0060 assembly. Assuming the package is referenged\nwe can access its namespace as follows:\n*)\n\nopen FSharp.Data\n\n(**\n\n### Parsing stock prices\n\nThe Yahoo Finance web site provides daily stock prices in a CSV format that has the\nfollowing structure (you can find a larger example in the [\u0060data/MSFT.csv\u0060](../data/MSFT.csv) file):\n\n    [lang=text]\n    Date,Open,High,Low,Close,Volume,Adj Close\n    2012-01-27,29.45,29.53,29.17,29.23,44187700,29.23\n    2012-01-26,29.61,29.70,29.40,29.50,49102800,29.50\n    2012-01-25,29.07,29.65,29.07,29.56,59231700,29.56\n    2012-01-24,29.47,29.57,29.18,29.34,51703300,29.34\n\nAs usual with CSV files, the first row contains the headers (names of individual columns)\nand the next rows define the data. We can pass reference to the file to \u0060cref:T:FSharp.Data.CsvProvider\u0060 to\nget a strongly typed view of the file:\n*)\n\ntype Stocks = CsvProvider\u003C\u0022../data/MSFT.csv\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\n\n(**\nThe generated type provides two static methods for loading data. The \u0060Parse\u0060 method can be\nused if we have the data in a \u0060string\u0060 value. The \u0060Load\u0060 method allows reading the data from\na file or from a web resource (and there\u0027s also an asynchronous \u0060AsyncLoad\u0060 version). We could also\nhave used a web URL instead of a local file in the sample parameter of the type provider.\nThe following sample calls the \u0060Load\u0060 method with an URL that points to a live CSV file on the Yahoo finance web site:\n*)\n\n// Download the stock prices\nlet msft = Stocks.Load(__SOURCE_DIRECTORY__ \u002B \u0022/../data/MSFT.csv\u0022).Cache()\n\n// Look at the most recent row. Note the \u0027Date\u0027 property\n// is of type \u0027DateTime\u0027 and \u0027Open\u0027 has a type \u0027decimal\u0027\nlet firstRow = msft.Rows |\u003E Seq.head\nlet lastDate = firstRow.Date\nlet lastOpen = firstRow.Open\n\n// Print the prices in the HLOC format\nfor row in msft.Rows do\n  printfn \u0022HLOC: (%A, %A, %A, %A)\u0022 row.High row.Low row.Open row.Close\n\n(**\nThe generated type has a property \u0060Rows\u0060 that returns the data from the CSV file as a\ncollection of rows. We iterate over the rows using a \u0060for\u0060 loop. As you can see the\n(generated) type for rows has properties such as \u0060High\u0060, \u0060Low\u0060 and \u0060Close\u0060 that correspond\nto the columns in the CSV file.\n\nAs you can see, the type provider also infers types of individual rows. The \u0060Date\u0060\nproperty is inferred to be a \u0060DateTime\u0060 (because the values in the sample file can all\nbe parsed as dates) while HLOC prices are inferred as \u0060decimal\u0060.\n\n### Charting stock prices\n\nWe can use the [XPlot.Plotly](https://fslab.org/XPlot/) library to draw a simple line chart showing how the price\nof MSFT stocks changes:\n*)\n\n// Load the XPlot.Plotly library\n#r \u0022nuget: XPlot.Plotly, Version=3.0.1\u0022\nopen XPlot.Plotly\nopen System\n\n(*** define-output:chart1 ***)\n\n// Visualize the stock prices\n[ for row in msft.Rows -\u003E row.Date, row.Open ]\n|\u003E Chart.Line\n\n(*** include-it:chart1 ***)\n\n(**\nAs one more example, we use the \u0060Candlestick\u0060 chart to get a more detailed look at the\ndata over the last month:\n*)\n\n// Get last months\u0027 prices in HLOC format\nlet recent =\n  [ for row in msft.Rows do\n      if row.Date \u003E DateTime.Parse(\u00229 Sep 2017\u0022) then\n        yield row.Date, row.High, row.Low, row.Open, row.Close ]\n\n(*** define-output:chart2 ***)\n\n// Visualize prices using Candlestick chart\nChart.Candlestick(recent)\n\n(*** include-it:chart2 ***)\n\n(**\n## Using units of measure\n\nAnother interesting feature of the CSV type provider is that it supports F# units of measure.\nIf the header includes the name or symbol of one of the standard SI units, then the generated type\nreturns values annotated with the appropriate unit.\n\nIn this section, we use a simple file [\u0060data/SmallTest.csv\u0060](../data/SmallTest.csv) which\nlooks as follows:\n\n    [lang=text]\n    Name,  Distance (metre), Time (s)\n    First, 50.0,             3.7\n\nAs you can see, the second and third columns are annotated with \u0060metre\u0060 and \u0060s\u0060,\nrespectively. To use units of measure in our code, we need to open the namespace with\nstandard unit names. Then we pass the \u0060SmallTest.csv\u0060 file to the type provider as\na static argument. Also note that in this case we\u0027re using the same data at runtime,\nso we use the \u0060GetSample\u0060 method instead of calling \u0060Load\u0060 and passing the same parameter again.\n*)\n\nlet small = CsvProvider\u003C\u0022../data/SmallTest.csv\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E.GetSample()\n\n(**\nWe can also use the default constructor instead of the \u0060GetSample\u0060 static method:\n*)\n\nlet small2 = new CsvProvider\u003C\u0022../data/SmallTest.csv\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E()\n\n(**\nbut the VisualStudio IntelliSense for the type provider parameters doesn\u0027t work when we use a default\nconstructor for a type provider, so we\u0027ll keep using \u0060GetSample\u0060 instead.\n\nAs in the previous example, the \u0060small\u0060 value exposes the rows using the \u0060Rows\u0060 property.\nThe generated properties \u0060Distance\u0060 and \u0060Time\u0060 are now annotated with units. Look at the\nfollowing simple calculation:\n*)\n\nopen FSharp.Data.UnitSystems.SI.UnitNames\n\nfor row in small.Rows do\n  let speed = row.Distance / row.Time\n  if speed \u003E 15.0M\u003Cmetre/second\u003E then\n    printfn \u0022%s (%A m/s)\u0022 row.Name speed\n\n(**\nThe numerical values of \u0060Distance\u0060 and \u0060Time\u0060 are both inferred as \u0060decimal\u0060 (because they\nare small enough). Thus the type of \u0060speed\u0060 becomes \u0060decimal\u003Cmetre/second\u003E\u0060. The compiler\ncan then statically check that we\u0027re not comparing incompatible values - e.g. number in\nmeters per second against a value in kilometres per hour.\n\n## Custom separators and tab-separated files\n\nBy default, the CSV type provider uses comma (\u0060,\u0060) as a separator. However, CSV\nfiles sometime use a different separator character than \u0060,\u0060. In some European\ncountries, \u0060,\u0060 is already used as the numeric decimal separator, so a semicolon (\u0060;\u0060) is used\ninstead to separate CSV columns. The \u0060CsvProvider\u0060 has an optional \u0060Separator\u0060 static parameter\nwhere you can specify what to use as separator. This means that you can consume\nany textual tabular format. Here is an example using \u0060;\u0060 as a separator:\n*)\n\ntype AirQuality = CsvProvider\u003C\u0022../data/AirQuality.csv\u0022, \u0022;\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\n\nlet airQuality = new AirQuality()\n\nfor row in airQuality.Rows do\n  if row.Month \u003E 6 then\n    printfn \u0022Temp: %i Ozone: %f \u0022 row.Temp row.Ozone\n\n(**\nThe air quality dataset ([\u0060data/AirQuality.csv\u0060](../data/AirQuality.csv)) is used in many\nsamples for the Statistical Computing language R. A short description of the dataset can be found\n[in the R language manual](http://stat.ethz.ch/R-manual/R-devel/library/datasets/html/airquality.html).\n\nIf you are parsing a tab-separated file that uses \u0060\\t\u0060 as the separator, you can also\nspecify the separator explicitly. However, if you\u0027re using an url or file that has\nthe \u0060.tsv\u0060 extension, the type provider will use \u0060\\t\u0060 by default. In the following example,\nwe also set \u0060IgnoreErrors\u0060 static parameter to \u0060true\u0060 so that lines with incorrect number of elements\nare automatically skipped (the sample file ([\u0060data/MortalityNY.csv\u0060](../data/MortalityNY.tsv)) contains additional unstructured data at the end):\n*)\n\nlet mortalityNy = CsvProvider\u003C\u0022../data/MortalityNY.tsv\u0022, IgnoreErrors=true, ResolutionFolder=__SOURCE_DIRECTORY__\u003E.GetSample()\n\n// Find the name of a cause based on code\n// (Pedal cyclist injured in an accident)\nlet cause = mortalityNy.Rows |\u003E Seq.find (fun r -\u003E\n  r.\u0060\u0060Cause of death Code\u0060\u0060 = \u0022V13.4\u0022)\n\n// Print the number of injured cyclists\nprintfn \u0022CAUSE: %s\u0022 cause.\u0060\u0060Cause of death\u0060\u0060\nfor r in mortalityNy.Rows do\n  if r.\u0060\u0060Cause of death Code\u0060\u0060 = \u0022V13.4\u0022 then\n    printfn \u0022%s (%d cases)\u0022 r.County r.Count\n\n(**\n\nFinally, note that it is also possible to specify multiple different separators\nfor the \u0060CsvProvider\u0060. This might be useful if a file is irregular and contains\nrows separated by either semicolon or a colon. You can use:\n\u0060CsvProvider\u003C\u0022../data/AirQuality.csv\u0022, Separator=\u0022;,\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\u0060.\n\n## Missing values\n\nIt is quite common in statistical datasets for some values to be missing. If\nyou open the [\u0060data/AirQuality.csv\u0060](../data/AirQuality.csv) file you will see\nthat some values for the ozone observations are marked \u0060#N/A\u0060. Such values are\nparsed as float and will be marked with \u0060Double.NaN\u0060 in F#. The values \n\u0060NaN\u0060, \u0060NA\u0060, \u0060N/A\u0060, \u0060#N/A\u0060, \u0060:\u0060, \u0060-\u0060, \u0060TBA\u0060, and \u0060TBD\u0060 \nare recognized as missing values by default, but you can customize it by specifying\nthe \u0060MissingValues\u0060 static parameter of \u0060CsvProvider\u0060 as a comma-separated string. \nFor example, to ignore \u0060this\u0060 and \u0060that\u0060 we could do: \n*)\n\nCsvProvider\u003C\u0022X,Y,Z\\nthis,that,1.0\u0022,\n            MissingValues=\u0022this,that\u0022\u003E.GetSample().Rows\n(*** include-it ***)            \n\n(**\n\nThe following snippet calculates the mean of the ozone observations\nexcluding the \u0060Double.NaN\u0060 values. We first obtain the \u0060Ozone\u0060 property for\neach row, then remove missing values and then use the standard \u0060Seq.average\u0060 function:\n*)\n\nlet mean =\n  airQuality.Rows\n  |\u003E Seq.toArray\n  |\u003E Array.map (fun row -\u003E row.Ozone)\n  |\u003E Array.filter (fun elem -\u003E not (Double.IsNaN elem))\n  |\u003E Array.average\n\n(**\n\nIf the sample doesn\u0027t have missing values on all columns, but at runtime missing values could\nappear anywhere, you can set the static parameter \u0060AssumeMissingValues\u0060 to \u0060true\u0060 in order to force \u0060CsvProvider\u0060\nto assume missing values can occur in any column.\n\n## Controlling the column types\n\nBy default, the CSV type provider checks the first 1000 rows to infer the types, but you can customize\nit by specifying the \u0060InferRows\u0060 static parameter of \u0060CsvProvider\u0060. If you specify 0 the entire file will be used.\n\nColumns with only \u00600\u0060, \u00601\u0060, \u0060Yes\u0060, \u0060No\u0060, \u0060True\u0060, or \u0060False\u0060 will be set to \u0060bool\u0060. Columns with numerical values\nwill be set to either \u0060int\u0060, \u0060int64\u0060, \u0060decimal\u0060, or \u0060float\u0060, in that order of preference.\n\nIf a value is missing in any row, by default the CSV type provider will infer a nullable (for \u0060int\u0060 and \u0060int64\u0060) or an optional\n(for \u0060bool\u0060, \u0060DateTime\u0060 and \u0060Guid\u0060). When a \u0060decimal\u0060 would be inferred but there are missing values, we will infer a\n\u0060float\u0060 instead, and use \u0060Double.NaN\u0060 to represent those missing values. The \u0060string\u0060 type is already inherently nullable,\nso by default we won\u0027t generate a \u0060string option\u0060. If you prefer to use optionals in all cases, you can set the static parameter\n\u0060PreferOptionals\u0060 to \u0060true\u0060. In that case you\u0027ll never get an empty string or a \u0060Double.NaN\u0060 and will always get a \u0060None\u0060 instead.\n\nIf you have other preferences, e.g. if you want a column to be a \u0060float\u0060 instead of a \u0060decimal\u0060,\nyou can override the default behaviour by specifying the types in the header column between braces, similar to what can be done to\nspecify the units of measure. This will override both \u0060AssumeMissingValues\u0060 and \u0060PreferOptionals\u0060. The valid types are:\n\n* \u0060int\u0060\n* \u0060int?\u0060\n* \u0060int option\u0060\n* \u0060int64\u0060\n* \u0060int64?\u0060\n* \u0060int64 option\u0060\n* \u0060bool\u0060\n* \u0060bool?\u0060\n* \u0060bool option\u0060\n* \u0060float\u0060\n* \u0060float?\u0060\n* \u0060float option\u0060\n* \u0060decimal\u0060\n* \u0060decimal?\u0060\n* \u0060decimal option\u0060\n* \u0060date\u0060\n* \u0060date?\u0060\n* \u0060date option\u0060\n* \u0060datetimeoffset\u0060\n* \u0060datetimeoffset?\u0060\n* \u0060datetimeoffset option\u0060\n* \u0060guid\u0060\n* \u0060guid?\u0060\n* \u0060guid option\u0060\n* \u0060string\u0060\n* \u0060string option\u0060.\n\nYou can also specify both the type and a unit (e.g \u0060float\u003Cmetre\u003E\u0060). Example:\n\n    [lang=text]\n    Name,  Distance (decimal?\u003Cmetre\u003E), Time (float)\n    First, 50,                        3\n\nAdditionally, you can also specify some or all the types in the \u0060Schema\u0060 static parameter of \u0060CsvProvider\u0060. Valid formats are:\n\n* \u0060Type\u0060\n* \u0060Type\u003CMeasure\u003E\u0060\n* \u0060Name (Type)\u0060\n* \u0060Name (Type\u003CMeasure\u003E)\u0060\n\nWhat\u0027s specified in the \u0060Schema\u0060 static parameter will always take precedence to what\u0027s specified in the column headers.\n\nIf the first row of the file is not a header row, you can specify the \u0060HasHeaders\u0060 static parameter to \u0060false\u0060 in order to\nconsider that row as a data row. In that case, the columns will be named \u0060Column1\u0060, \u0060Column2\u0060, etc..., unless the\nnames are overridden using the \u0060Schema\u0060 parameter. Note that you can override only the name in the \u0060Schema\u0060 parameter\nand still have the provider infer the type for you. Example:\n*)\ntype OneTwoThree =\n  CsvProvider\u003C\u00221,2,3\u0022, HasHeaders = false, Schema = \u0022Duration (float\u003Csecond\u003E),foo,float option\u0022\u003E\n\nlet csv = OneTwoThree.GetSample()\nfor row in csv.Rows do\n  printfn \u0022%f %d %f\u0022\n    (row.Duration/1.0\u003Csecond\u003E)\n    row.Foo\n    (defaultArg row.Column3 1.0)\n(**\n\nYou don\u0027t need to override all the columns, you can skip the ones to leave as default.\nFor example, in the titanic training dataset from Kaggle ([\u0060data/Titanic.csv\u0060](../data/Titanic.csv)),\nif you want to rename the 3rd column (the \u0060PClass\u0060 column) to \u0060Passenger Class\u0060 and override the\n6th column (the \u0060Fare\u0060 column) to be a \u0060float\u0060 instead of a \u0060decimal\u0060, you can define only that, and leave\nthe other columns blank in the schema (you also don\u0027t need to add all the trailing commas).\n\n*)\ntype Titanic1 =\n  CsvProvider\u003C\u0022../data/Titanic.csv\u0022,\n              Schema=\u0022,,Passenger Class,,,float\u0022,\n              ResolutionFolder=__SOURCE_DIRECTORY__\u003E\n\nlet titanic1 = Titanic1.GetSample()\nfor row in titanic1.Rows do\n  printfn \u0022%s Class = %d Fare = %g\u0022\n    row.Name row.\u0060\u0060Passenger Class\u0060\u0060 row.Fare\n\n(**\n\nAlternatively, you can rename and override the type of any column by name instead of by position:\n\n*)\ntype Titanic2 =\n  CsvProvider\u003C\u0022../data/Titanic.csv\u0022,\n              Schema=\u0022Fare=float,PClass-\u003EPassenger Class\u0022,\n              ResolutionFolder=__SOURCE_DIRECTORY__\u003E\n\nlet titanic2 = Titanic2.GetSample()\nfor row in titanic2.Rows do\n  printfn \u0022%s Class = %d Fare = %g\u0022\n    row.Name row.\u0060\u0060Passenger Class\u0060\u0060 row.Fare\n(**\n\nYou can even mix and match the two syntaxes like this \u0060Schema=\u0022int64,DidSurvive,PClass-\u003EPassenger Class=string\u0022\u0060\n\n## Transforming CSV files\n\nIn addition to reading, \u0060CsvProvider\u0060 also has support for transforming the row collection of CSV files. The operations\navailable are \u0060Filter\u0060, \u0060Take\u0060, \u0060TakeWhile\u0060, \u0060Skip\u0060, \u0060SkipWhile\u0060, and \u0060Truncate\u0060. All these operations\npreserve the schema, so after transforming you can save the results by using one of the overloads of\nthe \u0060Save\u0060 method. You can also use the \u0060SaveToString()\u0060 to get the output directly as a string.\n\n*)\n\n// Saving the first 10 rows that don\u0027t have missing values to a new csv file\nairQuality\n  .Filter(fun row -\u003E\n    not (Double.IsNaN row.Ozone) \u0026\u0026\n    not (Double.IsNaN row.\u0060\u0060Solar.R\u0060\u0060))\n  .Truncate(10)\n  .SaveToString()\n\n(**\n\nIt\u0027s also possible to transform the columns themselves by using \u0060Map\u0060 and the constructor for the \u0060Row\u0060 type.\n\n*)\n\nlet doubleOzone =\n  airQuality.Map(fun row -\u003E\n    AirQuality.Row\n      ( row.Ozone * 2.0, row.\u0060\u0060Solar.R\u0060\u0060,\n        row.Wind, row.Temp, row.Month, row.Day))\n\n(**\n\nYou can also append new rows, either by creating them directly as in the previous example, or by parsing them from a string.\n\n*)\n\nlet newRows =\n  AirQuality.ParseRows\n    (\u0022\u0022\u002241;190;7.4;67;5;1\n        36;118;8;72;5;2\u0022\u0022\u0022)\n\nlet airQualityWithExtraRows =\n  airQuality.Append newRows\n\n(**\n\nIt\u0027s even possible to create csv files without parsing at all:\n\n*)\n\ntype MyCsvType =\n  CsvProvider\u003CSchema = \u0022A (int), B (string), C (date option)\u0022,\n              HasHeaders=false\u003E\n\nlet myRows =\n  [ MyCsvType.Row(1, \u0022a\u0022, None)\n    MyCsvType.Row(2, \u0022B\u0022, Some DateTime.Now) ]\n\nlet myCsv = new MyCsvType(myRows)\nmyCsv.SaveToString()\n\n(**\n\n## Handling big datasets\n\nBy default, the rows are cached so you can iterate over the \u0060Rows\u0060 property multiple times without worrying.\nBut if you will only iterate once, you can disable caching by setting the \u0060CacheRows\u0060 static parameter of \u0060CsvProvider\u0060\nto \u0060false\u0060. If the number of rows is very big, you have to do this otherwise you may exhaust the memory.\nYou can still cache the data at some point by using the \u0060Cache\u0060 method, but only do that if you have already\ntransformed the dataset to be smaller.\n*)\n\n(**\n## Related articles\n\n * [Using JSON provider in a library](JsonProvider.html#jsonlib) also applies to CSV type provider\n * [CSV Parser](CsvFile.html) - provides more information about\n   working with CSV documents dynamically.\n * [API Reference: CsvProvider type provider](../reference/fsharp-data-csvprovider.html)\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/HtmlCssSelectors.html","title":"HTML CSS selectors\r\n","content":"(**\n---\ncategory: Utilities\ncategoryindex: 1\nindex: 2\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(** \n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# HTML CSS selectors\n\nThis article demonstrates how to use HTML CSS selectors to browse the DOM of parsed HTML files.\nWe use the \u0060cref:T:FSharp.Data.HtmlDocument\u0060 type and associated \u0060cref:T:FSharp.Data.HtmlDocumentModule\u0060 module \nand \u0060cref:T:FSharp.Data.HtmlDocumentExtensions\u0060 extensions.\n\nUsage of CSS selectors is a very natural way to parse HTML when we come from Web developments.\nThe HTML CSS selectors are based on the [JQuery selectors](https://api.jquery.com/category/selectors/).\nTo use CSS selectors, reference the FSharp.Data package. You then need to open \u0060FSharp.Data\u0060 namespace, which\nautomatically exposes extension methods that implement the CSS selectors.\n*)\nopen FSharp.Data\n\n(**\n\n## Practice 1: Search for FSharp.Data on Google\n\nWe will parse links of a Google to search for \u0060FSharp.Data\u0060 like in the [HTML Parser](HtmlParser.html) article.\n*)\nlet googleUrl = \u0022http://www.google.co.uk/search?q=FSharp.Data\u0022\nlet doc = HtmlDocument.Load(googleUrl)\n\n(**\nTo make sure we extract search results only, we will parse links in the \u0060\u003Cdiv\u003E\u0060 with id \u0060search\u0060.\nThen we can , for example, use the direct descendants selector to select another \u0060\u003Cdiv\u003E\u0060 with the \nid \u0060ires\u0060. The CSS selector to do so is \u0060div#search \u003E div#ires\u0060:\n*)\nlet links = \n  doc.CssSelect(\u0022div#search \u003E div#ires div.g \u003E div.s div.kv cite\u0022)\n  |\u003E List.map (fun n -\u003E \n      match n.InnerText() with\n      | t when (t.StartsWith(\u0022https://\u0022) || t.StartsWith(\u0022http://\u0022))-\u003E t\n      | t -\u003E \u0022http://\u0022 \u002B t )\n\n(**\nThe rest of the selector (written as \u0060li.g \u003E div.s\u0060) skips the first 4 sub-results targeting GitHub pages,\nso we only extract proper links.\n\nNow we might want the pages titles associated with their URLs. To do this, we can use the \u0060List.zip\u0060 function:\n*)\n\nlet searchResults = \n    doc.CssSelect(\u0022div#search \u003E div#ires div.g \u003E h3\u0022)\n    |\u003E List.map (fun n -\u003E n.InnerText())\n    |\u003E List.zip (links)\n\n(**\n\n## Practice 2: Search F# books on Google Books\n\nWe will parse links of the Google Books web site, searching for \u0060F#\u0060. After downloading the document,\nwe simply ensure to match good links with their CSS\u0027s styles and DOM\u0027s hierachy. In case of Google Books,\nwe need to look for \u0060\u003Cdiv\u003E\u0060 with \u0060class\u0060 set to \u0060g\u0060, then for \u0060\u003Ch3\u003E\u0060 with CSS class \u0060r\u0060 and then for all \u0060\u003Ca\u003E\u0060 elements:\n*)\nlet fsys = \u0022https://www.google.com/search?tbm=bks\u0026q=F%23\u0022\nlet doc2 = HtmlDocument.Load(fsys)\n\nlet books = \n    doc2.CssSelect(\u0022div.g h3.r a\u0022)\n    |\u003E List.map(fun a -\u003E a.InnerText().Trim(), a.AttributeValue(\u0022href\u0022))\n    |\u003E List.filter(fun (title, href) -\u003E title.Contains(\u0022F#\u0022))\n\n(**\n## JQuery selectors\n\nThis section provides a quick overview of the supported CSS selectors. If you are familiar \nwith CSS selectors in JQuery, then you will see that most of the features are the same.\nYou can also refer to the table below for a complete list of supported selectors.\n\n### Attribute Contains Prefix Selector\n\nFinds all links with an english hreflang attribute.\n*)\nlet englishDoc = HtmlDocument.Parse(\u0022\u0022\u0022\n  \u003C!doctype html\u003E\n  \u003Chtml lang=\u0022en\u0022\u003E\n  \u003Cbody\u003E\n    \u003Ca href=\u0022example.html\u0022 hreflang=\u0022en\u0022\u003ESome text\u003C/a\u003E\n    \u003Ca href=\u0022example.html\u0022 hreflang=\u0022en-UK\u0022\u003ESome other text\u003C/a\u003E\n    \u003Ca href=\u0022example.html\u0022 hreflang=\u0022english\u0022\u003Ewill not be outlined\u003C/a\u003E\n  \u003C/body\u003E\n  \u003C/html\u003E\u0022\u0022\u0022)\n\nlet englishLinks = \n  englishDoc.CssSelect(\u0022a[hreflang|=en]\u0022)\n(**\n### Attribute Contains Selector\n\nFinds all inputs with a name containing \u0022man\u0022. This includes results where \u0022man\u0022 is a substring:\n*)\nlet manDoc = HtmlDocument.Parse(\u0022\u0022\u0022\n  \u003C!doctype html\u003E\n  \u003Chtml lang=\u0022en\u0022\u003E\n  \u003Cbody\u003E\n    \u003Cinput name=\u0022man-news\u0022\u003E\n    \u003Cinput name=\u0022milkman\u0022\u003E\n    \u003Cinput name=\u0022milk man\u0022\u003E\n    \u003Cinput name=\u0022letterman2\u0022\u003E\n    \u003Cinput name=\u0022newmilk\u0022\u003E\n    \u003Cinput name=\u0022man\u0022\u003E\n    \u003Cinput name=\u0022newsletter\u0022\u003E\n  \u003C/body\u003E\n  \u003C/html\u003E\u0022\u0022\u0022)\n\nlet manElems = \n  manDoc.CssSelect(\u0022input[name*=\u0027man\u0027]\u0022)\n(**\n### Attribute Contains Word Selector\n\nFinds all inputs with a name containing the word \u0022man\u0022. This requires a whitespace around the word:\n*)\nlet manWordElems = \n  manDoc.CssSelect(\u0022input[name~=\u0027man\u0027]\u0022)\n\n(**\n### Attribute Ends With Selector\n\nFinds all inputs with a name ending with \u0022man\u0022.\n*)\nlet manEndElemes = \n  manDoc.CssSelect(\u0022input[name$=\u0027man\u0027]\u0022)\n\n(**\n### Attribute Equals Selector\n\nFinds all inputs with a name equal to \u0022man\u0022.\n*)\n\nlet manEqElemes = \n  manDoc.CssSelect(\u0022input[name=\u0027man\u0027]\u0022)\n\n(**\n### Attribute Not Equal Selector\n\nFinds all inputs with a name different to \u0022man\u0022.\n*)\nlet notManElems =\n  manDoc.CssSelect(\u0022input[name!=\u0027man\u0027]\u0022)\n\n(**\n### Attribute Starts With Selector\n\nFinds all inputs with a name starting with \u0022man\u0022.\n*)\n\nlet manStartElems =\n  manDoc.CssSelect(\u0022input[name^=\u0027man\u0027]\u0022)\n\n(**\n### Forms helpers\n\nThere are some syntax shortcuts to find forms controls.\n*)\n\nlet htmlForm = HtmlDocument.Parse(\u0022\u0022\u0022\n  \u003C!doctype html\u003E\n  \u003Chtml\u003E\n  \u003Cbody\u003E\n  \u003Cform\u003E\n    \u003Cfieldset\u003E\n      \u003Cinput type=\u0022button\u0022 value=\u0022Input Button\u0022\u003E\n      \u003Cinput type=\u0022checkbox\u0022 id=\u0022check1\u0022\u003E\n      \u003Cinput type=\u0022hidden\u0022 id=\u0022hidden1\u0022\u003E\n      \u003Cinput type=\u0022password\u0022 id=\u0022pass1\u0022\u003E\n      \u003Cinput name=\u0022email\u0022 disabled=\u0022disabled\u0022\u003E\n      \u003Cinput type=\u0022radio\u0022 id=\u0022radio1\u0022\u003E\n      \u003Cinput type=\u0022checkbox\u0022 id=\u0022check2\u0022 checked=\u0022checked\u0022\u003E\n      \u003Cinput type=\u0022file\u0022 id=\u0022uploader1\u0022\u003E\n      \u003Cinput type=\u0022reset\u0022\u003E\n      \u003Cinput type=\u0022submit\u0022\u003E\n      \u003Cinput type=\u0022text\u0022\u003E\n      \u003Cselect\u003E\u003Coption\u003EOption\u003C/option\u003E\u003C/select\u003E\n      \u003Ctextarea class=\u0022comment box1\u0022\u003EType a comment here\u003C/textarea\u003E\n      \u003Cbutton\u003EGo !\u003C/button\u003E\n    \u003C/fieldset\u003E\n  \u003C/form\u003E\n  \u003C/body\u003E\n  \u003C/html\u003E\u0022\u0022\u0022)\n\n(**\nYou can use \u0060:prop\u0060 to find CSS elements with the specified value of the \u0060type\u0060 attribute\nor a specified form control property. This lets you easily select all buttons, checkboxes, \nradio buttons, but also hidden or disabled form elements:\n*)\n\n// Find all buttons.\nlet buttons = htmlForm.CssSelect(\u0022:button\u0022)\n\n// Find all checkboxes.\nlet checkboxes = htmlForm.CssSelect(\u0022:checkbox\u0022)\n\n// Find all checked checkboxs or radio.\nlet checkd = htmlForm.CssSelect(\u0022:checked\u0022)\n\n// Find all disabled controls.\nlet disabled = htmlForm.CssSelect(\u0022:disabled\u0022)\n\n// Find all inputs with type hidden.\nlet hidden = htmlForm.CssSelect(\u0022:hidden\u0022)\n\n// Find all inputs with type radio.\nlet radio = htmlForm.CssSelect(\u0022:radio\u0022)\n\n// Find all inputs with type password.\nlet password = htmlForm.CssSelect(\u0022:password\u0022)\n\n// Find all files uploaders.\nlet file = htmlForm.CssSelect(\u0022:file\u0022)\n\n(**\n\n## Implemented and missing features\n\nBasic CSS selectors are implemented, but some JQuery selectors are missing\n\nThis table lists all JQuery selectors and their status\n\nSelector name|Status|specification\n|-|:-:|-:\n*All Selector *|\u0060 TODO \u0060|[specification](http://api.jquery.com/all-selector/)|\n*:animated Selector*|\u0060 not possible \u0060|[specification](http://api.jquery.com/animated-selector/)|\n*Attribute Contains Prefix Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/attribute-contains-prefix-selector/)|\n*Attribute Contains Selector *|\u0060 implemented \u0060|[specification](http://api.jquery.com/attribute-contains-selector/)|\n*Attribute Contains Word Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/attribute-contains-word-selector/)|\n*Attribute Ends With Selector *|\u0060 implemented \u0060|[specification](http://api.jquery.com/attribute-ends-with-selector/)|\n*Attribute Equals Selector *| \u0060 implemented \u0060|[specification](http://api.jquery.com/attribute-equals-selector/)|\n*Attribute Not Equal Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/attribute-not-equal-selector/)|\n*Attribute Starts With Selector *|\u0060 implemented \u0060|[specification](http://api.jquery.com/attribute-starts-with-selector/)|\n*:button Selector *|\u0060 implemented \u0060|[specification](http://api.jquery.com/button-selector/)|\n*:checkbox Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/checkbox-selector/)|\n*:checked Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/checked-selector/)|\n*Child Selector (\u201Cparent \u003E child\u201D)*|\u0060 implemented \u0060|[specification](http://api.jquery.com/child-selector/)|\n*Class Selector (\u201C.class\u201D)*|\u0060 implemented \u0060|[specification](http://api.jquery.com/class-selector/)|\n*:contains() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/contains-selector/)|\n*Descendant Selector (\u201Cancestor descendant\u201D)*|\u0060 implemented \u0060|[specification](http://api.jquery.com/descendant-selector/)|\n*:disabled Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/disabled-selector/)|\n*Element Selector (\u201Celement\u201D)*|\u0060 implemented \u0060|[specification](http://api.jquery.com/element-selector/)|\n*:empty Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/empty-selector/)|\n*:enabled Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/enabled-selector/)|\n*:eq() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/eq-selector/)|\n*:even Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/even-selector/)|\n*:file Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/file-selector/)|\n*:first-child Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/first-child-selector/)|\n*:first-of-type Selector*|\u0060 TODO  \u0060|[specification](http://api.jquery.com/first-of-type-selector/)|\n*:first Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/first-selector/)|\n*:focus Selector*|\u0060 not possible \u0060|[specification](http://api.jquery.com/focus-selector/)|\n*:gt() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/gt-selector/)|\n*Has Attribute Selector [name]*|\u0060 implemented \u0060|[specification](http://api.jquery.com/has-attribute-selector/)|\n*:has() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/has-selector/)|\n*:header Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/header-selector/)|\n*:hidden Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/hidden-selector/)|\n*ID Selector (\u201C#id\u201D)*|\u0060 implemented \u0060|[specification](http://api.jquery.com/id-selector/)|\n*:image Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/image-selector/)|\n*:input Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/input-selector/)|\n*:lang() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/lang-selector/)|\n*:last-child Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/last-child-selector/)|\n*:last-of-type Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/last-of-type-selector/)|\n*:last Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/last-selector/)|\n*:lt() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/lt-selector/)|\n*Multiple Attribute Selector [name=\u201Dvalue\u201D][name2=\u201Dvalue2\u2033]*|\u0060 implemented \u0060|[specification](http://api.jquery.com/multiple-attribute-selector/)|\n*Multiple Selector (\u201Cselector1, selector2, selectorN\u201D)*|\u0060 TODO \u0060|[specification](http://api.jquery.com/multiple-selector/)|\n*Next Adjacent Selector (\u201Cprev \u002B next\u201D)*|\u0060 TODO \u0060|[specification](http://api.jquery.com/next-adjacent-selector/)|\n*Next Siblings Selector (\u201Cprev ~ siblings\u201D)*|\u0060 TODO \u0060|[specification](http://api.jquery.com/next-siblings-selector/)|\n*:not() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/not-selector/)|\n*:nth-child() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/nth-child-selector/)|\n*:nth-last-child() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/nth-last-child-selector/)|\n*:nth-last-of-type() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/nth-last-of-type-selector/)|\n*:nth-of-type() Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/nth-of-type-selector/)|\n*:odd Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/odd-selector/)|\n*:only-child Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/only-child-selector/)|\n*:only-of-type Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/only-of-type-selector/)|\n*:parent Selector*|\u0060 TODO \u0060|[specification](http://api.jquery.com/parent-selector/)|\n*:password Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/password-selector/)|\n*:radio Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/radio-selector/)|\n*:reset Selector*|\u0060 not possible \u0060|[specification](http://api.jquery.com/reset-selector/)|\n*:root Selector*|\u0060 useless[1] \u0060|[specification](http://api.jquery.com/root-selector/)|\n*:selected Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/selected-selector/)|\n*:submit Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/submit-selector/)|\n*:target Selector*|\u0060 not possible \u0060|[specification](http://api.jquery.com/target-selector/)|\n*:text Selector*|\u0060 implemented \u0060|[specification](http://api.jquery.com/text-selector/)|\n*:visible Selector*|\u0060 not possible \u0060|[specification](http://api.jquery.com/visible-selector/)|\n\n[1] :root Selector seems to be useless in our case because with the HTML parser the root is always the html node.\n\n*)\n"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/HtmlParser.html","title":"HTML Parser\r\n","content":"(**\n---\ncategory: Utilities\ncategoryindex: 1\nindex: 3\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(** \n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# HTML Parser\n\nThis article demonstrates how to use the HTML Parser to parse HTML files.\n\nThe HTML parser takes any fragment of HTML, uri or a stream and trys to parse it into a DOM. \nThe parser is based on the [HTML Living Standard](http://www.whatwg.org/specs/web-apps/current-work/multipage/index.html#contents)\nOnce a document/fragment has been parsed, a set of extension methods over the HTML DOM elements allow you to extract information from a web page\nindependently of the actual HTML Type provider.\n*)\n\nopen FSharp.Data\n\n(**\nThe following example uses Google to search for \u0060FSharp.Data\u0060 then parses the first set of\nsearch results from the page, extracting the URL and Title of the link.\nWe use the \u0060cref:T:FSharp.Data.HtmlDocument\u0060 type.\n\nTo achieve this we must first parse the webpage into our DOM. We can do this using\nthe \u0060cref:M:FSharp.Data.HtmlDocument.Load\u0060 method. This method will take a URL and make a synchronous web call\nto extract the data from the page. Note: an asynchronous variant \u0060cref:M:FSharp.Data.HtmlDocument.AsyncLoad\u0060 is also available  \n*)\nlet results = HtmlDocument.Load(\u0022http://www.google.co.uk/search?q=FSharp.Data\u0022)\n\n(**\nNow that we have a loaded HTML document we can begin to extract data from it. \nFirstly we want to extract all of the anchor tags \u0060a\u0060 out of the document, then\ninspect the links to see if it has a \u0060href\u0060 attribute, using \u0060cref:M:FSharp.Data.HtmlDocumentExtensions.Descendants\u0060. If it does, extract the value,\nwhich in this case is the url that the search result is pointing to, and additionally the \n\u0060InnerText\u0060 of the anchor tag to provide the name of the web page for the search result\nwe are looking at. \n*)\nlet links = \n    results.Descendants [\u0022a\u0022]\n    |\u003E Seq.choose (fun x -\u003E \n           x.TryGetAttribute(\u0022href\u0022)\n           |\u003E Option.map (fun a -\u003E x.InnerText(), a.Value())\n    )\n    |\u003E Seq.toList\n\n(**\nNow that we have extracted our search results you will notice that there are lots of\nother links to various Google services and cached/similar results. Ideally we would \nlike to filter these results as we are probably not interested in them.\nAt this point we simply have a sequence of Tuples, so F# makes this trivial using \u0060Seq.filter\u0060\nand \u0060Seq.map\u0060.\n*)\n\nlet searchResults =\n    links\n    |\u003E List.filter (fun (name, url) -\u003E \n                    name \u003C\u003E \u0022Cached\u0022 \u0026\u0026 name \u003C\u003E \u0022Similar\u0022 \u0026\u0026 url.StartsWith(\u0022/url?\u0022))\n    |\u003E List.map (fun (name, url) -\u003E name, url.Substring(0, url.IndexOf(\u0022\u0026sa=\u0022)).Replace(\u0022/url?q=\u0022, \u0022\u0022))\n\n(** \nPutting this all together yields the following:\n*)\n\n(*** include-value:searchResults ***)"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/HtmlProvider.html","title":"HTML Type Provider\r\n","content":"(**\n---\ncategory: Type Providers\ncategoryindex: 1\nindex: 2\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(** \n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# HTML Type Provider\n\nThis article demonstrates how to use the HTML type provider to read HTML tables files\nin a statically typed way. \n\nThe HTML Type Provider takes a sample HTML document as input and generates a type based on the data\npresent in the columns of that sample. The column names are obtained from the first (header) row.\n\n## Introducing the provider\n\nThe type provider is located in the \u0060FSharp.Data.dll\u0060 assembly. Assuming the assembly \nis located in the \u0060../../../bin\u0060 directory, we can load it in F# Interactive as follows:\n*)\n\nopen FSharp.Data\n\n(**\n\n### Parsing Power Market Data\n\nThe Elexon - BM Reports website provides market data about the U.K\u0027s current power system. For simplicity, an example of this data below is shown in CSV format.\n\n    [lang=text]\n    Settlement Day,Period,IMBALNGC,Offer Volume Bid Volume,Accepted Offer Vol,Accepted Bid Vol,UAOV,UABV,PAOV,PABV\n    2014-01-14,1,877.000,52378.500,-53779.500,348.200,-654.374,0.000,0.000,348.200,-654.374 \n    2014-01-14,2,196.000,52598.000,-53559.500,349.601,-310.862,0.000,0.000,316.701,-310.862 \n    2014-01-14,3,-190.000,52575.000,-53283.500,186.183,-2.426,0.000,0.000,162.767,-1.917 \n    2014-01-14,4,-61.000,52576.000,-53454.500,18.000,-24.158,0.000,0.000,18.000,-24.158 \n\n\nUsually with HTML files headers are demarked by using the \u003Cth\u003E tag, however in this file this is not the case, so the provider assumes that the\nfirst row is headers. (This behaviour is likely to get smarter in later releases). But it highlights a general problem about HTML\u0027s strictness. \n*)\n\ntype F1_2017 = HtmlProvider\u003C\u0022../data/2017_F1.htm\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\n\n(**\nThe generated type provides a type space of tables that it has managed to parse out of the given HTML Document.\nEach type\u0027s name is derived from either the id, title, name, summary or caption attributes/tags provided. If none of these \nentities exist then the table will simply be named \u0060Tablexx\u0060 where xx is the position in the HTML document if all of the tables were flatterned out into a list.\nThe \u0060Load\u0060 method allows reading the data from a file or web resource. We could also have used a web URL instead of a local file in the sample parameter of the type provider.\nThe following sample calls the \u0060Load\u0060 method with an URL that points to a live version of the same page on wikipedia.\n*)\nlet url = \n  \u0022https://en.wikipedia.org/wiki/\u0022 \u002B\n    \u00222017_FIA_Formula_One_World_Championship\u0022\n\n// Download the latest market depth information\nlet f1Calendar = \n  F1_2017.Load(url).Tables.\u0060\u0060Season calendar\u0060\u0060\n\n// Look at the most recent row. Note the \u0027Date\u0027 property\n// is of type \u0027DateTime\u0027 and \u0027Open\u0027 has a type \u0027decimal\u0027\nlet firstRow = f1Calendar.Rows |\u003E Seq.head\nlet round = firstRow.Round\nlet grandPrix = firstRow.\u0060\u0060Grand Prix\u0060\u0060\nlet date = firstRow.Date\n\n// Print the bid / offer volumes for each row\nfor row in f1Calendar.Rows do\n  printfn \u0022Race, round %A is hosted at %A on %A\u0022 \n    row.Round row.\u0060\u0060Grand Prix\u0060\u0060 row.Date\n\n(*** include-fsi-merged-output ***)\n\n(**\nThe generated type has a property \u0060Rows\u0060 that returns the data from the HTML file as a\ncollection of rows. We iterate over the rows using a \u0060for\u0060 loop. As you can see the\n(generated) type for rows has properties such as \u0060Grand Prix\u0060, \u0060Circuit\u0060, \u0060Round\u0060 and \u0060Date\u0060 that correspond\nto the columns in the selected HTML table file.\n\nAs you can see, the type provider also infers types of individual rows. The \u0060Date\u0060\nproperty is inferred to be a \u0060DateTime\u0060 (because the values in the sample file can all\nbe parsed as dates) while other columns are inferred as the correct type where possible.\n*)\n\n(**\n\n### Parsing Nuget package stats\n\nThis small sample shows how the HTML Type Provider can be used to scrape data from a website. In this example we analyze the download counts of the FSharp.Data package on NuGet.\nNote that we\u0027re using the live URL as the sample, so we can just use the default constructor as the runtime data will be the same as the compile time data.\n\n*)\n\n\n// Configure the type provider\ntype NugetStats = \n  HtmlProvider\u003C\u0022https://www.nuget.org/packages/FSharp.Data\u0022\u003E\n\n// load the live package stats for FSharp.Data\nlet rawStats = NugetStats().Tables.\u0060\u0060Version History\u0060\u0060\n\n// helper function to analyze version numbers from nuget\nlet getMinorVersion (v:string) =  \n  System.Text.RegularExpressions.Regex(@\u0022\\d.\\d\u0022).Match(v).Value\n\n// group by minor version and calculate download count\nlet stats = \n  rawStats.Rows\n  |\u003E Seq.groupBy (fun r -\u003E \n      getMinorVersion r.Version)\n  |\u003E Seq.map (fun (k, xs) -\u003E \n      k, xs |\u003E Seq.sumBy (fun x -\u003E x.Downloads))\n  |\u003E Seq.toArray\n\n(*** include-fsi-merged-output ***)\n\n(**\n\n### Getting statistics on Doctor Who \n\nThis sample shows some more screen scraping from Wikipedia:\n\n*)\n\n(*** define-output:doctorWhoChart ***)\nlet [\u003CLiteral\u003E] DrWho = \n  \u0022https://en.wikipedia.org/wiki/List_of_Doctor_Who_episodes_(1963%E2%80%931989)\u0022\n\nlet doctorWho = new HtmlProvider\u003CDrWho\u003E()\n\n// Get the average number of viewers for each doctor\u0027s series run\nlet viewersByDoctor = \n  doctorWho.Tables.\u0060\u0060Season 1 (1963-1964) Edit\u0060\u0060.Rows\n  |\u003E Seq.groupBy (fun season -\u003E season.\u0060\u0060Directed by\u0060\u0060)\n  |\u003E Seq.map (fun (doctor, seasons) -\u003E \n      let averaged = \n        seasons \n        |\u003E Seq.averageBy (fun season -\u003E \n            season.\u0060\u0060UK viewers (millions)\u0060\u0060)\n      doctor, averaged)\n  |\u003E Seq.toArray\n\n\n(*** include-fsi-merged-output ***)\n\n(**\n## Related articles\n\n * [HTML Parser](HtmlParser.html) - provides more information about \n   working with HTML documents dynamically.\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/Http.html","title":"HTTP Utilities\r\n","content":"(**\n---\ncategory: Utilities\ncategoryindex: 1\nindex: 4\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(**\n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# HTTP Utilities\n\nThe .NET library provides a powerful API for creating and sending HTTP web requests.\nThere is a simple \u0060WebClient\u0060 type (see [MSDN][1]) and a more flexible \u0060HttpWebRequest\u0060\ntype (see [MSDN][2]). However, these two types are quite difficult to use if you\nwant to quickly run a simple HTTP request and specify parameters such as method,\nHTTP POST data, or additional headers.\n\nThe FSharp.Data package provides a simple \u0060cref:T:FSharp.Data.Http\u0060 type with four methods:\n\u0060cref:M:FSharp.Data.Http.RequestString\u0060 and \u0060cref:M:FSharp.Data.Http.AsyncRequestString\u0060, that can be used to create a simple request and\nperform it synchronously or asynchronously, and \u0060cref:M:FSharp.Data.Http.Request\u0060 and it\u0027s async companion \u0060cref:M:FSharp.Data.Http.AsyncRequest\u0060 if\nyou want to request binary files or you want to know more about the response like the status code,\nthe response URL, or the returned headers and cookies.\n\n [1]: http://msdn.microsoft.com/en-us/library/system.net.webclient.aspx\n [2]: http://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.aspx\n\nThe type is located in \u0060FSharp.Data\u0060 namespace:\n*)\n\nopen FSharp.Data\n\n(**\n## Sending simple requests\n\nTo send a simple HTTP (GET) request that downloads a specified web page, you \ncan use \u0060cref:M:FSharp.Data.Http.RequestString\u0060 and \u0060cref:M:FSharp.Data.Http.AsyncRequestString\u0060 with just a single parameter:\n*)\n\n// Download the content of a web site\nHttp.RequestString(\u0022http://tomasp.net\u0022)\n\n// Download web site asynchronously\nasync { let! html = Http.AsyncRequestString(\u0022http://tomasp.net\u0022)\n        printfn \u0022%d\u0022 html.Length }\n|\u003E Async.Start\n\n(** \nIn the rest of the documentation, we focus on the \u0060RequestString\u0060 method, because\nthe use of \u0060AsyncRequestString\u0060 is exactly the same.\n\n## Query parameters and headers\n\nYou can specify query parameters either by constructing\nan URL that includes the parameters (e.g. \u0060http://...?test=foo\u0026more=bar\u0060) or you\ncan pass them using the optional parameter \u0060query\u0060. The following example also explicitly\nspecifies the GET method, but it will be set automatically for you if you omit it:\n*)\n\nHttp.RequestString\n  ( \u0022http://httpbin.org/get\u0022, \n    query=[\u0022test\u0022, \u0022foo\u0022], httpMethod=\u0022GET\u0022 )\n\n(** \nAdditional headers are specified similarly - using an optional parameter \u0060headers\u0060.\nThe collection can contain custom headers, but also standard headers such as the \nAccept header (which has to be set using a specific property when using \u0060HttpWebRequest\u0060).\n\nThe following example uses [The Movie Database](http://www.themoviedb.org) API \nto search for the word \u0022batman\u0022. To run the sample, you\u0027ll need to register and\nprovide your API key:\n*)\n\n(*** do-not-eval ***)\n\n// API key for http://www.themoviedb.org\nlet apiKey = \u0022\u003Cplease register to get a key\u003E\u0022\n\n// Run the HTTP web request\nHttp.RequestString\n  ( \u0022http://api.themoviedb.org/3/search/movie\u0022, httpMethod = \u0022GET\u0022,\n    query   = [ \u0022api_key\u0022, apiKey; \u0022query\u0022, \u0022batman\u0022 ],\n    headers = [ \u0022Accept\u0022, \u0022application/json\u0022 ])\n\n(**\nThe library supports a simple and unchecked string based API (used in the previous example),\nbut you can also use pre-defined header names to avoid spelling mistakes. The named headers\nare available in \u0060cref:T:FSharp.Data.HttpRequestHeaders\u0060 (and \u0060cref:T:FSharp.Data.HttpResponseHeaders\u0060) modules, so you can either\nuse the full name \u0060HttpRequestHeaders.Accept\u0060, or open the module and use just the short name\n\u0060Accept\u0060 as in the following example. Similarly, the \u0060HttpContentTypes\u0060 enumeration provides\nwell known content types:\n*)\n\nopen FSharp.Data.HttpRequestHeaders\n\n(*** do-not-eval ***)\n\n// Run the HTTP web request\nHttp.RequestString\n  ( \u0022http://api.themoviedb.org/3/search/movie\u0022,\n    query   = [ \u0022api_key\u0022, apiKey; \u0022query\u0022, \u0022batman\u0022 ],\n    headers = [ Accept HttpContentTypes.Json ])\n\n(**\n## Getting extra information\n\nNote that in the previous snippet, if you don\u0027t specify a valid API key, you\u0027ll get a (401) Unathorized error,\nand that will throw an exception. Unlike when using \u0060WebRequest\u0060 directly, the exception message will still include\nthe response content, so it\u0027s easier to debug in F# interactive when the server returns extra info.\n\nYou can also opt out of the exception by specifying the \u0060silentHttpErrors\u0060 parameter:\n*)\n\n(*** define-output:request ***)\n\nHttp.RequestString(\u0022http://api.themoviedb.org/3/search/movie\u0022, silentHttpErrors = true)\n\n(** This returns the following: *)\n(*** include-it:request ***)\n\n(** In this case, you might want to look at the HTTP status code so you don\u0027t confuse an error message for an actual response.\nIf you want to see more information about the response, including the status code, the response \nheaders, the returned cookies, and the response url (which might be different to \nthe url you passed when there are redirects), you can use the \u0060cref:M:FSharp.Data.Http.Request\u0060 method\ninstead of the \u0060cref:M:FSharp.Data.Http.RequestString\u0060 method:\n\n*)\n\nlet response = Http.Request(\u0022http://api.themoviedb.org/3/search/movie\u0022, silentHttpErrors = true)\n\n// Examine information about the response\nresponse.Headers\nresponse.Cookies\nresponse.ResponseUrl\nresponse.StatusCode\n\n(**\n## Sending request data\n\nIf you want to create a POST request with HTTP POST data, you can specify the\nadditional data in the \u0060body\u0060 optional parameter. This parameter is of type \u0060cref:T:FSharp.Data.HttpRequestBody\u0060, which\nis a discriminated union with three cases:\n\n* \u0060TextRequest\u0060 for sending a string in the request body.\n* \u0060BinaryUpload\u0060 for sending binary content in the request.\n* \u0060FormValues\u0060 for sending a set of name-value pairs correspondent to form values.\n\nIf you specify a body, you do not need to set the \u0060httpMethod\u0060 parameter, it will be set to \u0060Post\u0060 automatically.\n\nThe following example uses the [httpbin.org](http://httpbin.org) service which \nreturns the request details:\n*)\n\nHttp.RequestString(\u0022http://httpbin.org/post\u0022, body = FormValues [\u0022test\u0022, \u0022foo\u0022])\n\n(**\nBy default, the \u0060Content-Type\u0060 header is set to \u0060text/plain\u0060, \u0060application/x-www-form-urlencoded\u0060,\nor \u0060application/octet-stream\u0060, depending on which kind of \u0060HttpRequestBody\u0060 you specify, but you can change\nthis behaviour by adding \u0060content-type\u0060 to the list of headers using the optional argument \u0060headers\u0060:\n*)\n\nHttp.RequestString\n  ( \u0022http://httpbin.org/post\u0022, \n    headers = [ ContentType HttpContentTypes.Json ],\n    body = TextRequest \u0022\u0022\u0022 {\u0022test\u0022: 42} \u0022\u0022\u0022)\n\n(**\n## Maintaining cookies across requests\n\nIf you want to maintain cookies between requests, you can specify the \u0060cookieContainer\u0060 \nparameter. \n\nThe following is an old sample showing how this is set.\n*)\n\n(*** do-not-eval ***)\n\n// Build URL with documentation for a given class\nlet msdnUrl className = \n  let root = \u0022http://msdn.microsoft.com\u0022\n  sprintf \u0022%s/en-gb/library/%s.aspx\u0022 root className\n\n// Get the page and search for F# code\nlet docInCSharp = Http.RequestString(msdnUrl \u0022system.web.httprequest\u0022)\ndocInCSharp.Contains \u0022\u003Ca\u003EF#\u003C/a\u003E\u0022\n\nopen System.Net\nlet cc = CookieContainer()\n\n// Send a request to switch the language\nHttp.RequestString\n  ( msdnUrl \u0022system.datetime\u0022, \n    query = [\u0022cs-save-lang\u0022, \u00221\u0022; \u0022cs-lang\u0022,\u0022fsharp\u0022], \n    cookieContainer = cc) |\u003E ignore\n\n// Request the documentation again \u0026 search for F#\nlet docInFSharp = \n  Http.RequestString\n    ( msdnUrl \u0022system.web.httprequest\u0022, \n      cookieContainer = cc )\ndocInFSharp.Contains \u0022\u003Ca\u003EF#\u003C/a\u003E\u0022\n\n(**\n## Requesting binary data\n\nThe \u0060cref:M:FSharp.Data.Http.RequestString\u0060 method will always return the response as a \u0060string\u0060, but if you use the \n\u0060cref:M:FSharp.Data.Http.Request\u0060 method, it will return a \u0060HttpResponseBody.Text\u0060 or a \n\u0060HttpResponseBody.Binary\u0060 depending on the response \u0060content-type\u0060 header:\n*)\n\nlet logoUrl = \u0022https://raw.github.com/fsharp/FSharp.Data/master/misc/logo.png\u0022\nmatch Http.Request(logoUrl).Body with\n| Text text -\u003E \n    printfn \u0022Got text content: %s\u0022 text\n| Binary bytes -\u003E \n    printfn \u0022Got %d bytes of binary content\u0022 bytes.Length\n\n(**\n## Customizing the HTTP request\n\nFor the cases where you need something not natively provided by the library, you can use the\n\u0060customizeHttpRequest\u0060 parameter, which expects a function that transforms an \u0060HttpWebRequest\u0060.\n\nAs an example, let\u0027s say you want to add a client certificate to your request. To do that,\nyou need to open the \u0060X509Certificates\u0060 namespace from  \u0060System.Security.Cryptography\u0060,\ncreate a \u0060X509ClientCertificate2\u0060 value, and add it to the \u0060ClientCertificates\u0060 list of the request.\n\nAssuming the certificate is stored in \u0060myCertificate.pfx\u0060:\n*)\n\n(*** do-not-eval ***)\n\nopen System.Security.Cryptography.X509Certificates\n\n// Load the certificate from local file\nlet clientCert = \n  new X509Certificate2(\u0022.\\myCertificate.pfx\u0022, \u0022password\u0022)\n\n// Send the request with certificate\nHttp.Request\n  ( \u0022http://yourprotectedresouce.com/data\u0022,\n    customizeHttpRequest = fun req -\u003E \n        req.ClientCertificates.Add(clientCert) |\u003E ignore; req)\n\n(**\n## Handling multipart form data\n\nYou can also send http multipart form data via the \u0060Multipart\u0060 \u0060cref:T:FSharp.Data.HttpRequestBody\u0060 case.\nData sent in this way is streamed instead of being read into memory in its entirety, allowing for \nuploads of arbitrary size.\n\n*)\n\n(*** do-not-eval ***)\n\nlet largeFilePath = \u0022//path/to/large/file.mp4\u0022\nlet data = System.IO.File.OpenRead(largeFilePath) :\u003E System.IO.Stream\n\nHttp.Request\n  ( \u0022http://endpoint/for/multipart/data\u0022, \n  body = Multipart(\n    boundary = \u0022define a custom boundary here\u0022, // this is used to separate the items you\u0027re streaming\n    parts = [\n      MultipartItem(\u0022formFieldName\u0022, System.IO.Path.GetFileName(largeFilePath), data)\n    ]\n  ))\n\n(**\n## Related articles\n\n * API Reference: \u0060cref:T:FSharp.Data.Http\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpContentTypes\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpEncodings\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpMethod\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpRequestBody\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpRequestHeaders\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpResponse\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpResponseBody\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpResponseHeaders\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpResponseWithStream\u0060\n * API Reference: \u0060cref:T:FSharp.Data.HttpStatusCodes\u0060\n\n *)"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/JsonProvider.html","title":"JSON Type Provider\r\n","content":"(**\n---\ncategory: Type Providers\ncategoryindex: 1\nindex: 3\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(** \n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# JSON Type Provider\n\nThis article demonstrates how to use the JSON Type Provider to access JSON files\nin a statically typed way. We first look at how the structure is inferred and then \ndemonstrate the provider by parsing data from WorldBank and Twitter.\n\nThe JSON Type Provider provides statically typed access to JSON documents.\nIt takes a sample document as an input (or a document containing a JSON array of samples).\nThe generated type can then be used to read files with the same structure. If the \nloaded file does not match the structure of the sample, a runtime error may occur \n(but only when accessing e.g. non-existing element).\n\n## Introducing the provider\n\n\n\u003Cdiv class=\u0022container-fluid\u0022 style=\u0022margin:15px 0px 15px 0px;\u0022\u003E\n    \u003Cdiv class=\u0022row-fluid\u0022\u003E\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n        \u003Cdiv class=\u0022span10\u0022 id=\u0022anim-holder\u0022\u003E\n            \u003Ca id=\u0022lnk\u0022 href=\u0022../images/json.gif\u0022\u003E\u003Cimg id=\u0022anim\u0022 src=\u0022../images/json.gif\u0022 /\u003E\u003C/a\u003E\n        \u003C/div\u003E\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n    \u003C/div\u003E\n\u003C/div\u003E\n\nThe type provider is located in the \u0060FSharp.Data.dll\u0060 assembly and namespace: *)\n\nopen FSharp.Data\n\n(**\n### Inferring types from the sample\n\nThe \u0060JsonProvider\u003C...\u003E\u0060 takes one static parameter of type \u0060string\u0060. The parameter can \nbe _either_ a sample string _or_ a sample file (relative to the current folder or online \naccessible via \u0060http\u0060 or \u0060https\u0060). It is not likely that this could lead to ambiguities. \n\nThe following sample passes a small JSON string to the provider:\n*)\n\ntype Simple = JsonProvider\u003C\u0022\u0022\u0022 { \u0022name\u0022:\u0022John\u0022, \u0022age\u0022:94 } \u0022\u0022\u0022\u003E\nlet simple = Simple.Parse(\u0022\u0022\u0022 { \u0022name\u0022:\u0022Tomas\u0022, \u0022age\u0022:4 } \u0022\u0022\u0022)\nsimple.Age\nsimple.Name\n\n(**\nYou can see that the generated type has two properties - \u0060Age\u0060 of type \u0060int\u0060 and \u0060Name\u0060 of\ntype \u0060string\u0060. The provider successfully infers the types from the sample and exposes the\nfields as properties (with PascalCase name to follow standard naming conventions).\n\n\n### Inferring numeric types\n\nIn the previous case, the sample document simply contained an integer and so the provider\ninferred the type \u0060int\u0060. Sometimes, the types in the sample document (or a list of samples) \nmay not match exactly. For example, a list may mix integers and floats:\n*)\n\ntype Numbers = JsonProvider\u003C\u0022\u0022\u0022 [1, 2, 3, 3.14] \u0022\u0022\u0022\u003E\nlet nums = Numbers.Parse(\u0022\u0022\u0022 [1.2, 45.1, 98.2, 5] \u0022\u0022\u0022)\nlet total = nums |\u003E Seq.sum\n\n(**\nWhen the sample is a collection, the type provider generates a type that can be used to store\nall values in the sample. In this case, the resulting type is \u0060decimal\u0060, because one\nof the values is not an integer. In general, the provider supports (and prefers them \nin this order): \u0060int\u0060, \u0060int64\u0060, \u0060decimal\u0060 and \u0060float\u0060.\n\nOther primitive types cannot be combined into a single type. For example, if the list contains\nnumbers _and_ strings. In this case, the provider generates two methods that can be used\nto get values that match one of the types:\n*)\n\ntype Mixed = JsonProvider\u003C\u0022\u0022\u0022 [1, 2, \u0022hello\u0022, \u0022world\u0022] \u0022\u0022\u0022\u003E\nlet mixed = Mixed.Parse(\u0022\u0022\u0022 [4, 5, \u0022hello\u0022, \u0022world\u0022 ] \u0022\u0022\u0022)\n\nmixed.Numbers |\u003E Seq.sum\nmixed.Strings |\u003E String.concat \u0022, \u0022\n\n(**\nAs you can see, the \u0060Mixed\u0060 type has properties \u0060Numbers\u0060 and \u0060Strings\u0060 that \nreturn only \u0060int\u0060 and \u0060string\u0060 values from the collection. This means that we get \ntype-safe access to the values, but not in the original order (if order matters, then\nyou can use the \u0060mixed.JsonValue\u0060 property to get the underlying \u0060JsonValue\u0060 and \nprocess it dynamically as described in [the documentation for \u0060JsonValue\u0060](JsonValue.html).\n\n### Inferring record types\n\nNow let\u0027s look at a sample JSON document that contains a list of records. The\nfollowing example uses two records - one with \u0060name\u0060 and \u0060age\u0060 and the second with just\n\u0060name\u0060. If a property is missing, then the provider infers it as optional.\n\nIf we want to just use the same text used for the schema at runtime, we can use the \u0060GetSamples\u0060 method:\n*)\n\ntype People = JsonProvider\u003C\u0022\u0022\u0022 \n  [ { \u0022name\u0022:\u0022John\u0022, \u0022age\u0022:94 }, \n    { \u0022name\u0022:\u0022Tomas\u0022 } ] \u0022\u0022\u0022\u003E\n\nfor item in People.GetSamples() do \n  printf \u0022%s \u0022 item.Name \n  item.Age |\u003E Option.iter (printf \u0022(%d)\u0022)\n  printfn \u0022\u0022\n\n(**\nThe inferred type for \u0060items\u0060 is a collection of (anonymous) JSON entities - each entity\nhas properties \u0060Name\u0060 and \u0060Age\u0060. As \u0060Age\u0060 is not available for all records in the sample\ndata set, it is inferred as \u0060option\u003Cint\u003E\u0060. The above sample uses \u0060Option.iter\u0060 to print\nthe value only when it is available.\n\nIn the previous case, the values of individual properties had common types - \u0060string\u0060 \nfor the \u0060Name\u0060 property and numeric type for \u0060Age\u0060. However, what if the property of\na record can have multiple different types? In that case, the type provider behaves\nas follows: \n*)\n\ntype Values = JsonProvider\u003C\u0022\u0022\u0022 [{\u0022value\u0022:94 }, {\u0022value\u0022:\u0022Tomas\u0022 }] \u0022\u0022\u0022\u003E\n\nfor item in Values.GetSamples() do \n  match item.Value.Number, item.Value.String with\n  | Some num, _ -\u003E printfn \u0022Numeric: %d\u0022 num\n  | _, Some str -\u003E printfn \u0022Text: %s\u0022 str\n  | _ -\u003E printfn \u0022Some other value!\u0022\n\n(**\nHere, the \u0060Value\u0060 property is either a number or a string, The type provider generates\na type that has an optional property for each possible option, so we can use \nsimple pattern matching on \u0060option\u003Cint\u003E\u0060 and \u0060option\u003Cstring\u003E\u0060 values to distinguish\nbetween the two options. This is similar to the handling of heterogeneous arrays.\n\nNote that we have a \u0060GetSamples\u0060 method because the sample is a JSON list. If it was a JSON\nobject, we would have a \u0060GetSample\u0060 method instead.\n\n#### More complex object type on root level\n\nIf you want the root type to be an object type, not an array, but\nyou need more samples at root level, you can use the SampleIsList parameter.\nApplied to the previous example this would be:\n\n*)\n\ntype People2 = JsonProvider\u003C\u0022\u0022\u0022 \n  [ { \u0022name\u0022:\u0022John\u0022, \u0022age\u0022:94 }, \n    { \u0022name\u0022:\u0022Tomas\u0022 } ] \u0022\u0022\u0022, SampleIsList=true\u003E\n\nlet person = People2.Parse(\u0022\u0022\u0022{ \u0022name\u0022:\u0022Gustavo\u0022 }\u0022\u0022\u0022)\n\n(**\n\t\n## Loading WorldBank data\n\nNow let\u0027s use the type provider to process some real data. We use a data set returned by \n[the WorldBank](http://data.worldbank.org), which has (roughly) the following structure:\n\n    [lang=js]\n    [ { \u0022page\u0022: 1, \u0022pages\u0022: 1, \u0022total\u0022: 53 },\n      [ { \u0022indicator\u0022: {\u0022value\u0022: \u0022Central government debt, total (% of GDP)\u0022},\n          \u0022country\u0022: {\u0022id\u0022:\u0022CZ\u0022,\u0022value\u0022:\u0022Czech Republic\u0022},\n          \u0022value\u0022:null,\u0022decimal\u0022:\u00221\u0022,\u0022date\u0022:\u00222000\u0022},\n        { \u0022indicator\u0022: {\u0022value\u0022: \u0022Central government debt, total (% of GDP)\u0022},\n          \u0022country\u0022: {\u0022id\u0022:\u0022CZ\u0022,\u0022value\u0022:\u0022Czech Republic\u0022},\n          \u0022value\u0022:\u002216.6567773464055\u0022,\u0022decimal\u0022:\u00221\u0022,\u0022date\u0022:\u00222010\u0022} ] ]\n\nThe response to a request contains an array with two items. The first item is a record\nwith general information about the response (page, total pages, etc.) and the second item\nis another array which contains the actual data points. For every data point, we get\nsome information and the actual \u0060value\u0060. Note that the \u0060value\u0060 is passed as a string \n(for some unknown reason). It is wrapped in quotes, so the provider infers its type as\n\u0060string\u0060 (and we need to convert it manually).\n\nThe following sample generates type based on the [\u0060data/WorldBank.json\u0060](../data/WorldBank.json) \nfile and loads it:\n*)\n\ntype WorldBank = JsonProvider\u003C\u0022../data/WorldBank.json\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\nlet doc = WorldBank.GetSample()\n\n(** Note that we can also load the data directly from the web both in the \u0060Load\u0060 method and in\nthe type provider sample parameter, and there\u0027s an asynchronous \u0060AsyncLoad\u0060 method available too: *)\nlet wbReq = \n  \u0022http://api.worldbank.org/country/cz/indicator/\u0022 \u002B \n    \u0022GC.DOD.TOTL.GD.ZS?format=json\u0022\n\nlet docAsync = \n  WorldBank.AsyncLoad(wbReq)\n\n(**\nThe \u0060doc\u0060 is an array of heterogeneous types, so the provider generates a type\nthat can be used to get the record and the array, respectively. Note that the \nprovider infers that there is only one record and one array. We can print the data set as follows:\n*)\n\n// Print general information\nlet info = doc.Record\nprintfn \u0022Showing page %d of %d. Total records %d\u0022 \n  info.Page info.Pages info.Total\n\n// Print all data points\nfor record in doc.Array do\n  record.Value |\u003E Option.iter (fun value -\u003E\n    printfn \u0022%d: %f\u0022 record.Date value)\n\n(**\nWhen printing the data points, some of the values might be missing (in the input, the value\nis \u0060null\u0060 instead of a valid number). This is another example of a heterogeneous type - \nthe type is either \u0060Number\u0060 or some other type (representing \u0060null\u0060 value). This means\nthat \u0060record.Value\u0060 has a \u0060Number\u0060 property (when the value is a number) and we can use\nit to print the result only when the data point is available.\n\n## Parsing Twitter stream\n\nWe now look on how to parse tweets returned by the [Twitter API](http://dev.twitter.com/).\nTweets are quite heterogeneous, so we infer the structure from a _list_ of inputs rather than from \njust a single input. To do that, we use the file [\u0060data/TwitterStream.json\u0060](../data/TwitterStream.json) \n(containing a list of tweets) and pass an optional parameter \u0060SampleIsList=true\u0060 which tells the \nprovider that the sample is actually a _list of samples_:\n\n*)\n\ntype Tweet = JsonProvider\u003C\u0022../data/TwitterStream.json\u0022, SampleIsList=true, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\nlet text = (*[omit:(omitted)]*)\u0022\u0022\u0022 {\u0022in_reply_to_status_id_str\u0022:null,\u0022text\u0022:\u0022\\u5927\\u91d1\\u6255\\u3063\\u3066\\u904a\\u3070\\u3057\\u3066\\u3082\\u3089\\u3046\\u3002\\u3082\\u3046\\u3053\\u306e\\u4e0a\\u306a\\u3044\\u8d05\\u6ca2\\u3002\\u3067\\u3082\\uff0c\\u5b9f\\u969b\\u306b\\u306f\\u305d\\u306e\\u8d05\\u6ca2\\u306e\\u672c\\u8cea\\u3092\\u6e80\\u55ab\\u3067\\u304d\\u308b\\u4eba\\u306f\\u9650\\u3089\\u308c\\u3066\\u308b\\u3002\\u305d\\u3053\\u306b\\u76ee\\u306b\\u898b\\u3048\\u306a\\u3044\\u968e\\u5c64\\u304c\\u3042\\u308b\\u3068\\u304a\\u3082\\u3046\\u3002\u0022,\u0022in_reply_to_user_id_str\u0022:null,\u0022retweet_count\u0022:0,\u0022geo\u0022:null,\u0022source\u0022:\u0022web\u0022,\u0022retweeted\u0022:false,\u0022truncated\u0022:false,\u0022id_str\u0022:\u0022263290764686155776\u0022,\u0022entities\u0022:{\u0022user_mentions\u0022:[],\u0022hashtags\u0022:[],\u0022urls\u0022:[]},\u0022in_reply_to_user_id\u0022:null,\u0022in_reply_to_status_id\u0022:null,\u0022place\u0022:null,\u0022coordinates\u0022:null,\u0022in_reply_to_screen_name\u0022:null,\u0022created_at\u0022:\u0022Tue Oct 30 14:46:24 \u002B0000 2012\u0022,\u0022user\u0022:{\u0022notifications\u0022:null,\u0022contributors_enabled\u0022:false,\u0022time_zone\u0022:\u0022Tokyo\u0022,\u0022profile_background_color\u0022:\u0022FFFFFF\u0022,\u0022location\u0022:\u0022Kodaira Tokyo Japan\u0022,\u0022profile_background_tile\u0022:false,\u0022profile_image_url_https\u0022:\u0022https:\\/\\/si0.twimg.com\\/profile_images\\/1172376796\\/70768_100000537851636_3599485_q_normal.jpg\u0022,\u0022default_profile_image\u0022:false,\u0022follow_request_sent\u0022:null,\u0022profile_sidebar_fill_color\u0022:\u002217451B\u0022,\u0022description\u0022:\u0022KS(Green62)\\/WasedaUniv.(Schl Adv Sci\\/Eng)\\/SynBio\\/ChronoBio\\/iGEM2010-2012\\/Travel\\/Airplane\\/ \\u5bfa\\u30fb\\u5ead\\u3081\\u3050\\u308a\u0022,\u0022favourites_count\u0022:17,\u0022screen_name\u0022:\u0022Merlin_wand\u0022,\u0022profile_sidebar_border_color\u0022:\u0022000000\u0022,\u0022id_str\u0022:\u002294788486\u0022,\u0022verified\u0022:false,\u0022lang\u0022:\u0022ja\u0022,\u0022statuses_count\u0022:8641,\u0022profile_use_background_image\u0022:true,\u0022protected\u0022:false,\u0022profile_image_url\u0022:\u0022http:\\/\\/a0.twimg.com\\/profile_images\\/1172376796\\/70768_100000537851636_3599485_q_normal.jpg\u0022,\u0022listed_count\u0022:31,\u0022geo_enabled\u0022:true,\u0022created_at\u0022:\u0022Sat Dec 05 13:07:32 \u002B0000 2009\u0022,\u0022profile_text_color\u0022:\u0022000000\u0022,\u0022name\u0022:\u0022Marin\u0022,\u0022profile_background_image_url\u0022:\u0022http:\\/\\/a0.twimg.com\\/profile_background_images\\/612807391\\/twitter_free1.br.jpg\u0022,\u0022friends_count\u0022:629,\u0022url\u0022:null,\u0022id\u0022:94788486,\u0022is_translator\u0022:false,\u0022default_profile\u0022:false,\u0022following\u0022:null,\u0022profile_background_image_url_https\u0022:\u0022https:\\/\\/si0.twimg.com\\/profile_background_images\\/612807391\\/twitter_free1.br.jpg\u0022,\u0022utc_offset\u0022:32400,\u0022profile_link_color\u0022:\u0022ADADAD\u0022,\u0022followers_count\u0022:426},\u0022id\u0022:263290764686155776,\u0022contributors\u0022:null,\u0022favorited\u0022:false} \u0022\u0022\u0022(*[/omit]*)\nlet tweet = Tweet.Parse(text)\n\nprintfn \u0022%s (retweeted %d times)\\n:%s\u0022\n  tweet.User.Value.Name tweet.RetweetCount.Value tweet.Text.Value\n\n(**\nAfter creating the \u0060Tweet\u0060 type, we parse a single sample tweet and print some details about the\ntweet. As you can see, the \u0060tweet.User\u0060 property has been inferred as optional (meaning that a \ntweet might not have an author?) so we unsafely get the value using the \u0060Value\u0060 property.\nThe \u0060RetweetCount\u0060 and \u0060Text\u0060 properties may be also missing, so we also access them unsafely.\n\n## Getting and creating GitHub issues\n\nIn this example we will now also create JSON in addition to consuming it.\nLet\u0027s start by listing the 5 most recently updated open issues in the FSharp.Data repo.\n\n*)\n\n// GitHub.json downloaded from \n// https://api.github.com/repos/fsharp/FSharp.Data/issues \n// to prevent rate limit when generating these docs\ntype GitHub = JsonProvider\u003C\u0022../data/GitHub.json\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\n\nlet topRecentlyUpdatedIssues = \n    GitHub.GetSamples()\n    |\u003E Seq.filter (fun issue -\u003E issue.State = \u0022open\u0022)\n    |\u003E Seq.sortBy (fun issue -\u003E System.DateTimeOffset.Now - issue.UpdatedAt)\n    |\u003E Seq.truncate 5\n\nfor issue in topRecentlyUpdatedIssues do\n    printfn \u0022#%d %s\u0022 issue.Number issue.Title\n\n(**\n\nAnd now let\u0027s create a new issue. We look into the documentation at http://developer.github.com/v3/issues/#create-an-issue and we see that\nwe need to post a JSON value similar to this:\n\n*)\n\n[\u003CLiteral\u003E]\nlet issueSample = \u0022\u0022\u0022\n{\n  \u0022title\u0022: \u0022Found a bug\u0022,\n  \u0022body\u0022: \u0022I\u0027m having a problem with this.\u0022,\n  \u0022assignee\u0022: \u0022octocat\u0022,\n  \u0022milestone\u0022: 1,\n  \u0022labels\u0022: [\n    \u0022Label1\u0022,\n    \u0022Label2\u0022\n  ]\n}\n\u0022\u0022\u0022\n\n(** \n\nThis JSON is different from what we got for each issue in the previous API call, so we\u0027ll define a new type based on this sample,\ncreate an instance, and send a POST request:\n\n*)\n\n(*** do-not-eval ***)\n\ntype GitHubIssue = JsonProvider\u003CissueSample, RootName=\u0022issue\u0022\u003E\n\nlet newIssue = \n  GitHubIssue.Issue\n    ( \u0022Test issue\u0022,\n      \u0022This is a test issue created in FSharp.Data documentation\u0022, \n      assignee = \u0022\u0022,\n      labels = [| |], \n      milestone = 0)\nnewIssue.JsonValue.Request \u0022https://api.github.com/repos/fsharp/FSharp.Data/issues\u0022\n\n(**\n\u003Ca name=\u0022jsonlib\u0022\u003E\u003C/a\u003E\n## Using JSON provider in a library\n\nYou can use the types created by JSON type provider in a public API of a library that you are building,\nbut there is one important thing to keep in mind - when the user references your library, the type\nprovider will be loaded and the types will be generated at that time (the JSON provider is not\ncurrently a _generative_ type provider). This means that the type provider will need to be able to\naccess the sample JSON. This works fine when the sample is specified inline, but it won\u0027t work when\nthe sample is specified as a local file (unless you distribute the samples with your library).\n\nFor this reason, the JSON provider lets you specify samples as embedded resources using the \nstatic parameter \u0060EmbeddedResource\u0060 (don\u0027t forget then to [include the file](https://docs.microsoft.com/en-us/visualstudio/ide/build-actions) as EmbeddedResource in the\nproject file). If you are building a library \u0060MyLib.dll\u0060, you can write:\n\n*)\ntype WB = JsonProvider\u003C\u0022../data/WorldBank.json\u0022, \n                       EmbeddedResource=\u0022MyLib, MyLib.data.worldbank.json\u0022,\n                       ResolutionFolder=__SOURCE_DIRECTORY__\u003E\n\n(**\nYou still need to specify the local path, but this is only used when compiling \u0060MyLib.dll\u0060. \nWhen a user of your library references \u0060MyLib.dll\u0060 later, the JSON Type Provider will be able\nto load \u0060MyLib.dll\u0060 and locate the sample \u0060worldbank.json\u0060 as a resource of the library. When\nthis succeeds, it does not attempt to find the local file and so your library can be used\nwithout providing a local copy of the sample JSON files.\n\n## Related articles\n\n * [JSON Parser](JsonValue.html) - provides more information about \n   working with JSON values dynamically.\n * API Reference: \u0060cref:T:FSharp.Data.JsonProvider\u0060\n * API Reference: \u0060cref:T:FSharp.Data.JsonValue\u0060\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/JsonValue.html","title":"JSON Parser\r\n","content":"(**\n---\ncategory: Utilities\ncategoryindex: 1\nindex: 5\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(**\n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# JSON Parser\n\nThe F# [JSON Type Provider](JsonProvider.html) is built on top of an efficient JSON parser written\nin F#.\n\nWhen working with well-defined JSON documents, it is easier to use the \n[type provider](JsonProvider.html), but in a more dynamic scenario or when writing\nquick and simple scripts, the parser might be a simpler option.\n\n## Loading JSON documents\n\nTo load a sample JSON document, we first need to reference the \u0060FSharp.Data\u0060 package. \n*)\n\nopen FSharp.Data\n\n(**\nThe \u0060FSharp.Data\u0060 namespace contains the \u0060cref:T:FSharp.Data.JsonValue\u0060 type that can be used\nto parse strings formatted using JSON as follows:\n*)\n\nlet info =\n  JsonValue.Parse(\u0022\u0022\u0022 \n    { \u0022name\u0022: \u0022Tomas\u0022, \u0022born\u0022: 1985,\n      \u0022siblings\u0022: [ \u0022Jan\u0022, \u0022Alexander\u0022 ] } \u0022\u0022\u0022)\n\n(**\nThe parsed value can be processed using pattern matching - the \u0060cref:T:FSharp.Data.JsonValue\u0060 type\nis a discriminated union with cases such as \u0060Record\u0060, \u0060Collection\u0060 and others that\ncan be used to examine the structure.\n\n## Using JSON extensions\n\nWe do not cover this technique in this introduction. Instead, we look at a number\nof extensions that become available after opening the \u0060cref:T:FSharp.Data.JsonExtensionsModule\u0060 \nmodule. Once opened, we can write:\n\n * \u0060value.AsBoolean()\u0060 returns the value as boolean if it is either \u0060true\u0060 or \u0060false\u0060.\n * \u0060value.AsInteger()\u0060 returns the value as integer if it is numeric and can be\n   converted to an integer; \u0060value.AsInteger64()\u0060, \u0060value.AsDecimal()\u0060 and\n   \u0060value.AsFloat()\u0060 behave similarly.\n * \u0060value.AsString()\u0060 returns the value as a string.\n * \u0060value.AsDateTime()\u0060 parses the string as a \u0060DateTime\u0060 value using either the\n    [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format, or using the \n    \u0060\\/Date(...)\\/\u0060 JSON format containing number of milliseconds since 1/1/1970.\n * \u0060value.AsDateTimeOffset()\u0060 parses the string as a \u0060DateTimeOffset\u0060 value using either the\n    [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) format, or using the \n    \u0060\\/Date(...[\u002B/-]offset)\\/\u0060 JSON format containing number of milliseconds since 1/1/1970, \n    [\u002B/-] the 4 digit offset. Example- \u0060\\/Date(1231456\u002B1000)\\/\u0060.\n * \u0060value.AsTimeSpan()\u0060 parses the string as a \u0060TimeSpan\u0060 value.\n * \u0060value.AsGuid()\u0060 parses the string as a \u0060Guid\u0060 value.\n * \u0060value?child\u0060 uses the dynamic operator to obtain a record member named \u0060child\u0060;\n    alternatively, you can also use \u0060value.GetProperty(child)\u0060 or an indexer\n    \u0060value.[child]\u0060.\n * \u0060value.TryGetProperty(child)\u0060 can be used to safely obtain a record member \n    (if the member is missing or the value is not a record then, \u0060TryGetProperty\u0060 \n    returns \u0060None\u0060).\n * \u0060[ for v in value -\u003E v ]\u0060 treats \u0060value\u0060 as a collection and iterates over it;\n   alternatively, it is possible to obtain all elements as an array using \n   \u0060value.AsArray()\u0060.\n * \u0060value.Properties()\u0060 returns a list of all properties of a record node.\n * \u0060value.InnerText()\u0060 concatenates all text or text in an array \n   (representing e.g. multi-line string).\n\nMethods that may need to parse a numeric value or date (such as \u0060AsFloat\u0060 and\n\u0060AsDateTime\u0060) receive an optional culture parameter.\n\nThe following example shows how to process the sample JSON value:\n*)\n\nopen FSharp.Data.JsonExtensions\n\n// Print name and birth year\nlet n = info?name\nprintfn \u0022%s (%d)\u0022 (info?name.AsString()) (info?born.AsInteger())\n\n// Print names of all siblings\nfor sib in info?siblings do\n  printfn \u0022%s\u0022 (sib.AsString())\n\n(**\nNote that the \u0060cref:T:FSharp.Data.JsonValue\u0060 type does not actually implement the \u0060IEnumerable\u003C\u0027T\u003E\u0060 \ninterface (meaning that it cannot be passed to \u0060Seq.xyz\u0060 functions). It only has\nthe \u0060GetEnumerator\u0060 method, which makes it possible to use it in sequence expressions\nand with the \u0060for\u0060 loop.\n*)\n\n(**\n## Parsing WorldBank response\n\nTo look at a more complex example, consider a sample document \n[\u0060data/WorldBank.json\u0060](../data/WorldBank.json) which was obtained as a response to \na WorldBank request (you can access the WorldBank data more conveniently using\n[a type provider](WorldBank.html)). The document looks as follows:\n\n    [lang=js]\n    [ { \u0022page\u0022: 1, \u0022pages\u0022: 1, \u0022total\u0022: 53 },\n      [ { \u0022indicator\u0022: {\u0022value\u0022: \u0022Central government debt, total (% of GDP)\u0022},\n          \u0022country\u0022: {\u0022id\u0022:\u0022CZ\u0022,\u0022value\u0022:\u0022Czech Republic\u0022},\n          \u0022value\u0022:null,\u0022decimal\u0022:\u00221\u0022,\u0022date\u0022:\u00222000\u0022},\n        { \u0022indicator\u0022: {\u0022value\u0022: \u0022Central government debt, total (% of GDP)\u0022},\n          \u0022country\u0022: {\u0022id\u0022:\u0022CZ\u0022,\u0022value\u0022:\u0022Czech Republic\u0022},\n          \u0022value\u0022:\u002216.6567773464055\u0022,\u0022decimal\u0022:\u00221\u0022,\u0022date\u0022:\u00222010\u0022} ] ]\n\nThe document is formed by an array that contains a record as the first element\nand a collection of data points as the second element. The following code\nreads the document and parses it:\n*)\n\nlet value = JsonValue.Load(__SOURCE_DIRECTORY__ \u002B \u0022../../data/WorldBank.json\u0022)\n\n(** Note that we can also load the data directly from the web, and there\u0027s an\nasynchronous version available too: *)\n\nlet wbReq = \n  \u0022http://api.worldbank.org/country/cz/indicator/\u0022 \u002B \n  \u0022GC.DOD.TOTL.GD.ZS?format=json\u0022\n\nlet valueAsync = \n  JsonValue.AsyncLoad(wbReq)\n\n(** To split the top-level array into the first record (with overall information) \nand the collection of data points, we use pattern matching and match the \u0060value\u0060\nagainst the \u0060JsonValue.Array\u0060 constructor:\n*)\n\nmatch value with\n| JsonValue.Array [| info; data |] -\u003E\n    // Print overall information\n    let page, pages, total = info?page, info?pages, info?total\n    printfn \n      \u0022Showing page %d of %d. Total records %d\u0022 \n      (page.AsInteger()) (pages.AsInteger()) (total.AsInteger())\n    \n    // Print every non-null data point\n    for record in data do\n      if record?value \u003C\u003E JsonValue.Null then\n        printfn \u0022%d: %f\u0022 (record?date.AsInteger()) \n                         (record?value.AsFloat())\n| _ -\u003E printfn \u0022failed\u0022\n\n(**\nThe \u0060value\u0060 property of a data point is not always available - as demonstrated\nabove, the value may be \u0060null\u0060. In that case, we want to skip the data point.\nTo check whether the property is \u0060null\u0060 we simply compare it with \u0060JsonValue.Null\u0060.\n\nThe \u0060date\u0060 values will be parsed as \u0060DateTimeOffset\u0060 if there is an offset present. \nHowever, for a mixed collection of \u0060DateTime\u0060 (that is, without the offset) and \n\u0060DateTimeOffset\u0060 values, the type of the collection will be collection of \u0060DateTime\u0060 \nafter parsing. Also note that the \u0060date\u0060 and \u0060value\u0060 properties are formatted as strings \nin the source file (e.g. \u0060\u00221990\u0022\u0060) instead of numbers (e.g. \u00601990\u0060). When you try\naccessing the value as an integer or float, the \u0060cref:T:FSharp.Data.JsonValue\u0060 automatically parses\nthe string into the desired format. In general, the API attempts to be as tolerant\nas possible when parsing the file.\n\n## Related articles\n\n * \u0060cref:T:FSharp.Data.JsonValue\u0060\n * [JSON Type Provider](JsonProvider.html) - discusses a F# type provider\n   that provides type-safe access to JSON data\n * [WorldBank Provider](WorldBank.html) - the WorldBank type provider\n   can be used to easily access data from the WorldBank\n * API Reference: \u0060cref:T:FSharp.Data.JsonValue\u0060\n * API Reference: \u0060cref:T:FSharp.Data.JsonExtensions\u0060 type\n * API Reference: \u0060cref:T:FSharp.Data.JsonExtensionsModule\u0060 module\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/WorldBank.html","title":"WorldBank Provider\r\n","content":"(**\n---\ncategory: Type Providers\ncategoryindex: 1\nindex: 5\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(** \n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# WorldBank Provider\n\nThe [World Bank](http://www.worldbank.org) is an international organization that provides\nfinancial and technical assistance to developing countries around the world. As one of the\nactivities, the World Bank also collects development indicators and other data about\ncountries in the world. The [data catalog](http://data.worldbank.org/) contains over\n8,000 indicators that can be programmatically accessed.\n\nThe WorldBank Type Provider makes the WorldBank data easily accessible to F# programs and\nscripts in a type-safe manner. This article provides an introduction.\n\n## Introducing the provider\n\n\u003Cdiv class=\u0022container-fluid\u0022 style=\u0022margin:15px 0px 15px 0px;\u0022\u003E\n    \u003Cdiv class=\u0022row-fluid\u0022\u003E\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n        \u003Cdiv class=\u0022span10\u0022 id=\u0022anim-holder\u0022\u003E\n            \u003Ca id=\u0022lnk\u0022 href=\u0022../images/wb.gif\u0022\u003E\u003Cimg id=\u0022anim\u0022 src=\u0022../images/wb.gif\u0022 /\u003E\u003C/a\u003E\n        \u003C/div\u003E\n        \u003Cdiv class=\u0022span1\u0022\u003E\u003C/div\u003E\n    \u003C/div\u003E\n\u003C/div\u003E\n\nThe following example initializes a connection to the WorldBank using the \u0060GetDataContext\u0060 method and then\nretrieves the percentage of population who attend universities in the UK:\n*)\n\nopen FSharp.Data\n\nlet data = WorldBankData.GetDataContext()\n\ndata\n  .Countries.\u0060\u0060United Kingdom\u0060\u0060\n  .Indicators.\u0060\u0060Gross capital formation (% of GDP)\u0060\u0060\n|\u003E Seq.maxBy fst\n\n(**\nWhen generating the data context, the WorldBank Type Provider retrieves the list of all\ncountries known to the WorldBank and the list of all supported indicators. Both of these\ndimensions are provided as properties, so you can use autocomplete to easily discover\nvarious data sources. Most of the indicators use longer names, so we need to wrap the name\nin \u0060\\\u0060\\\u0060\u0060.\n\nThe result of the \u0060Gross capital formation (% of GDP)\u0060 property is a sequence with \nvalues for different years. Using \u0060Seq.maxBy fst\u0060 we get the most recent available value.\n\n## Using World Bank data asynchronously\n\nIf you need to download large amounts of data or run the operation without\nblocking the caller, then you probably want to use F# asynchronous workflows to perform\nthe operation. The FSharp.Data package also provides the \u0060WorldBankDataProvider\u0060 type which takes\na number of static parameters. If the \u0060Asynchronous\u0060 parameter is set to \u0060true\u0060 then the\ntype provider generates all operations as asynchronous:\n*)\n\ntype WorldBank = WorldBankDataProvider\u003C\u0022World Development Indicators\u0022, Asynchronous=true\u003E\nWorldBank.GetDataContext()\n\n(**\nThe above snippet specified \u0022World Development Indicators\u0022 as the name of the data \nsource (a collection of commonly available indicators) and it set the optional argument\n\u0060Asynchronous\u0060 to \u0060true\u0060. As a result, properties such as \n\u0060Gross capital formation (% of GDP)\u0060 will now have a type \u0060Async\u003C(int * int)[]\u003E\u0060 meaning\nthat they represent an asynchronous computation that can be started and will eventually\nproduce the data.\n\n### Downloading data in parallel\n\nTo demonstrate the asynchronous version of the type provider, let\u0027s write code that\ndownloads the university enrollment data about a number of countries in parallel.\nWe first create a data context and then define an array with some countries we want to \nprocess:\n*)\n\nlet wb = WorldBank.GetDataContext()\n\n// Create a list of countries to process\nlet countries = \n [| wb.Countries.\u0060\u0060Arab World\u0060\u0060\n    wb.Countries.\u0060\u0060European Union\u0060\u0060\n    wb.Countries.Australia\n    wb.Countries.Brazil\n    wb.Countries.Canada\n    wb.Countries.Chile\n    wb.Countries.\u0060\u0060Czech Republic\u0060\u0060\n    wb.Countries.Denmark\n    wb.Countries.France\n    wb.Countries.Greece\n    wb.Countries.\u0060\u0060Low income\u0060\u0060\n    wb.Countries.\u0060\u0060High income\u0060\u0060\n    wb.Countries.\u0060\u0060United Kingdom\u0060\u0060\n    wb.Countries.\u0060\u0060United States\u0060\u0060 |]\n\n(**\nTo download the information in parallel, we can create a list of asynchronous \ncomputations, compose them using \u0060Async.Parallel\u0060 and then run the (single) obtained \ncomputation to perform all the downloads:\n*)\n\n(*** define-output:chart2 ***)\n\n[ for c in countries -\u003E\n    c.Indicators.\u0060\u0060Gross capital formation (% of GDP)\u0060\u0060 ]\n|\u003E Async.Parallel\n|\u003E Async.RunSynchronously\n\n\n(**\n## Related articles\n\n * API Reference: \u0060cref:T:FSharp.Data.WorldBankDataProvider\u0060 type provider\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/XmlProvider.html","title":"XML Type Provider\r\n","content":"(**\n---\ncategory: Type Providers\ncategoryindex: 1\nindex: 4\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(** \n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# XML Type Provider\n\nThis article demonstrates how to use the XML Type Provider to access XML documents\nin a statically typed way. We first look at how the structure is inferred and then \ndemonstrate the provider by parsing a RSS feed.\n\nThe XML Type Provider provides statically typed access to XML documents.\nIt takes a sample document as an input (or document containing a root XML node with\nmultiple child nodes that are used as samples). The generated type can then be used \nto read files with the same structure. If the loaded file does not match the structure \nof the sample, a runtime error may occur (but only when accessing e.g. non-existing element).\nStarting from version 3.0.0 there is also the option of using a schema (XSD) instead of\nrelying on samples.\n\n## Introducing the provider\n\nThe type provider is located in the \u0060FSharp.Data.dll\u0060 assembly. Assuming the assembly \nis located in the \u0060../../bin\u0060 directory, we can load it in F# Interactive as follows:\n(note we also need a reference to \u0060System.Xml.Linq\u0060, because the provider uses the\n\u0060XDocument\u0060 type internally): *)\n\n#r \u0022System.Xml.Linq.dll\u0022\nopen FSharp.Data\n\n(**\n### Inferring type from sample\n\nThe \u0060XmlProvider\u003C...\u003E\u0060 takes one static parameter of type \u0060string\u0060. The parameter can \nbe _either_ a sample XML string _or_ a sample file (relative to the current folder or online \naccessible via \u0060http\u0060 or \u0060https\u0060). It is not likely that this could lead to ambiguities. \n\nThe following sample generates a type that can read simple XML documents with a root node\ncontaining two attributes:\n*)\n\ntype Author = XmlProvider\u003C\u0022\u0022\u0022\u003Cauthor name=\u0022Paul Feyerabend\u0022 born=\u00221924\u0022 /\u003E\u0022\u0022\u0022\u003E\nlet sample = Author.Parse(\u0022\u0022\u0022\u003Cauthor name=\u0022Karl Popper\u0022 born=\u00221902\u0022 /\u003E\u0022\u0022\u0022)\n\nprintfn \u0022%s (%d)\u0022 sample.Name sample.Born\n\n(**\nThe type provider generates a type \u0060Author\u0060 that has properties corresponding to the\nattributes of the root element of the XML document. The types of the properties are \ninferred based on the values in the sample document. In this case, the \u0060Name\u0060 property\nhas a type \u0060string\u0060 and \u0060Born\u0060 is \u0060int\u0060.\n\nXML is a quite flexible format, so we could represent the same document differently.\nInstead of using attributes, we could use nested nodes (\u0060\u003Cname\u003E\u0060 and \u0060\u003Cborn\u003E\u0060 nested\nunder \u0060\u003Cauthor\u003E\u0060) that directly contain the values:*)\n\ntype AuthorAlt = XmlProvider\u003C\u0022\u003Cauthor\u003E\u003Cname\u003EKarl Popper\u003C/name\u003E\u003Cborn\u003E1902\u003C/born\u003E\u003C/author\u003E\u0022\u003E\nlet doc = \u0022\u003Cauthor\u003E\u003Cname\u003EPaul Feyerabend\u003C/name\u003E\u003Cborn\u003E1924\u003C/born\u003E\u003C/author\u003E\u0022\nlet sampleAlt = AuthorAlt.Parse(doc)\n\nprintfn \u0022%s (%d)\u0022 sampleAlt.Name sampleAlt.Born\n\n(**\nThe generated type provides exactly the same API for reading documents following this\nconvention (Note that you cannot use \u0060AuthorAlt\u0060 to parse samples that use the\nfirst style - the implementation of the types differs, they just provide the same public API.) \n\nThe provider turns a node into a simply typed property only when the node contains just\na primitive value and has no children or attributes. \n\n### Types for more complex structure\n\nNow let\u0027s look at a number of examples that have more interesting structure. First of \nall, what if a node contains some value, but also has some attributes?\n*)\n\ntype Detailed = XmlProvider\u003C\u0022\u0022\u0022\u003Cauthor\u003E\u003Cname full=\u0022true\u0022\u003EKarl Popper\u003C/name\u003E\u003C/author\u003E\u0022\u0022\u0022\u003E\nlet info = Detailed.Parse(\u0022\u0022\u0022\u003Cauthor\u003E\u003Cname full=\u0022false\u0022\u003EThomas Kuhn\u003C/name\u003E\u003C/author\u003E\u0022\u0022\u0022)\n\nprintfn \u0022%s (full=%b)\u0022 info.Name.Value info.Name.Full\n\n(**\nIf the node cannot be represented as a simple type (like \u0060string\u0060) then the provider\nbuilds a new type with multiple properties. Here, it generates a property \u0060Full\u0060 \n(based on the name of the attribute) and infers its type to be boolean. Then it\nadds a property with a (special) name \u0060Value\u0060 that returns the content of the element.\n\n### Types for multiple simple elements\n\nAnother interesting case is when there are multiple nodes that contain just a \nprimitive value. The following example shows what happens when the root node\ncontains multiple \u0060\u003Cvalue\u003E\u0060 nodes (note that if we leave out the parameter to the \n\u0060Parse\u0060 method, the same text used for the schema will be used as the runtime value).\n*)\n\ntype Test = XmlProvider\u003C\u0022\u003Croot\u003E\u003Cvalue\u003E1\u003C/value\u003E\u003Cvalue\u003E3\u003C/value\u003E\u003C/root\u003E\u0022\u003E\n\nTest.GetSample().Values\n|\u003E Seq.iter (printfn \u0022%d\u0022)\n\n(**\nThe type provider generates a property \u0060Values\u0060 that returns an array with the\nvalues - as the \u0060\u003Cvalue\u003E\u0060 nodes do not contain any attributes or children, they\nare turned into \u0060int\u0060 values and so the \u0060Values\u0060 property returns just \u0060int[]\u0060!\n\n## Processing philosophers\n\nIn this section we look at an example that demonstrates how the type provider works \non a simple document that lists authors that write about a specific topic. The \nsample document [\u0060data/Writers.xml\u0060](../data/Writers.xml) looks as follows:\n\n    [lang=xml]\n    \u003Cauthors topic=\u0022Philosophy of Science\u0022\u003E\n      \u003Cauthor name=\u0022Paul Feyerabend\u0022 born=\u00221924\u0022 /\u003E\n      \u003Cauthor name=\u0022Thomas Kuhn\u0022 /\u003E\n    \u003C/authors\u003E \n\nAt runtime, we use the generated type provider to parse the following string\n(which has the same structure as the sample document with the exception that \none of the \u0060author\u0060 nodes also contains a \u0060died\u0060 attribute):\n*)\n\nlet authors = \u0022\u0022\u0022\n  \u003Cauthors topic=\u0022Philosophy of Mathematics\u0022\u003E\n    \u003Cauthor name=\u0022Bertrand Russell\u0022 /\u003E\n    \u003Cauthor name=\u0022Ludwig Wittgenstein\u0022 born=\u00221889\u0022 /\u003E\n    \u003Cauthor name=\u0022Alfred North Whitehead\u0022 died=\u00221947\u0022 /\u003E\n  \u003C/authors\u003E \u0022\u0022\u0022\n\n(**\nWhen initializing the \u0060XmlProvider\u0060, we can pass it a file name or a web URL.\nThe \u0060Load\u0060 and \u0060AsyncLoad\u0060 methods allows reading the data from a file or from a web resource. The\n\u0060Parse\u0060 method takes the data as a string, so we can now print the information as follows:\n*)\n\ntype Authors = XmlProvider\u003C\u0022../data/Writers.xml\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\nlet topic = Authors.Parse(authors)\n\nprintfn \u0022%s\u0022 topic.Topic\nfor author in topic.Authors do\n  printf \u0022 - %s\u0022 author.Name \n  author.Born |\u003E Option.iter (printf \u0022 (%d)\u0022)\n  printfn \u0022\u0022\n\n(**\nThe value \u0060topic\u0060 has a property \u0060Topic\u0060 (of type \u0060string\u0060) which returns the value\nof the attribute with the same name. It also has a property \u0060Authors\u0060 that returns\nan array with all the authors. The \u0060Born\u0060 property is missing for some authors,\nso it becomes \u0060option\u003Cint\u003E\u0060 and we need to print it using \u0060Option.iter\u0060.\n\nThe \u0060died\u0060 attribute was not present in the sample used for the inference, so we\ncannot obtain it in a statically typed way (although it can still be obtained\ndynamically using \u0060author.XElement.Attribute(XName.Get(\u0022died\u0022))\u0060).\n\n## Global inference mode\n\nIn the examples shown earlier, an element was never (recursively) contained in an\nelement of the same name (for example \u0060\u003Cauthor\u003E\u0060 never contained another \u0060\u003Cauthor\u003E\u0060).\nHowever, when we work with documents such as XHTML files, this can often be the case.\nConsider for example, the following sample (a simplified version of \n[\u0060data/HtmlBody.xml\u0060](../data/HtmlBody.xml)):\n\n    [lang=xml]\n    \u003Cdiv id=\u0022root\u0022\u003E\n      \u003Cspan\u003EMain text\u003C/span\u003E\n      \u003Cdiv id=\u0022first\u0022\u003E\n        \u003Cdiv\u003ESecond text\u003C/div\u003E\n      \u003C/div\u003E\n    \u003C/div\u003E\n\nHere, a \u0060\u003Cdiv\u003E\u0060 element can contain other \u0060\u003Cdiv\u003E\u0060 elements and it is quite clear that\nthey should all have the same type - we want to be able to write a recursive function\nthat processes \u0060\u003Cdiv\u003E\u0060 elements. To make this possible, you need to set an optional\nparameter \u0060Global\u0060 to \u0060true\u0060:\n*)\n\ntype Html = XmlProvider\u003C\u0022../data/HtmlBody.xml\u0022, Global=true, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\nlet html = Html.GetSample()\n\n(**\nWhen the \u0060Global\u0060 parameter is \u0060true\u0060, the type provider _unifies_ all elements of the\nsame name. This means that all \u0060\u003Cdiv\u003E\u0060 elements have the same type (with a union\nof all attributes and all possible children nodes that appear in the sample document).\n\nThe type is located under a type \u0060Html\u0060, so we can write a \u0060printDiv\u0060 function\nthat takes \u0060Html.Div\u0060 and acts as follows:\n*)\n\n/// Prints the content of a \u003Cdiv\u003E element\nlet rec printDiv (div:Html.Div) =\n  div.Spans |\u003E Seq.iter (printfn \u0022%s\u0022)\n  div.Divs |\u003E Seq.iter printDiv\n  if div.Spans.Length = 0 \u0026\u0026 div.Divs.Length = 0 then\n      div.Value |\u003E Option.iter (printfn \u0022%s\u0022)\n\n// Print the root \u003Cdiv\u003E element with all children  \nprintDiv html\n\n(**\n\nThe function first prints all text included as \u0060\u003Cspan\u003E\u0060 (the element never has any\nattributes in our sample, so it is inferred as \u0060string\u0060), then it recursively prints\nthe content of all \u0060\u003Cdiv\u003E\u0060 elements. If the element does not contain nested elements,\nthen we print the \u0060Value\u0060 (inner text).\n\n## Loading Directly from a File or URL\n\nIn many cases we might want to define schema using a local sample file, but then directly\nload the data from disk or from a URL either synchronously (with \u0060Load\u0060) or asynchronously \n(with \u0060AsyncLoad\u0060).\n\nFor this example I am using the US Census data set from \u0060https://api.census.gov/data.xml\u0060, a sample of\nwhich I have used here for \u0060../data/Census.xml\u0060. This sample is greatly reduced from the live data, so \nthat it contains only the elements and attributes relevant to us:\n\n    [lang=xml]\n    \u003Ccensus-api\n        xmlns=\u0022http://thedataweb.rm.census.gov/api/discovery/\u0022\n        xmlns:dcat=\u0022http://www.w3.org/ns/dcat#\u0022\n        xmlns:dct=\u0022http://purl.org/dc/terms/\u0022\u003E\n        \u003Cdct:dataset\u003E\n            \u003Cdct:title\u003E2006-2010 American Community Survey 5-Year Estimates\u003C/dct:title\u003E\n            \u003Cdcat:distribution\n                dcat:accessURL=\u0022https://api.census.gov/data/2010/acs5\u0022\u003E\n            \u003C/dcat:distribution\u003E\n        \u003C/dct:dataset\u003E    \n        \u003Cdct:dataset\u003E\n            \u003Cdct:title\u003E2006-2010 American Community Survey 5-Year Estimates\u003C/dct:title\u003E\n            \u003Cdcat:distribution\n                dcat:accessURL=\u0022https://api.census.gov/data/2010/acs5\u0022\u003E\n            \u003C/dcat:distribution\u003E\n        \u003C/dct:dataset\u003E\n    \u003C/census-api\u003E\n\nWhen doing this for your scenario, be careful to ensure that enough data is given for the provider \nto infer the schema correctly. For example, the first level \u0060\u003Cdct:dataset\u003E\u0060 element must be included at \nleast twice for the provider to infer the \u0060Datasets\u0060 array rather than a single \u0060Dataset\u0060 object.\n*)\n\ntype Census = XmlProvider\u003C\u0022../data/Census.xml\u0022, ResolutionFolder=__SOURCE_DIRECTORY__\u003E\n\nlet data = Census.Load(\u0022https://api.census.gov/data.xml\u0022)\n\nlet apiLinks = data.Datasets\n               |\u003E Array.map (fun ds -\u003E ds.Title,ds.Distribution.AccessUrl)\n\n(**\nThis US Census data is an interesting dataset with this top level API returning hundreds of other\ndatasets each with their own API. Here we use the Census data to get a list of titles and URLs for \nthe lower level APIs.\n*)\n\n(**\n## Bringing in Some Async Action\n\nLet\u0027s go one step further and assume here a sligthly contrived but certainly plausible example where \nwe cache the Census URLs and refresh once in a while. Perhaps we want to load this in the background \nand then post each link over (for example) a message queue. \n\nThis is where \u0060AsyncLoad\u0060 comes into play:\n*)\n\nlet enqueue (title,apiUrl) = \n  // do the real message enqueueing here instead of\n  printfn \u0022%s -\u003E %s\u0022 title apiUrl\n\n// helper task which gets scheduled on some background thread somewhere...\nlet cacheJanitor() = async {\n  let! reloadData = Census.AsyncLoad(\u0022https://api.census.gov/data.xml\u0022)\n  reloadData.Datasets |\u003E Array.map (fun ds -\u003E ds.Title,ds.Distribution.AccessUrl)\n                      |\u003E Array.iter enqueue\n}\n\n(**\n## Reading RSS feeds\n\nTo conclude this introduction with a more interesting example, let\u0027s look how to parse a\nRSS feed. As discussed earlier, we can use relative paths or web addresses when calling\nthe type provider:\n*)\n\ntype Rss = XmlProvider\u003C\u0022http://tomasp.net/rss.xml\u0022\u003E\n\n(**\nThis code builds a type \u0060Rss\u0060 that represents RSS feeds (with the features that are used\non \u0060http://tomasp.net\u0060). The type \u0060Rss\u0060 provides static methods \u0060Parse\u0060, \u0060Load\u0060 and \u0060AsyncLoad\u0060\nto construct it - here, we just want to reuse the same URI of the schema, so we\nuse the \u0060GetSample\u0060 static method:\n*)\n\nlet blog = Rss.GetSample()\n\n(**\nPrinting the title of the RSS feed together with a list of recent posts is now quite\neasy - you can simply type \u0060blog\u0060 followed by \u0060.\u0060 and see what the autocompletion\noffers. The code looks like this:\n*)\n\n// Title is a property returning string \nprintfn \u0022%s\u0022 blog.Channel.Title\n\n// Get all item nodes and print title with link\nfor item in blog.Channel.Items do\n  printfn \u0022 - %s (%s)\u0022 item.Title item.Link\n\n(**\n\n## Transforming XML\n\nIn this example we will now also create XML in addition to consuming it.\nConsider the problem of flattening a data set. Let\u0027s say you have xml data that looks like this:\n*)\n\n[\u003CLiteral\u003E]\nlet customersXmlSample = \u0022\u0022\u0022\n  \u003CCustomers\u003E\n    \u003CCustomer name=\u0022ACME\u0022\u003E\n      \u003COrder Number=\u0022A012345\u0022\u003E\n        \u003COrderLine Item=\u0022widget\u0022 Quantity=\u00221\u0022/\u003E\n      \u003C/Order\u003E\n      \u003COrder Number=\u0022A012346\u0022\u003E\n        \u003COrderLine Item=\u0022trinket\u0022 Quantity=\u00222\u0022/\u003E\n      \u003C/Order\u003E\n    \u003C/Customer\u003E\n    \u003CCustomer name=\u0022Southwind\u0022\u003E\n      \u003COrder Number=\u0022A012347\u0022\u003E\n        \u003COrderLine Item=\u0022skyhook\u0022 Quantity=\u00223\u0022/\u003E\n        \u003COrderLine Item=\u0022gizmo\u0022 Quantity=\u00224\u0022/\u003E\n      \u003C/Order\u003E\n    \u003C/Customer\u003E\n  \u003C/Customers\u003E\u0022\u0022\u0022\n\n(**\nand you want to transform it into something like this:\n*)\n\n[\u003CLiteral\u003E]\nlet orderLinesXmlSample = \u0022\u0022\u0022\n  \u003COrderLines\u003E\n    \u003COrderLine Customer=\u0022ACME\u0022 Order=\u0022A012345\u0022 Item=\u0022widget\u0022 Quantity=\u00221\u0022/\u003E\n    \u003COrderLine Customer=\u0022ACME\u0022 Order=\u0022A012346\u0022 Item=\u0022trinket\u0022 Quantity=\u00222\u0022/\u003E\n    \u003COrderLine Customer=\u0022Southwind\u0022 Order=\u0022A012347\u0022 Item=\u0022skyhook\u0022 Quantity=\u00223\u0022/\u003E\n    \u003COrderLine Customer=\u0022Southwind\u0022 Order=\u0022A012347\u0022 Item=\u0022gizmo\u0022 Quantity=\u00224\u0022/\u003E\n  \u003C/OrderLines\u003E\u0022\u0022\u0022\n\n(**\nWe\u0027ll create types from both the input and output samples and use the constructors on the types generated by the XmlProvider:\n*)\n\ntype InputXml = XmlProvider\u003CcustomersXmlSample\u003E\ntype OutputXml = XmlProvider\u003CorderLinesXmlSample\u003E\n\nlet orderLines = \n  OutputXml.OrderLines [|\n    for customer in InputXml.GetSample().Customers do\n      for order in customer.Orders do\n        for line in order.OrderLines do\n          yield OutputXml.OrderLine\n                  ( customer.Name,\n                    order.Number,\n                    line.Item,\n                    line.Quantity ) |]\n\n(**\n\n## Using a schema (XSD)\n\nThe \u0060Schema\u0060 parameter can be used (instead of \u0060Sample\u0060) to specify an XML schema.\nThe value of the parameter can be either the name of a schema file or plain text\nlike in the following example:\n*)\n\ntype Person = XmlProvider\u003CSchema = \u0022\u0022\u0022\n  \u003Cxs:schema xmlns:xs=\u0022http://www.w3.org/2001/XMLSchema\u0022\n    elementFormDefault=\u0022qualified\u0022 attributeFormDefault=\u0022unqualified\u0022\u003E\n    \u003Cxs:element name=\u0022person\u0022\u003E\n      \u003Cxs:complexType\u003E\n        \u003Cxs:sequence\u003E\n          \u003Cxs:element name=\u0022surname\u0022 type=\u0022xs:string\u0022/\u003E\n          \u003Cxs:element name=\u0022birthDate\u0022 type=\u0022xs:date\u0022/\u003E\n        \u003C/xs:sequence\u003E\n      \u003C/xs:complexType\u003E\n    \u003C/xs:element\u003E\n  \u003C/xs:schema\u003E\u0022\u0022\u0022\u003E\n\nlet turing = Person.Parse \u0022\u0022\u0022\n  \u003Cperson\u003E\n    \u003Csurname\u003ETuring\u003C/surname\u003E\n    \u003CbirthDate\u003E1912-06-23\u003C/birthDate\u003E\n  \u003C/person\u003E\n  \u0022\u0022\u0022\n\nprintfn \u0022%s was born in %d\u0022 turing.Surname turing.BirthDate.Year\n\n\n(**\nThe properties of the provided type are derived from the schema instead of being inferred from samples.\n\nUsually a schema is not specified as plain text but stored in a file like\n[\u0060data/po.xsd\u0060](../data/po.xsd) and the uri is set in the \u0060Schema\u0060 parameter:\n*)\n\ntype PurchaseOrder = XmlProvider\u003CSchema=\u0022../data/po.xsd\u0022\u003E\n\n(**\nWhen the file includes other schema files, the \u0060ResolutionFolder\u0060 parameter can help locating them.\nThe uri may also refer to online resources:\n*)\n\ntype RssXsd = XmlProvider\u003CSchema = \u0022https://www.w3schools.com/xml/note.xsd\u0022\u003E\n\n(**\n\nThe schema is expected to define a root element (a global element with complex type).\nIn case of multiple root elements:\n*)\n\ntype TwoRoots = XmlProvider\u003CSchema = \u0022\u0022\u0022\n  \u003Cxs:schema xmlns:xs=\u0022http://www.w3.org/2001/XMLSchema\u0022\n    elementFormDefault=\u0022qualified\u0022 attributeFormDefault=\u0022unqualified\u0022\u003E\n    \u003Cxs:element name=\u0022root1\u0022\u003E\n      \u003Cxs:complexType\u003E\n        \u003Cxs:attribute name=\u0022foo\u0022 type=\u0022xs:string\u0022 use=\u0022required\u0022 /\u003E\n        \u003Cxs:attribute name=\u0022fow\u0022 type=\u0022xs:int\u0022 /\u003E\n      \u003C/xs:complexType\u003E\n    \u003C/xs:element\u003E\n    \u003Cxs:element name=\u0022root2\u0022\u003E\n      \u003Cxs:complexType\u003E\n        \u003Cxs:attribute name=\u0022bar\u0022 type=\u0022xs:string\u0022 use=\u0022required\u0022 /\u003E\n        \u003Cxs:attribute name=\u0022baz\u0022 type=\u0022xs:date\u0022 use=\u0022required\u0022 /\u003E\n      \u003C/xs:complexType\u003E\n    \u003C/xs:element\u003E\n  \u003C/xs:schema\u003E\n\u0022\u0022\u0022\u003E\n\n(**\nthe provided type has an optional property for each alternative:\n*)\n\nlet e1 = TwoRoots.Parse \u0022\u003Croot1 foo=\u0027aa\u0027 fow=\u00272\u0027 /\u003E\u0022\nmatch e1.Root1, e1.Root2 with\n| Some x, None -\u003E\n    printfn \u0022Foo = %s and Fow = %A\u0022 x.Foo x.Fow\n| _ -\u003E failwith \u0022Unexpected\u0022\n\nlet e2 = TwoRoots.Parse \u0022\u003Croot2 bar=\u0027aa\u0027 baz=\u00272017-12-22\u0027 /\u003E\u0022\nmatch e2.Root1, e2.Root2 with\n| None, Some x -\u003E\n    printfn \u0022Bar = %s and Baz = %O\u0022 x.Bar x.Baz\n| _ -\u003E failwith \u0022Unexpected\u0022\n\n(**\n\n\n### Common XSD constructs: sequence and choice\n\nA \u0060sequence\u0060 is the most common way of structuring elements in a schema.\nThe following xsd defines \u0060foo\u0060 as a sequence made of an arbitrary number\nof \u0060bar\u0060 elements followed by a single \u0060baz\u0060 element.\n*)\n\ntype FooSequence = XmlProvider\u003CSchema = \u0022\u0022\u0022\n    \u003Cxs:schema xmlns:xs=\u0022http://www.w3.org/2001/XMLSchema\u0022\n      elementFormDefault=\u0022qualified\u0022 attributeFormDefault=\u0022unqualified\u0022\u003E\n        \u003Cxs:element name=\u0022foo\u0022\u003E\n          \u003Cxs:complexType\u003E\n            \u003Cxs:sequence\u003E\n              \u003Cxs:element name=\u0022bar\u0022 type=\u0022xs:int\u0022 maxOccurs=\u0022unbounded\u0022 /\u003E\n              \u003Cxs:element name=\u0022baz\u0022 type=\u0022xs:date\u0022 minOccurs=\u00221\u0022 /\u003E\n            \u003C/xs:sequence\u003E\n          \u003C/xs:complexType\u003E\n        \u003C/xs:element\u003E\n    \u003C/xs:schema\u003E\u0022\u0022\u0022\u003E\n\n(**\nhere a valid xml element is parsed as an instance of the provided type, with two properties corresponding to \u0060bar\u0060and \u0060baz\u0060 elements, where the former is an array in order to hold multiple elements:\n*)\n\nlet fooSequence = FooSequence.Parse \u0022\u0022\u0022\n\u003Cfoo\u003E\n    \u003Cbar\u003E42\u003C/bar\u003E\n    \u003Cbar\u003E43\u003C/bar\u003E\n    \u003Cbaz\u003E1957-08-13\u003C/baz\u003E\n\u003C/foo\u003E\u0022\u0022\u0022\n\nprintfn \u0022%d\u0022 fooSequence.Bars.[0] // 42\nprintfn \u0022%d\u0022 fooSequence.Bars.[1] // 43\nprintfn \u0022%d\u0022 fooSequence.Baz.Year // 1957\n\n(**\nInstead of a sequence we may have a \u0060choice\u0060:\n*)\ntype FooChoice = XmlProvider\u003CSchema = \u0022\u0022\u0022\n    \u003Cxs:schema xmlns:xs=\u0022http://www.w3.org/2001/XMLSchema\u0022\n      elementFormDefault=\u0022qualified\u0022 attributeFormDefault=\u0022unqualified\u0022\u003E\n        \u003Cxs:element name=\u0022foo\u0022\u003E\n          \u003Cxs:complexType\u003E\n            \u003Cxs:choice\u003E\n              \u003Cxs:element name=\u0022bar\u0022 type=\u0022xs:int\u0022 maxOccurs=\u0022unbounded\u0022 /\u003E\n              \u003Cxs:element name=\u0022baz\u0022 type=\u0022xs:date\u0022 minOccurs=\u00221\u0022 /\u003E\n            \u003C/xs:choice\u003E\n          \u003C/xs:complexType\u003E\n        \u003C/xs:element\u003E\n    \u003C/xs:schema\u003E\u0022\u0022\u0022\u003E\n(**\nalthough a choice is akin to a union type in F#, the provided type still has\nproperties for \u0060bar\u0060 and \u0060baz\u0060 directly available on the \u0060foo\u0060 object; in fact\nthe properties representing alternatives in a choice are simply made optional\n(notice that for arrays this is not even necessary because an array can be empty).\nThis decision is due to technical limitations (discriminated unions are not supported\nin type providers) but also preferred because it improves discoverability:\nintellisense can show both alternatives. There is a lack of precision but this is not the main goal.\n*)\n\nlet fooChoice = FooChoice.Parse \u0022\u0022\u0022\n\u003Cfoo\u003E\n  \u003Cbaz\u003E1957-08-13\u003C/baz\u003E\n\u003C/foo\u003E\u0022\u0022\u0022\n\nprintfn \u0022%d items\u0022 fooChoice.Bars.Length // 0 items\nmatch fooChoice.Baz with\n| Some date -\u003E printfn \u0022%d\u0022 date.Year // 1957\n| None -\u003E ()\n\n(**\nAnother xsd construct to model the content of an element is \u0060all\u0060, which is used less often and\nit\u0027s like a sequence where the order of elements does not matter. The corresponding provided type\nin fact is essentially the same as for a sequence.\n\n### Advanced schema constructs\n\nXML Schema provides various extensibility mechanisms. The following example\nis a terse summary mixing substitution groups with abstract recursive definitions.\n*)\n\ntype Prop = XmlProvider\u003CSchema = \u0022\u0022\u0022\n    \u003Cxs:schema xmlns:xs=\u0022http://www.w3.org/2001/XMLSchema\u0022\n      elementFormDefault=\u0022qualified\u0022 attributeFormDefault=\u0022unqualified\u0022\u003E\n        \u003Cxs:element name=\u0022Formula\u0022 abstract=\u0022true\u0022/\u003E\n        \u003Cxs:element name=\u0022Prop\u0022 type=\u0022xs:string\u0022 substitutionGroup=\u0022Formula\u0022/\u003E\n        \u003Cxs:element name=\u0022And\u0022 substitutionGroup=\u0022Formula\u0022\u003E\n          \u003Cxs:complexType\u003E\n            \u003Cxs:sequence\u003E\n              \u003Cxs:element ref=\u0022Formula\u0022 minOccurs=\u00222\u0022 maxOccurs=\u00222\u0022/\u003E\n              \u003C/xs:sequence\u003E\n          \u003C/xs:complexType\u003E\n        \u003C/xs:element\u003E\n    \u003C/xs:schema\u003E\u0022\u0022\u0022\u003E\n\nlet formula = Prop.Parse \u0022\u0022\u0022\n    \u003CAnd\u003E\n        \u003CProp\u003Ep1\u003C/Prop\u003E\n        \u003CAnd\u003E\n            \u003CProp\u003Ep2\u003C/Prop\u003E\n            \u003CProp\u003Ep3\u003C/Prop\u003E\n        \u003C/And\u003E\n    \u003C/And\u003E\n    \u0022\u0022\u0022\n\nprintfn \u0022%s\u0022 formula.Props.[0] // p1\nprintfn \u0022%s\u0022 formula.Ands.[0].Props.[0] // p2\nprintfn \u0022%s\u0022 formula.Ands.[0].Props.[1] // p3\n\n(**\nSubstitution groups are like choices, and the type provider produces an optional\nproperty for each alternative.\n\n### Validation\nThe \u0060GetSchema\u0060 method on the generated type returns an instance\nof \u0060System.Xml.Schema.XmlSchemaSet\u0060 that can be used to validate documents:\n*)\nopen System.Xml.Schema\nlet schema = Person.GetSchema()\nturing.XElement.Document.Validate(schema, validationEventHandler = null)\n(**\nThe \u0060Validate\u0060 method accepts a callback to handle validation issues;\npassing \u0060null\u0060 will turn validation errors into exceptions.\nThere are overloads to allow other effects (for example setting default values\nby enabling the population of the XML tree with the post-schema-validation infoset;\nfor details see the [documentation](https://docs.microsoft.com/en-us/dotnet/api/system.xml.schema.extensions.validate?view=netframework-4.7.2)).\n\n### Remarks on using a schema\nThe XML Type Provider supports most XSD features.\nAnyway the [XML Schema](https://www.w3.org/XML/Schema) specification is rich and complex and also provides a\nfair degree of [openness](http://docstore.mik.ua/orelly/xml/schema/ch13_02.htm)\nwhich may be [difficult to handle](https://link.springer.com/chapter/10.1007/978-3-540-76786-2_6) in\ndata binding tools; but in FSharp.Data, when providing typed views on elements becomes too challenging\n(take for example [wildcards](https://www.w3.org/TR/xmlschema11-1/#Wildcards)) the underlying \u0060XElement\u0060\nis still available.\n\nAn important design decision is to focus on elements and not on complex types; while the latter\nmay be valuable in schema design, our goal is simply to obtain an easy and safe way to access xml data.\nIn other words the provided types are not intended for domain modeling (it\u0027s one of the very few cases\nwhere optional properties are preferred to sum types).\nHence, we do not provide types corresponding to complex types in a schema but only corresponding\nto elements (of course the underlying complex types still affect the shape of the provided types\nbut this happens only implicitly).\nFocusing on element shapes let us generate a type that should be essentially the same as one\ninferred from a significant set of valid samples. This allows a smooth transition (replacing \u0060Sample\u0060 with \u0060Schema\u0060)\nwhen a schema becomes available.\n\n## Related articles\n\n * [Using JSON provider in a library](JsonProvider.html#jsonlib) also applies to XML type provider\n * API Reference: \u0060cref:T:FSharp.Data.XmlProvider\u0060 type provider\n * API Reference: \u0060cref:T:FSharp.Data.XElementExtensions\u0060\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Data/tutorials/JsonAnonymizer.html","title":"Anonymizing JSON\r\n","content":"(**\n---\ncategory: Tutorials\ncategoryindex: 3\nindex: 1\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(**\n# Anonymizing JSON \n\n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\nThis tutorial shows how to implement an anonymizer for a JSON document (represented using\nthe \u0060cref:T:FSharp.Data.JsonValue\u0060 type discussed in [JSON parser article](JsonValue.html))\nThis functionality is not directly available in the FSharp.Data package, but it can\nbe very easily implemented by recursively walking over the JSON document.\n\nIf you want to use the JSON anonymizer in your code, you can copy the \n[source from GitHub][jsonanonymizer] and just include it in your project. If you use these\nfunctions often and would like to see them in the FSharp.Data package, please submit\na [feature request][issues].\n\n  [jsonanonymizer]: https://github.com/fsharp/FSharp.Data/blob/master/docs/content/tutorials/JsonAnonymizer.fsx\n  [issues]: https://github.com/fsharp/FSharp.Data/issues\n\n*DISCLAIMER*: Don\u0027t use this for sensitive data as it\u0027s just a sample\n\n*)\n\nopen System\nopen System.Globalization\nopen FSharp.Data\n\ntype JsonAnonymizer(?propertiesToSkip, ?valuesToSkip) = \n\n  let propertiesToSkip = Set.ofList (defaultArg propertiesToSkip [])\n  let valuesToSkip = Set.ofList (defaultArg valuesToSkip [])\n\n  let rng = Random()\n\n  let digits = [| \u00270\u0027 .. \u00279\u0027 |]\n  let lowerLetters = [| \u0027a\u0027 .. \u0027z\u0027 |]\n  let upperLetters = [| \u0027A\u0027 .. \u0027Z\u0027 |]\n\n  let getRandomChar (c:char) =\n      if Char.IsDigit c then digits.[rng.Next(10)]\n      elif Char.IsLetter c then\n          if Char.IsLower c\n          then lowerLetters.[rng.Next(26)]\n          else upperLetters.[rng.Next(26)]\n      else c\n\n  let randomize (str:string) =\n      String(str.ToCharArray() |\u003E Array.map getRandomChar)\n\n  let rec anonymize json =\n      match json with\n      | JsonValue.String s when valuesToSkip.Contains s -\u003E json\n      | JsonValue.String s -\u003E\n          let typ = \n            Runtime.StructuralInference.inferPrimitiveType \n              CultureInfo.InvariantCulture s\n\n          ( if typ = typeof\u003CGuid\u003E then Guid.NewGuid().ToString()\n            elif typ = typeof\u003CRuntime.StructuralTypes.Bit0\u003E || \n              typ = typeof\u003CRuntime.StructuralTypes.Bit1\u003E then s\n            elif typ = typeof\u003CDateTime\u003E then s\n            else \n              let prefix, s =\n                if s.StartsWith \u0022http://\u0022 then \n                  \u0022http://\u0022, s.Substring(\u0022http://\u0022.Length)\n                elif s.StartsWith \u0022https://\u0022 then \n                  \u0022https://\u0022, s.Substring(\u0022https://\u0022.Length)\n                else \u0022\u0022, s\n              prefix \u002B randomize s )\n          |\u003E JsonValue.String\n      | JsonValue.Number d -\u003E \n          let typ = \n            Runtime.StructuralInference.inferPrimitiveType \n              CultureInfo.InvariantCulture (d.ToString())\n          if typ = typeof\u003CRuntime.StructuralTypes.Bit0\u003E || \n            typ = typeof\u003CRuntime.StructuralTypes.Bit1\u003E then json\n          else d.ToString() |\u003E randomize |\u003E Decimal.Parse |\u003E JsonValue.Number\n      | JsonValue.Float f -\u003E \n          f.ToString()\n          |\u003E randomize \n          |\u003E Double.Parse \n          |\u003E JsonValue.Float\n      | JsonValue.Boolean _  | JsonValue.Null -\u003E json\n      | JsonValue.Record props -\u003E \n          props \n          |\u003E Array.map (fun (key, value) -\u003E\n              let newValue = if propertiesToSkip.Contains key then value else anonymize value\n              key, newValue)\n          |\u003E JsonValue.Record\n      | JsonValue.Array array -\u003E \n          array \n          |\u003E Array.map anonymize \n          |\u003E JsonValue.Array\n\n  member __.Anonymize json = anonymize json\n\nlet json = JsonValue.Load (__SOURCE_DIRECTORY__ \u002B \u0022../../data/TwitterStream.json\u0022)\nprintfn \u0022%O\u0022 json\n\nlet anonymizedJson = (JsonAnonymizer [\u0022lang\u0022]).Anonymize json\nprintfn \u0022%O\u0022 anonymizedJson\n\n(**\n\n## Related articles\n\n * API Reference: \u0060cref:T:FSharp.Data.JsonValue\u0060\n * [JSON Parser](../library/JsonValue.html) - a tutorial that introduces\n   \u0060cref:T:FSharp.Data.JsonValue\u0060 for working with JSON values dynamically.\n * [JSON Type Provider](../library/JsonProvider.html) - discusses F# type provider\n   that provides type-safe access to JSON data.\n\n*)"},{"uri":"https://fsprojects.github.io/FSharp.Data/tutorials/JsonToXml.html","title":"Converting between JSON and XML\r\n","content":"(**\n---\ncategory: Tutorials\ncategoryindex: 3\nindex: 2\n---\n*)\n(*** condition: prepare ***)\n#r \u0022../../src/FSharp.Data/bin/Release/netstandard2.0/FSharp.Data.dll\u0022\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n#r \u0022nuget: FSharp.Data,{{fsdocs-package-version}}\u0022\n\nFormatter.SetPreferredMimeTypeFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n(**\n# Converting between JSON and XML\n\n[![Binder](../img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](../img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook](../img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\nThis tutorial shows how to implement convert JSON document (represented using\nthe \u0060cref:T:FSharp.Data.JsonValue\u0060 type discussed in [JSON parser article](JsonValue.html)) to an\nXML document (represented as \u0060XElement\u0060) and the other way round.\nThis functionality is not directly available in the FSharp.Data package, but it can\nbe very easily implemented by recursively walking over the JSON (or XML) document.\n\nIf you want to use the JSON to/from XML conversion in your code, you can copy the \n[source from GitHub][jsontoxml] and just include it in your project. If you use these\nfunctions often and would like to see them in the FSharp.Data package, please submit\na [feature request][issues].\n\n  [jsontoxml]: https://github.com/fsharp/FSharp.Data/blob/master/docs/content/tutorials/JsonToXml.fsx\n  [issues]: https://github.com/fsharp/FSharp.Data/issues\n\nInitialization\n--------------\n\nWe will be using the LINQ to XML API (available in \u0060System.Xml.Linq.dll\u0060) and the\n\u0060cref:T:FSharp.Data.JsonValue\u0060 which is available in the \u0060FSharp.Data\u0060 namespace:\n*)\n\n#r \u0022System.Xml.Linq.dll\u0022\nopen System.Xml.Linq\nopen FSharp.Data\n\n(**\n\nIn this script, we create a conversion that returns an easy to process value, but the\nconversion is not reversible (e.g. converting JSON to XML and then back to JSON will\nproduce a different value). \n\nConverting XML to JSON\n----------------------\n\nAlthough XML and JSON are quite similar formats, there is a number of subtle differences.\nIn particular, XML distinguishes between _attributes_ and _child elements_. Moreover,\nall XML elements have a name, while JSON arrays or records are anonymous (but records\nhave named fields). Consider, for example, the following XML:\n\n    [lang=xml]\n    \u003Cchannel version=\u00221.0\u0022\u003E\n      \u003Ctitle text=\u0022Sample input\u0022 /\u003E\n      \u003Citem value=\u0022First\u0022 /\u003E\n      \u003Citem value=\u0022Second\u0022 /\u003E\n    \u003C/channel\u003E\n\nThe JSON that we produce will ignore the top-level element name (\u0060channel\u0060). It produces\na record that contains a unique field for every attribute and a name of a child element.\nIf an element appears multiple times, it is turned into an array:\n\n    [lang=js]\n    { \u0022version\u0022: \u00221.0\u0022,\n      \u0022title\u0022: { \u0022text\u0022: \u0022Sample input\u0022 },\n      \u0022items\u0022: [ { \u0022value\u0022: \u0022First\u0022 }, \n                 { \u0022value\u0022: \u0022Second\u0022 } ]  }\n\nAs you can see, the \u0060item\u0060 element has been automatically pluralized to \u0060items\u0060 and the\narray contains two record values that consist of the \u0060value\u0060 attribute.\n\nThe conversion function is a recursive function that takes a \u0060XElement\u0060 and produces \n\u0060cref:T:FSharp.Data.JsonValue\u0060. It builds JSON records (using \u0060JsonValue.Record\u0060) and arrays (using\n\u0060JsonValue.Array\u0060). All attribute values are turned into \u0060JsonValue.String\u0060 - the \nsample does not imlement more sophisticated conversion that would turn numeric \nattributes to a corresponding JSON type:\n*)\n\n/// Creates a JSON representation of a XML element\nlet rec fromXml (xml:XElement) =\n\n  // Create a collection of key/value pairs for all attributes      \n  let attrs = \n    [ for attr in xml.Attributes() -\u003E\n        (attr.Name.LocalName, JsonValue.String attr.Value) ]\n\n  // Function that turns a collection of XElement values\n  // into an array of JsonValue (using fromXml recursively)\n  let createArray xelems =\n    [| for xelem in xelems -\u003E fromXml xelem |]\n    |\u003E JsonValue.Array\n\n  // Group child elements by their name and then turn all single-\n  // element groups into a record (recursively) and all multi-\n  // element groups into a JSON array using createArray\n  let children =\n    xml.Elements() \n    |\u003E Seq.groupBy (fun x -\u003E x.Name.LocalName)\n    |\u003E Seq.map (fun (key, childs) -\u003E\n        match Seq.toList childs with\n        | [child] -\u003E key, fromXml child\n        | children -\u003E key \u002B \u0022s\u0022, createArray children )\n        \n  // Concatenate elements produced for child elements \u0026 attributes\n  Array.append (Array.ofList attrs) (Array.ofSeq children)\n  |\u003E JsonValue.Record\n\n(**\n\nConverting JSON to XML\n----------------------\n\nWhen converting JSON value to XML, we fact the same mismatch. Consider the following JSON value:\n\n    [lang=js]\n    { \u0022title\u0022 : \u0022Sample input\u0022,\n      \u0022paging\u0022 : { \u0022current\u0022: 1 },\n      \u0022items\u0022 : [ \u0022First\u0022, \u0022Second\u0022 ] }\n\nThe top-level record does not have a name, so our conversion produces a list of \u0060XObject\u0060\nvalues that can be wrapped into an \u0060XElement\u0060 by the user (who has to specify the root\nname). Record fields that are a primitive value are turned into attributes, while \ncomplex values (array or record) become objects:\n\n    [lang=xml]\n    \u003Croot title=\u0022Sample input\u0022\u003E\n      \u003Citems\u003E\n        \u003Citem\u003EFirst\u003C/item\u003E\n        \u003Citem\u003ESecond\u003C/item\u003E\n      \u003C/items\u003E\n      \u003Cpaging current=\u00221\u0022 /\u003E\n    \u003C/root\u003E\n\nThe conversion function is, again, implemented as a recursive function. This time, we use \npattern matching to distinguish between the different possible cases of \u0060cref:T:FSharp.Data.JsonValue\u0060.\nThe cases representing a primitive value simply return the value as \u0060obj\u0060, while array\nand record construct nested element(s) or attribute:\n\n*)\n\n/// Creates an XML representation of a JSON value (works \n/// only when the top-level value is an object or an array)\nlet toXml(x:JsonValue) =\n  // Helper functions for constructing XML \n  // attributes and XML elements\n  let attr name value = \n    XAttribute(XName.Get name, value) :\u003E XObject\n  let elem name (value:obj) = \n    XElement(XName.Get name, value) :\u003E XObject\n\n  // Inner recursive function that implements the conversion\n  let rec toXml = function\n    // Primitive values are returned as objects\n    | JsonValue.Null -\u003E null\n    | JsonValue.Boolean b -\u003E b :\u003E obj\n    | JsonValue.Number number -\u003E number :\u003E obj\n    | JsonValue.Float number -\u003E number :\u003E obj\n    | JsonValue.String s -\u003E s :\u003E obj\n\n    // JSON object becomes a collection of XML\n    // attributes (for primitives) or child elements\n    | JsonValue.Record properties -\u003E \n      properties \n      |\u003E Array.map (fun (key, value) -\u003E\n          match value with\n          | JsonValue.String s -\u003E attr key s\n          | JsonValue.Boolean b -\u003E attr key b\n          | JsonValue.Number n -\u003E attr key n\n          | JsonValue.Float n -\u003E attr key n\n          | _ -\u003E elem key (toXml value)) :\u003E obj\n\n    // JSON array is turned into a \n    // sequence of \u003Citem\u003E elements\n    | JsonValue.Array elements -\u003E \n        elements |\u003E Array.map (fun item -\u003E \n          elem \u0022item\u0022 (toXml item)) :\u003E obj\n\n  // Perform the conversion and cast the result to sequence\n  // of objects (may fail for unexpected inputs!)\n  (toXml x) :?\u003E XObject seq\n\n(**\n\n\n## Related articles\n\n * API Reference: \u0060cref:T:FSharp.Data.JsonValue\u0060\n * [JSON Parser](../library/JsonValue.html) - a tutorial that introduces\n   \u0060JsonValue\u0060 for working with JSON values dynamically.\n * [JSON Type Provider](../library/JsonProvider.html) - discusses F# type provider\n   that provides type-safe access to JSON data.\n * [XML Type Provider](../library/XmlProvider.html) - discusses the F# type provider\n   that provides type-safe access to XML data.\n\n*)"}]